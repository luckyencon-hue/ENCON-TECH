
const fs = require('fs');
const path = require('path');

const projectData = {
  ".env": ``,
  "README.md": `# ENCON CONCEPT - School Management Platform

This is a comprehensive, all-in-one school management platform designed and developed by **encon concept**. It provides a complete solution for managing academics, finance, communication, and administrative tasks for educational institutions.

## Features

*   **Role-Based Dashboards**: Tailored experiences for Admins, Staff, Students, and Parents.
*   **Academic Management**: Handle classes, subjects, grades, assignments, and computer-based tests (CBT).
*   **AI-Powered Tools**: Includes AI-driven features for lesson plan generation, essay grading, and more.
*   **Finance & Enrollment**: Manage student fees, payments, and the entire student enrollment process.
*   **Communication Hub**: Secure internal messaging system for all users.
*   **Attendance & Reporting**: Robust systems for tracking daily attendance and handling student issue reports.

## Tech Stack

*   **Framework**: Next.js (App Router)
*   **Language**: TypeScript
*   **Styling**: Tailwind CSS with ShadCN UI components
*   **Generative AI**: Google AI & Genkit

## Contact

*   **Creator**: encon concept
*   **WhatsApp**: +2347037742669
*   **Facebook**: encon
`,
  "apphosting.yaml": `# Settings to manage and configure a Firebase App Hosting backend.
# https://firebase.google.com/docs/app-hosting/configure

runConfig:
  # Increase this value if you'd like to automatically spin up
  # more instances in response to increased traffic.
  maxInstances: 1
`,
  "components.json": `{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
`,
  "next-env.d.ts": `/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.
`,
  "next.config.ts": `import type {NextConfig} from 'next';

const nextConfig: NextConfig = {
  /* config options here */
  typescript: {
    ignoreBuildErrors: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'placehold.co',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'api.qrserver.com',
        port: '',
        pathname: '/**',
      },
    ],
  },
  experimental: {
    allowedDevOrigins: [
      '*.cloudworkstations.dev',
    ],
  },
};

export default nextConfig;
`,
  "package.json": `{
  "name": "nextn",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "genkit:dev": "genkit start -- tsx src/ai/dev.ts",
    "genkit:watch": "genkit start -- tsx --watch src/ai/dev.ts",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@genkit-ai/googleai": "^1.14.1",
    "@genkit-ai/next": "^1.14.1",
    "@hookform/resolvers": "^4.1.3",
    "@radix-ui/react-accordion": "^1.2.3",
    "@radix-ui/react-alert-dialog": "^1.1.6",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-checkbox": "^1.1.4",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-menubar": "^1.1.6",
    "@radix-ui/react-popover": "^1.1.6",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.3",
    "@radix-ui/react-scroll-area": "^1.2.3",
    "@radix-ui/react-select": "^2.1.6",
    "@radix-ui/react-separator": "^1.1.2",
    "@radix-ui/react-slider": "^1.2.3",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.1.3",
    "@radix-ui/react-tabs": "^1.1.3",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-tooltip": "^1.1.8",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "embla-carousel-react": "^8.6.0",
    "genkit": "^1.14.1",
    "jsqr": "^1.4.0",
    "lucide-react": "^0.475.0",
    "next": "15.3.3",
    "patch-package": "^8.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.54.2",
    "react-to-print": "^2.15.1",
    "recharts": "^2.15.1",
    "tailwind-merge": "^3.0.1",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.24.2"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "genkit-cli": "^1.14.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}
`,
    "src/ai/dev.ts": `import { config } from 'dotenv';
config();

import '@/ai/flows/calendar-data-refinement.ts';
import '@/ai/flows/grade-management-flow.ts';
import '@/ai/flows/grade-essay-flow.ts';
import '@/ai/flows/extract-student-data-flow.ts';
import '@/ai/flows/generate-test-questions-flow.ts';
import '@/ai/flows/generate-lesson-plan-flow.ts';
`,
    "src/ai/flows/calendar-data-refinement.ts": `// src/ai/flows/calendar-data-refinement.ts
'use server';

/**
 * @fileOverview Refines calendar data using AI to correct inaccuracies and ensure proper formatting.
 *
 * - refineCalendarData - A function that refines calendar data.
 * - RefineCalendarDataInput - The input type for the refineCalendarData function.
 * - RefineCalendarDataOutput - The return type for the refineCalendarData function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RefineCalendarDataInputSchema = z.object({
  calendarData: z.string().describe('The calendar data to refine.'),
});
export type RefineCalendarDataInput = z.infer<typeof RefineCalendarDataInputSchema>;

const RefineCalendarDataOutputSchema = z.object({
  refinedCalendarData: z.string().describe('The refined calendar data.'),
});
export type RefineCalendarDataOutput = z.infer<typeof RefineCalendarDataOutputSchema>;

export async function refineCalendarData(input: RefineCalendarDataInput): Promise<RefineCalendarDataOutput> {
  return refineCalendarDataFlow(input);
}

const refineCalendarDataPrompt = ai.definePrompt({
  name: 'refineCalendarDataPrompt',
  input: {schema: RefineCalendarDataInputSchema},
  output: {schema: RefineCalendarDataOutputSchema},
  prompt: \`You are an AI assistant specializing in refining calendar data.

  Correct any inaccuracies in the information provided and ensure proper formatting for display.
  The calendar data is as follows:

  {{calendarData}}

  Return the refined calendar data. Be as concise as possible.\`, 
});

const refineCalendarDataFlow = ai.defineFlow(
  {
    name: 'refineCalendarDataFlow',
    inputSchema: RefineCalendarDataInputSchema,
    outputSchema: RefineCalendarDataOutputSchema,
  },
  async input => {
    const {output} = await refineCalendarDataPrompt(input);
    return output!;
  }
);
`,
    "src/ai/flows/extract-student-data-flow.ts": `// src/ai/flows/extract-student-data-flow.ts
'use server';

/**
 * @fileOverview An AI agent for extracting structured data from an image of a student enrollment form.
 *
 * - extractStudentData - A function that scans an enrollment form image and returns structured data.
 * - ExtractStudentDataInput - The input type for the extractStudentData function.
 * - ExtractStudentDataOutput - The return type for the extractStudentData function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ExtractStudentDataInputSchema = z.object({
  formImage: z
    .string()
    .describe(
      "A photo of a completed student enrollment form, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ExtractStudentDataInput = z.infer<typeof ExtractStudentDataInputSchema>;

// Note: This schema should mirror the fields in the enrollment form.
// The AI will attempt to fill these fields from the provided image.
const ExtractStudentDataOutputSchema = z.object({
    firstName: z.string().optional().describe("The student's first name."),
    middleName: z.string().optional().describe("The student's middle name."),
    surname: z.string().optional().describe("The student's surname."),
    regNo: z.string().optional().describe("The student's registration number."),
    email: z.string().optional().describe("The student's email address."),
    dob: z.string().optional().describe("The student's date of birth in YYYY-MM-DD format."),
    parentName: z.string().optional().describe("The name of the student's parent or guardian."),
    parentContact: z.string().optional().describe("The contact phone number or email of the parent/guardian."),
    classId: z.string().optional().describe("The ID of the class the student should be enrolled in."),
    nationality: z.string().optional().describe("The student's nationality."),
    stateOfOrigin: z.string().optional().describe("The student's state of origin."),
    lga: z.string().optional().describe("The student's Local Government Area (LGA)."),
    hobbies: z.string().optional().describe("A comma-separated list of the student's hobbies."),
    bloodGroup: z.string().optional().describe("The student's blood group (e.g., O+, A-, AB+)."),
    genotype: z.string().optional().describe("The student's genotype (e.g., AA, AS, SS)."),
    disabilities: z.string().optional().describe("Any listed disabilities. 'None' if not specified."),
    healthConditions: z.string().optional().describe("Any listed known health conditions. 'None' if not specified."),
});
export type ExtractStudentDataOutput = z.infer<typeof ExtractStudentDataOutputSchema>;

export async function extractStudentData(input: ExtractStudentDataInput): Promise<ExtractStudentDataOutput> {
  return extractStudentDataFlow(input);
}

const extractDataPrompt = ai.definePrompt({
  name: 'extractDataPrompt',
  input: {schema: ExtractStudentDataInputSchema},
  output: {schema: ExtractStudentDataOutputSchema},
  prompt: \`You are a highly accurate data entry specialist AI. Your task is to analyze the provided image of a student enrollment form and extract the information into a structured JSON format.

  Analyze the following form image:
  {{media url=formImage}}

  Carefully read all handwritten and typed text in the image. Identify the labels and corresponding values for each field.
  
  - For the 'dob' field, infer the date and return it strictly in 'YYYY-MM-DD' format.
  - For all other fields, extract the information as accurately as possible.
  - If a field is not present or is illegible, omit it from the output.

  Return the extracted data according to the specified output schema.\`,
});

const extractStudentDataFlow = ai.defineFlow(
  {
    name: 'extractStudentDataFlow',
    inputSchema: ExtractStudentDataInputSchema,
    outputSchema: ExtractStudentDataOutputSchema,
  },
  async input => {
    const {output} = await extractDataPrompt(input);
    return output!;
  }
);
`,
    "src/ai/flows/generate-lesson-plan-flow.ts": `// src/ai/flows/generate-lesson-plan-flow.ts
'use server';

/**
 * @fileOverview An AI agent for generating lesson plans, notes, and suggesting materials.
 *
 * - generateLessonPlan - A function that creates educational content for a given topic.
 * - GenerateLessonPlanInput - The input type for the function.
 * - GenerateLessonPlanOutput - The return type for the function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateLessonPlanInputSchema = z.object({
  topic: z.string().describe('The main topic for the lesson.'),
  subject: z.string().describe('The subject this lesson belongs to (e.g., Biology, History).'),
  className: z.string().describe('The name of the class the lesson is for (e.g., SS1, JSS 2).'),
  week: z.number().describe('The academic week number for this lesson.'),
  objectives: z.string().optional().describe('Specific learning objectives for the students. If provided, the generated content will be tailored to meet these objectives.'),
});
export type GenerateLessonPlanInput = z.infer<typeof GenerateLessonPlanInputSchema>;

const MaterialSuggestionSchema = z.object({
    type: z.enum(['video', 'article', 'interactive']).describe('The type of the suggested learning material.'),
    title: z.string().describe('The title of the material.'),
    url: z.string().url().describe('A direct URL to the material.'),
    description: z.string().describe('A brief description of why this material is relevant.'),
});

const GenerateLessonPlanOutputSchema = z.object({
  topic: z.string().describe('The lesson topic.'),
  lessonPlan: z.string().describe('A detailed, structured lesson plan for the week, formatted in Markdown. It should include daily activities, teaching methods, and assessments.'),
  lessonNote: z.string().describe('A comprehensive lesson note on the topic, formatted in Markdown. This should be detailed enough for a student to study from.'),
  suggestedMaterials: z.array(MaterialSuggestionSchema).optional().describe('A list of up to 3 relevant, publicly-accessible online learning materials (videos, articles) that supplement the lesson note.'),
});
export type GenerateLessonPlanOutput = z.infer<typeof GenerateLessonPlanOutputSchema>;

export async function generateLessonPlan(input: GenerateLessonPlanInput): Promise<GenerateLessonPlanOutput> {
  return generateLessonPlanFlow(input);
}

const lessonPlanPrompt = ai.definePrompt({
  name: 'lessonPlanPrompt',
  input: {schema: GenerateLessonPlanInputSchema},
  output: {schema: GenerateLessonPlanOutputSchema},
  prompt: \`You are an expert curriculum developer and teaching assistant AI. Your task is to generate a comprehensive lesson package for a Nigerian secondary school teacher.

  Here are the details for the lesson:
  - Class: {{{className}}}
  - Subject: {{{subject}}}
  - Week: {{{week}}}
  - Topic: {{{topic}}}
  {{#if objectives}}- Specific Objectives: {{{objectives}}}{{/if}}

  Your response must include three parts:
  1.  **Lesson Plan**: Create a structured, 5-day lesson plan. Use Markdown for formatting. For each day, include:
      - A sub-topic or focus.
      - Key learning activities (e.g., lecture, group discussion, practical work).
      - Instructional materials needed.
      - A brief assessment method (e.g., class questions, short quiz).

  2.  **Lesson Note**: Write a detailed, well-structured lesson note on the main topic. Use Markdown for clear formatting, including headings, subheadings, lists, and bold text for key terms. The note must be comprehensive and complete, suitable for a student to use for self-study. Do not truncate it.

  3.  **Suggested Materials**: Provide a list of 2-3 publicly accessible online resources that would be beneficial for the students. These must be real, valid URLs. Prefer high-quality educational websites or YouTube channels (like Khan Academy, National Geographic, BBC Bitesize, etc.). For each suggestion, you must provide the type (video, article, interactive), a title, the URL, and a short description of its relevance. This part is mandatory.

  Generate the content based on the provided details, ensuring it is accurate, engaging, and appropriate for the specified class level.
  \`,
});

const generateLessonPlanFlow = ai.defineFlow(
  {
    name: 'generateLessonPlanFlow',
    inputSchema: GenerateLessonPlanInputSchema,
    outputSchema: GenerateLessonPlanOutputSchema,
  },
  async input => {
    const {output} = await lessonPlanPrompt(input);
    return output!;
  }
);
`,
    "src/ai/flows/generate-test-questions-flow.ts": `// src/ai/flows/generate-test-questions-flow.ts
'use server';

/**
 * @fileOverview An AI agent for generating test questions from a topic.
 *
 * - generateTestQuestions - A function that generates test questions based on a topic.
 * - GenerateTestQuestionsInput - The input type for the generateTestQuestions function.
 * - GenerateTestQuestionsOutput - The return type for the generateTestQuestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTestQuestionsInputSchema = z.object({
  topic: z.string().describe('The central topic for the test questions.'),
  subject: z.string().describe('The subject the topic belongs to (e.g., Biology, History).'),
  className: z.string().describe('The class level the questions are for (e.g., SS1, JSS 2).'),
  numObjective: z.coerce.number().describe('The number of objective questions to generate.'),
  numEssay: z.coerce.number().describe('The number of essay questions to generate.'),
});
export type GenerateTestQuestionsInput = z.infer<typeof GenerateTestQuestionsInputSchema>;

const ObjectiveQuestionSchema = z.object({
  question: z.string().describe('The full text of the objective question.'),
  options: z.array(z.string()).min(4).max(4).describe('An array of 4 possible options for the question.'),
  correctAnswer: z.string().describe('The correct option from the provided options.'),
});

const EssayQuestionSchema = z.object({
  question: z.string().describe('The full text of the essay question.'),
  markingRubric: z.string().describe('A detailed marking rubric or model answer for the essay question.'),
});


const GenerateTestQuestionsOutputSchema = z.object({
    objectiveQuestions: z.array(ObjectiveQuestionSchema).optional().describe('An array of generated objective questions.'),
    essayQuestions: z.array(EssayQuestionSchema).optional().describe('An array of generated essay questions.'),
});
export type GenerateTestQuestionsOutput = z.infer<typeof GenerateTestQuestionsOutputSchema>;

export async function generateTestQuestions(input: GenerateTestQuestionsInput): Promise<GenerateTestQuestionsOutput> {
  return generateTestQuestionsFlow(input);
}

const generateQuestionsPrompt = ai.definePrompt({
  name: 'generateQuestionsPrompt',
  input: {schema: GenerateTestQuestionsInputSchema},
  output: {schema: GenerateTestQuestionsOutputSchema},
  prompt: \`You are an expert Nigerian secondary school teacher and examiner. Your task is to generate high-quality test questions based on a given topic for a specific class and subject.

  Topic: {{{topic}}}
  Subject: {{{subject}}}
  Class: {{{className}}}
  Number of Objective Questions: {{{numObjective}}}
  Number of Essay Questions: {{{numEssay}}}

  Instructions:
  1.  Generate exactly the requested number of objective and essay questions.
  2.  For objective questions, provide four plausible options (A, B, C, D) and clearly indicate the correct answer. The options should be distinct and challenging.
  3.  For essay questions, provide a detailed and clear question. Also, generate a comprehensive marking rubric or a model answer that can be used for grading.
  4.  Ensure the difficulty and content of the questions are appropriate for the specified Nigerian class level (e.g., SS1, JSS 2).
  5.  The questions should be clear, unambiguous, and directly related to the provided topic.

  Return the generated questions in the specified JSON format.\`,
});

const generateTestQuestionsFlow = ai.defineFlow(
  {
    name: 'generateTestQuestionsFlow',
    inputSchema: GenerateTestQuestionsInputSchema,
    outputSchema: GenerateTestQuestionsOutputSchema,
  },
  async input => {
    const {output} = await generateQuestionsPrompt(input);
    return output!;
  }
);
`,
    "src/ai/flows/grade-essay-flow.ts": `// src/ai/flows/grade-essay-flow.ts
'use server';

/**
 * @fileOverview An AI agent for grading student essays based on a provided rubric.
 *
 * - gradeEssay - A function that grades a student's essay.
 * - GradeEssayInput - The input type for the gradeEssay function.
 * - GradeEssayOutput - The return type for the gradeEssay function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GradeEssayInputSchema = z.object({
  question: z.string().describe('The essay question that was given to the student.'),
  markingRubric: z.string().describe('The detailed marking rubric or model answer for the question. This will be used to grade the essay.'),
  studentAnswer: z.string().describe("The student's essay answer."),
});
export type GradeEssayInput = z.infer<typeof GradeEssayInputSchema>;

const GradeEssayOutputSchema = z.object({
  score: z.number().describe('The numerical score for the essay, based on the total marks specified in the rubric.'),
  feedback: z.string().describe('Detailed, constructive feedback for the student, explaining the score and suggesting areas for improvement.'),
  isCompliant: z.boolean().describe('Whether the student\\'s answer was a serious attempt to answer the question.'),
});
export type GradeEssayOutput = z.infer<typeof GradeEssayOutputSchema>;

export async function gradeEssay(input: GradeEssayInput): Promise<GradeEssayOutput> {
  return gradeEssayFlow(input);
}

const essayGradingPrompt = ai.definePrompt({
  name: 'essayGradingPrompt',
  input: {schema: GradeEssayInputSchema},
  output: {schema: GradeEssayOutputSchema},
  prompt: \`You are an expert AI teaching assistant. Your task is to grade a student's essay based on a provided question and marking rubric.

  Question:
  {{{question}}}

  Marking Rubric:
  {{{markingRubric}}}

  Student's Answer:
  {{{studentAnswer}}}

  Instructions:
  1.  Carefully compare the student's answer against the marking rubric.
  2.  Determine a fair score based on the total marks available in the rubric. The score you provide must not exceed the total marks specified in the rubric.
  3.  Provide detailed, constructive feedback. Explain why the student received the score they did. Highlight strengths and weaknesses, and offer specific suggestions for improvement.
  4.  If the answer is nonsensical or does not attempt to answer the question, set 'isCompliant' to false and provide feedback explaining the issue. Otherwise, set it to true.
  5.  Be encouraging and maintain a supportive tone in your feedback.\`,
});

const gradeEssayFlow = ai.defineFlow(
  {
    name: 'gradeEssayFlow',
    inputSchema: GradeEssayInputSchema,
    outputSchema: GradeEssayOutputSchema,
  },
  async input => {
    const {output} = await essayGradingPrompt(input);
    return output!;
  }
);
`,
    "src/ai/flows/grade-management-flow.ts": `// src/ai/flows/grade-management-flow.ts
'use server';

/**
 * @fileOverview Manages student grades using AI to provide remarks and ensure data integrity.
 *
 * - manageGrades - A function that processes and updates student grades.
 * - ManageGradesInput - The input type for the manageGrades function.
 * - ManageGradesOutput - The return type for the manageGrades function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GradeSchema = z.object({
  subject: z.string(),
  firstCA: z.number().nullable(),
  secondCA: z.number().nullable(),
  project: z.number().nullable(),
  exam: z.number().nullable(),
});

const ManageGradesInputSchema = z.object({
  studentName: z.string().describe('The name of the student whose grades are being managed.'),
  grades: z.array(GradeSchema).describe('The list of grades for the student.'),
});
export type ManageGradesInput = z.infer<typeof ManageGradesInputSchema>;

const ManageGradesOutputSchema = z.object({
  updatedGrades: z.array(GradeSchema).describe('The updated list of grades for the student, including any AI-generated remarks or adjustments.'),
  overallRemark: z.string().describe('An overall remark on the student\\'s performance based on the provided grades.'),
});
export type ManageGradesOutput = z.infer<typeof ManageGradesOutputSchema>;

export async function manageGrades(input: ManageGradesInput): Promise<ManageGradesOutput> {
  return manageGradesFlow(input);
}

const gradeManagementPrompt = ai.definePrompt({
  name: 'gradeManagementPrompt',
  input: {schema: ManageGradesInputSchema},
  output: {schema: ManageGradesOutputSchema},
  prompt: \`You are an AI assistant for a school's academic department. Your task is to process a student's grades.

  Student Name: {{{studentName}}}
  Grades:
  {{#each grades}}
  - Subject: {{subject}}
    1st CA: {{firstCA}}
    2nd CA: {{secondCA}}
    Project: {{project}}
    Exam: {{exam}}
  {{/each}}

  Based on these grades, provide an overall remark on the student's performance.
  Return the original grade data along with your overall remark. Be encouraging and constructive in your feedback.\`,
});

const manageGradesFlow = ai.defineFlow(
  {
    name: 'manageGradesFlow',
    inputSchema: ManageGradesInputSchema,
    outputSchema: ManageGradesOutputSchema,
  },
  async (input) => {
    const {output} = await gradeManagementPrompt(input);
    if (!output) {
      // If the AI fails, just return the original grades with a default remark.
      return {
        updatedGrades: input.grades,
        overallRemark: "Could not generate remark."
      }
    }
    // The prompt asks the AI to return the original grades, so we trust it here.
    return output;
  }
);
`,
    "src/ai/genkit.ts": `import {genkit} from 'genkit';
import {googleAI} from '@genkit-ai/googleai';

export const ai = genkit({
  plugins: [googleAI()],
  model: 'googleai/gemini-2.5-flash',
});
`,
    "src/app/api/auth/login/route.ts": `// src/app/api/auth/login/route.ts
import { NextResponse } from 'next/server';
import { db } from '@/lib/firebase';
import { collection, query, where, getDocs, DocumentData } from 'firebase/firestore';
import type { Role, User } from '@/context/user-context';
import type { Staff, Student } from '@/lib/data';
import { initialAdminsData } from '@/lib/data';

// Helper to find the chief admin for a given school ID
async function getChiefAdmin(schoolId: string): Promise<DocumentData | null> {
    const adminsRef = collection(db, "admins");
    const q = query(adminsRef, where("schoolId", "==", schoolId), where("isChiefAdmin", "==", true));
    const querySnapshot = await getDocs(q);
    if (!querySnapshot.empty) {
        return querySnapshot.docs[0].data();
    }
    return null;
}

export async function POST(request: Request) {
  try {
    const { role, loginId, password } = await request.json() as { role: Role, loginId: string, password: string };

    if (!role || !loginId || !password) {
      return NextResponse.json({ message: 'Missing required fields.' }, { status: 400 });
    }
    
    const trimmedLoginId = loginId.toLowerCase().trim();

    // Special check for the platform owner, who is not in Firestore
    const platformOwner = initialAdminsData.find(admin => admin.schoolId === 'encon-initial' && admin.email === trimmedLoginId);
    if (platformOwner) {
        if (platformOwner.password === password) {
             const { password: _, ...finalUser } = platformOwner;
             return NextResponse.json({ user: finalUser });
        } else {
            return NextResponse.json({ message: 'Invalid password for platform owner.' }, { status: 401 });
        }
    }

    let userDoc: DocumentData | undefined;
    let q;
    
    const collectionName = {
      'Admin': 'admins',
      'Staff': 'staff',
      'Student': 'students',
      'Parent': 'students',
    }[role];

    if (!collectionName) {
        return NextResponse.json({ message: 'Invalid role specified.' }, { status: 400 });
    }

    const fieldToQuery = {
      'Admin': 'email',
      'Staff': 'staffId',
      'Student': 'regNo',
      'Parent': 'parentContact',
    }[role];

    q = query(collection(db, collectionName), where(fieldToQuery, "==", trimmedLoginId));
    
    const querySnapshot = await getDocs(q);
    
    if (querySnapshot.empty) {
       return NextResponse.json({ message: \`No \${role.toLowerCase()} account found with those credentials.\` }, { status: 404 });
    }
    
    userDoc = querySnapshot.docs[0].data();
    
    const userPassword = role === 'Parent' ? userDoc.parentContact : userDoc.password;
    if (userPassword !== password) {
        return NextResponse.json({ message: \`Invalid password for \${role.toLowerCase()} account.\` }, { status: 401 });
    }
    
    const chiefAdmin = await getChiefAdmin(userDoc.schoolId);
    if (chiefAdmin?.status === 'Blocked' && !userDoc.isChiefAdmin) {
       return NextResponse.json({ message: "This school's account has been blocked. Please contact platform support." }, { status: 403 });
    }

    let userToReturn: User | Partial<User> = userDoc;

    // Handle special cases for derived users like Parents
    if (role === 'Parent') {
        const student = userDoc as Student;
        userToReturn = {
             name: \`Parent of \${student.firstName} \${student.surname}\`,
             role: 'Parent',
             avatar: student.avatar,
             schoolId: student.schoolId,
             schoolName: student.schoolName,
             regNo: student.regNo, // Used to associate with the student
             status: 'Active',
        };
    } else if (role === 'Student') {
        const student = userDoc as Student;
        userToReturn = { ...student, name: \`\${student.firstName} \${student.surname}\` };
    }

   // Important: Never send the password back to the client
   const { password: _, ...finalUser } = userToReturn;
   return NextResponse.json({ user: finalUser });

  } catch (error) {
    console.error('Login API Error:', error);
    if (error instanceof Error && 'code' in error && (error as any).code === 'permission-denied') {
       return NextResponse.json({ message: 'Database permission error. Check your Firestore rules.' }, { status: 500 });
    }
    return NextResponse.json({ message: 'An internal server error occurred.' }, { status: 500 });
  }
}
`,
    "src/app/dashboard/academics/page.tsx": `// src/app/dashboard/academics/page.tsx
'use client';

import { useState, useMemo, useCallback, useEffect } from 'react';
import { useUser, type AttendanceState } from '@/context/user-context';
import { Student, Grade, SchoolClass, Psychomotor, CbtTest, StudentTestAttempt } from '@/lib/data';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from '@/components/ui/accordion';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from '@/components/ui/sheet';
import { BookOpen, Loader2, Save, UserCheck, UserX, Star, StarHalf, Edit, Printer } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { manageGrades } from '@/ai/flows/grade-management-flow';
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ScrollArea } from '@/components/ui/scroll-area';

const calculateAttendanceSummary = (regNo: string, attendance: AttendanceState) => {
  let presentCount = 0;
  let absentCount = 0;

  Object.values(attendance).forEach(dailyRecord => {
    const studentRecord = dailyRecord[regNo];
    if (studentRecord) {
      if (studentRecord.morning === 'present' || studentRecord.afternoon === 'present') {
        presentCount++;
      } else {
        absentCount++;
      }
    }
  });

  return { presentCount, absentCount };
}

const PsychomotorRating = ({ rating }: { rating: number }) => {
  const fullStars = Math.floor(rating);
  const halfStar = rating % 1 !== 0;
  const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);

  return (
    <div className="flex gap-1">
      {[...Array(fullStars)].map((_, i) => <Star key={\`full-\${i}\`} className="h-4 w-4 text-yellow-400 fill-yellow-400" />)}
      {halfStar && <StarHalf key="half" className="h-4 w-4 text-yellow-400 fill-yellow-400" />}
      {[...Array(emptyStars)].map((_, i) => <Star key={\`empty-\${i}\`} className="h-4 w-4 text-muted-foreground/50" />)}
    </div>
  );
};

const StudentResultSheet = ({ student, schoolClass, onUpdateStudent }: { student: Student, schoolClass: any, onUpdateStudent: (updatedStudent: Student) => void }) => {
  const { user, attendance, studentTestAttempts, cbtTests } = useUser();
  const { toast } = useToast();
  const [isProcessing, setIsProcessing] = useState(false);
  
  const mergedGrades = useMemo(() => {
    const baseGrades = JSON.parse(JSON.stringify(student.grades || []));
    const studentAttempts = studentTestAttempts.filter(
        (attempt) => attempt.studentRegNo === student.regNo
    );
    
    for (const attempt of studentAttempts) {
        const test = cbtTests.find((t) => t.id === attempt.testId);
        if (test && test.resultsPublished) {
            let grade = baseGrades.find((g: Grade) => g.subject === test.subject);
            if (!grade) {
                grade = { subject: test.subject, firstCA: null, secondCA: null, project: null, exam: null };
                baseGrades.push(grade);
            }
            
            const totalObjMarks = test.objectiveQuestions.reduce((sum, q) => sum + (q.marks || 1), 0);
            const totalEssayMarks = test.essayQuestions.reduce((sum, q) => sum + (q.marks || 0), 0);
            const totalTestMarks = totalObjMarks + totalEssayMarks;

            let finalScoreOutOfCategory = attempt.totalScore;
            if (totalTestMarks > 0) {
              const percentageScore = (attempt.objectiveScore + Object.values(attempt.essayScores).reduce((acc, s) => acc + s.score, 0)) / totalTestMarks;
               if (test.category === '1st CA' || test.category === '2nd CA') {
                 finalScoreOutOfCategory = percentageScore * 20;
              } else if (test.category === 'Exam') {
                 finalScoreOutOfCategory = percentageScore * 50;
              }
            }
            
            if (test.category === '1st CA' && grade.firstCA === null) {
                grade.firstCA = finalScoreOutOfCategory;
            } else if (test.category === '2nd CA' && grade.secondCA === null) {
                grade.secondCA = finalScoreOutOfCategory;
            } else if (test.category === 'Exam' && grade.exam === null) {
                grade.exam = finalScoreOutOfCategory;
            }
        }
    }
    return baseGrades;

  }, [student, studentTestAttempts, cbtTests]);

  const [editableGrades, setEditableGrades] = useState<Grade[]>(mergedGrades);
  const [editablePsychomotor, setEditablePsychomotor] = useState<Psychomotor[]>(JSON.parse(JSON.stringify(student.psychomotor || [])));

  useEffect(() => {
    setEditableGrades(mergedGrades);
  }, [mergedGrades]);

  const canEdit = useMemo(() => {
    if (!user) return false;
    return user.role === 'Admin' || (user.role === 'Staff' && user.name === schoolClass.teacher);
  }, [user, schoolClass]);

  const handleGradeChange = (subject: string, field: keyof Omit<Grade, 'subject'>, value: string) => {
    const numericValue = value === '' ? null : Number(value);
    setEditableGrades(prevGrades =>
      prevGrades.map(g =>
        g.subject === subject ? { ...g, [field]: numericValue } : g
      )
    );
  };
  
  const handlePsychomotorChange = (skill: string, value: string) => {
    const numericValue = Math.max(1, Math.min(5, Number(value))) as Psychomotor['rating'];
    setEditablePsychomotor(prev => 
      prev.map(p => p.skill === skill ? {...p, rating: numericValue} : p)
    )
  }

  const handleSaveChanges = async () => {
    setIsProcessing(true);
    try {
      const result = await manageGrades({
        studentName: student.name,
        grades: editableGrades.map(g => ({...g}))
      });

      const updatedStudent: Student = {
        ...student,
        grades: result.updatedGrades,
        psychomotor: editablePsychomotor,
      };

      onUpdateStudent(updatedStudent);

      toast({
        title: "Grades Updated",
        description: \`Successfully updated grades for \${student.name}. The AI has provided remarks.\`,
      });
    } catch (error) {
      console.error("AI grade management failed:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Could not update grades. Please try again.",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const calculateTotalScore = (grades: Grade[]) => {
      if (!grades || grades.length === 0) return 0;
      const total = grades.reduce((acc, grade) => {
        const gradeTotal = (grade.firstCA || 0) + (grade.secondCA || 0) + (grade.project || 0) + (grade.exam || 0);
        return acc + gradeTotal;
      }, 0);
      return total / grades.length;
  };

  const totalMarks = calculateTotalScore(editableGrades);
  const { presentCount, absentCount } = calculateAttendanceSummary(student.regNo, attendance);

  const getRemark = (avg: number) => {
    if (avg >= 75) return "Excellent";
    if (avg >= 60) return "Good";
    if (avg >= 50) return "Satisfactory";
    return "Needs Improvement";
  };

  return (
    <SheetContent className="w-full sm:max-w-4xl flex flex-col">
      <SheetHeader>
        <SheetTitle className="font-headline text-2xl">Student Result Sheet</SheetTitle>
      </SheetHeader>
      <ScrollArea className="flex-grow">
      <div className="mt-6 space-y-6 pr-6">
        <Card>
          <CardHeader>
            <div className="flex items-center gap-4">
              <Avatar className="h-20 w-20">
                <AvatarImage src={student.avatar} alt={student.name} data-ai-hint="person" />
                <AvatarFallback>{student.name.charAt(0)}</AvatarFallback>
              </Avatar>
              <div>
                <CardTitle className="font-headline">{student.name}</CardTitle>
                <CardDescription>Reg No: {student.regNo}</CardDescription>
              </div>
            </div>
          </CardHeader>
        </Card>
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="font-headline">Academic Performance</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Subject</TableHead>
                      <TableHead className="text-center">1st C.A (20)</TableHead>
                      <TableHead className="text-center">2nd C.A (20)</TableHead>
                      <TableHead className="text-center">Project (10)</TableHead>
                      <TableHead className="text-center">Exam (50)</TableHead>
                      <TableHead className="text-right">Total (100)</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {editableGrades.map((grade) => {
                      const total = (grade.firstCA || 0) + (grade.secondCA || 0) + (grade.project || 0) + (grade.exam || 0);
                      
                      return (
                        <TableRow key={grade.subject}>
                          <TableCell className="font-medium">{grade.subject}</TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              value={grade.firstCA?.toFixed(1) ?? ''}
                              onChange={(e) => handleGradeChange(grade.subject, 'firstCA', e.target.value)}
                              className="w-20 text-center"
                              disabled={!canEdit || isProcessing}
                            />
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              value={grade.secondCA?.toFixed(1) ?? ''}
                              onChange={(e) => handleGradeChange(grade.subject, 'secondCA', e.target.value)}
                              className="w-20 text-center"
                              disabled={!canEdit || isProcessing}
                            />
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              value={grade.project ?? ''}
                              onChange={(e) => handleGradeChange(grade.subject, 'project', e.target.value)}
                              className="w-20 text-center"
                              disabled={!canEdit || isProcessing}
                            />
                          </TableCell>
                          <TableCell>
                            <Input
                              type="number"
                              value={grade.exam?.toFixed(1) ?? ''}
                              onChange={(e) => handleGradeChange(grade.subject, 'exam', e.target.value)}
                              className="w-20 text-center"
                              disabled={!canEdit || isProcessing}
                            />
                          </TableCell>
                          <TableCell className="text-right font-semibold">{total.toFixed(2)}</TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="font-headline">Summary</CardTitle>
              </CardHeader>
              <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                <div className="p-4 bg-muted/50 rounded-lg">
                  <p className="text-sm text-muted-foreground">Overall Average</p>
                  <p className="text-2xl font-bold">{totalMarks.toFixed(2)}%</p>
                </div>
                <div className="p-4 bg-muted/50 rounded-lg">
                  <p className="text-sm text-muted-foreground">Position</p>
                  <p className="text-2xl font-bold">N/A</p>
                </div>
                <div className="p-4 bg-muted/50 rounded-lg">
                  <p className="text-sm text-muted-foreground">Remark</p>
                  <p className="text-2xl font-bold">{getRemark(totalMarks)}</p>
                </div>
              </CardContent>
            </Card>
          </div>

          <div className="lg:col-span-1 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="font-headline">Attendance Summary</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between p-3 bg-green-100/50 dark:bg-green-900/20 rounded-md">
                    <div className='flex items-center gap-2'>
                        <UserCheck className="h-5 w-5 text-green-600 dark:text-green-400" />
                        <span className="font-medium text-green-800 dark:text-green-300">Days Present</span>
                    </div>
                    <span className="font-bold text-lg text-green-800 dark:text-green-300">{presentCount}</span>
                </div>
                 <div className="flex items-center justify-between p-3 bg-red-100/50 dark:bg-red-900/20 rounded-md">
                    <div className='flex items-center gap-2'>
                        <UserX className="h-5 w-5 text-red-600 dark:text-red-400" />
                        <span className="font-medium text-red-800 dark:text-red-300">Days Absent</span>
                    </div>
                    <span className="font-bold text-lg text-red-800 dark:text-red-300">{absentCount}</span>
                </div>
              </CardContent>
            </Card>
             <Card>
              <CardHeader>
                <CardTitle className="font-headline">Psychomotor & Affective Skills</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Skill</TableHead>
                      <TableHead className="text-right">Rating (1-5)</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {editablePsychomotor.map((p) => (
                      <TableRow key={p.skill}>
                        <TableCell className="font-medium">{p.skill}</TableCell>
                        <TableCell className="text-right">
                          {canEdit ? (
                             <Select
                                value={String(p.rating)}
                                onValueChange={(value) => handlePsychomotorChange(p.skill, value)}
                                disabled={isProcessing}
                              >
                                <SelectTrigger className="w-24 ml-auto">
                                  <SelectValue placeholder="Rate" />
                                </SelectTrigger>
                                <SelectContent>
                                  {[1, 2, 3, 4, 5].map(val => (
                                    <SelectItem key={val} value={String(val)}>{val}</SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                          ) : (
                            <PsychomotorRating rating={p.rating} />
                          )}
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
      </ScrollArea>

        <div className="space-y-2 mt-4 pt-4 border-t">
            {canEdit && (
            <Button className="w-full" onClick={handleSaveChanges} disabled={isProcessing}>
                {isProcessing ? <Loader2 className="animate-spin" /> : <Save className="mr-2 h-4 w-4" />}
                Save Changes
            </Button>
            )}
            <Button className="w-full" variant="outline" onClick={() => window.print()}><Printer className="mr-2 h-4 w-4" />Save Result as PDF</Button>
        </div>
    </SheetContent>
  );
};


export default function AcademicsPage() {
    const { user, schoolClasses, setSchoolClasses, staff, students, setStudents } = useUser();
    const { toast } = useToast();

    const mySchoolClasses = useMemo(() => {
        if (!user || !user.schoolId) return [];
        return schoolClasses.filter(c => c.schoolId === user.schoolId);
    }, [user, schoolClasses]);

    const handleUpdateStudent = useCallback((classId: string, updatedStudent: Student) => {
        const studentToUpdate = students.find(s => s.regNo === updatedStudent.regNo);
        if (studentToUpdate) {
            setStudents(students.map(s => s.regNo === updatedStudent.regNo ? updatedStudent : s));
        }

        const classToUpdate = schoolClasses.find(c => c.id === classId);
        if (classToUpdate) {
            const updatedClass = {
                ...classToUpdate,
                students: classToUpdate.students.map(s => s.regNo === updatedStudent.regNo ? updatedStudent : s)
            };
            setSchoolClasses(schoolClasses.map(c => c.id === classId ? updatedClass : c));
        }
    }, [students, schoolClasses, setStudents, setSchoolClasses]);

    const handleTeacherChange = useCallback((classId: string, teacherName: string) => {
        const classToUpdate = schoolClasses.find(c => c.id === classId);
        if (classToUpdate) {
            setSchoolClasses(schoolClasses.map(c => 
                c.id === classId ? { ...c, teacher: teacherName } : c
            ));
            toast({
                title: "Teacher Assigned",
                description: \`\${teacherName} is now the form teacher for class \${classId.toUpperCase()}.\`
            });
        }
    }, [schoolClasses, setSchoolClasses, toast]);

    const canViewReport = (student: Student) => {
        if (!user) return false;
        if (user.role === 'Admin' || user.role === 'Staff') return true;
        if (user.role === 'Student' && user.regNo && student.regNo === user.regNo) return true;
        return false;
    };

    if (!user) {
        return null;
    }
    
    const myTeachers = staff.filter(t => t.schoolId === user.schoolId);

    return (
        <div className="space-y-8">
            <div className="flex items-center justify-between">
              <div>
                <h1 className="text-3xl font-bold font-headline tracking-tight">Academics</h1>
                <p className="text-muted-foreground">
                    Manage classes, subjects, and student performance.
                </p>
              </div>
            </div>

            <Accordion type="single" collapsible className="w-full" defaultValue={mySchoolClasses[0]?.id}>
                {mySchoolClasses.map(schoolClass => (
                    <AccordionItem value={schoolClass.id} key={schoolClass.id}>
                        <AccordionTrigger className="font-headline text-xl">
                            Class: {schoolClass.name}
                        </AccordionTrigger>
                        <AccordionContent>
                             <Card>
                                <CardHeader>
                                    <div className="flex justify-between items-center">
                                        <div>
                                            <CardTitle>Class List</CardTitle>
                                            <CardDescription>
                                                Form Teacher: {schoolClass.teacher || 'Unassigned'}
                                            </CardDescription>
                                        </div>
                                        {user.role === 'Admin' && (
                                             <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button variant="outline" size="sm">
                                                        <Edit className="mr-2 h-3 w-3" />
                                                        Change Teacher
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    {myTeachers.map(teacher => (
                                                        <DropdownMenuItem 
                                                            key={teacher.email}
                                                            onSelect={() => handleTeacherChange(schoolClass.id, teacher.name)}
                                                            disabled={teacher.name === schoolClass.teacher}
                                                        >
                                                            {teacher.name}
                                                        </DropdownMenuItem>
                                                    ))}
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        )}
                                    </div>
                                </CardHeader>
                                <CardContent>
                                    <Table>
                                        <TableHeader>
                                            <TableRow>
                                                <TableHead>Student</TableHead>
                                                <TableHead>Reg. No</TableHead>
                                                <TableHead className="text-right">Actions</TableHead>
                                            </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                            {schoolClass.students && schoolClass.students.length > 0 ? (
                                              schoolClass.students.map(student => (
                                                  <TableRow key={student.regNo}>
                                                      <TableCell>
                                                          <div className="flex items-center gap-3">
                                                              <Avatar className="h-9 w-9">
                                                                  <AvatarImage src={student.avatar} alt={student.name} data-ai-hint="person" />
                                                                  <AvatarFallback>{student.name.charAt(0)}</AvatarFallback>
                                                              </Avatar>
                                                              <span className="font-medium">{student.name}</span>
                                                          </div>
                                                      </TableCell>
                                                      <TableCell>{student.regNo}</TableCell>
                                                      <TableCell className="text-right">
                                                          {canViewReport(student) ? (
                                                              <Sheet>
                                                                  <SheetTrigger asChild>
                                                                      <Button variant="outline" size="sm">
                                                                          <BookOpen className="mr-2 h-4 w-4" />
                                                                          View Report
                                                                      </Button>
                                                                  </SheetTrigger>
                                                                  <StudentResultSheet 
                                                                      student={student} 
                                                                      schoolClass={schoolClass} 
                                                                      onUpdateStudent={(s) => handleUpdateStudent(schoolClass.id, s)} 
                                                                  />
                                                              </Sheet>
                                                          ) : null}
                                                      </TableCell>
                                                  </TableRow>
                                              ))
                                            ) : (
                                              <TableRow>
                                                <TableCell colSpan={3} className="text-center text-muted-foreground">
                                                  No students in this class yet.
                                                </TableCell>
                                              </TableRow>
                                            )}
                                        </TableBody>
                                    </Table>
                                </CardContent>
                            </Card>
                        </AccordionContent>
                    </AccordionItem>
                ))}
            </Accordion>
        </div>
    );
}
`,
    "src/app/dashboard/announcements/page.tsx": `// src/app/dashboard/announcements/page.tsx
"use client";

import { useState, useMemo } from "react";
import { announcements as initialAnnouncements, Announcement } from "@/lib/data";
import AnnouncementCard from "@/components/dashboard/announcement-card";
import AnnouncementForm from "@/components/dashboard/announcement-form";
import { useUser } from "@/context/user-context";

export default function AnnouncementsPage() {
  const { user } = useUser();
  const [announcements, setAnnouncements] = useState<Announcement[]>(initialAnnouncements);

  const handleAddAnnouncement = (newAnnouncement: Omit<Announcement, 'id' | 'author' | 'date'>) => {
    if (!user) return;
    const announcementToAdd: Announcement = {
      id: \`announcement-\${announcements.length + 1}\`,
      author: user.name,
      date: new Date().toISOString().split("T")[0],
      ...newAnnouncement,
    };
    setAnnouncements([announcementToAdd, ...announcements]);
  };

  const canCreate = user?.role === "Admin" || user?.role === "Staff";

  const visibleAnnouncements = useMemo(() => {
    if (!user) return [];
    if (user.role === 'Admin' || user.role === 'Staff') {
      return announcements; // Admins and Staff see all announcements
    }
    // Students and Parents only see non-staff-only announcements
    return announcements.filter(ann => ann.category !== 'Staff Only');
  }, [user, announcements]);

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold font-headline tracking-tight">Announcements</h1>
          <p className="text-muted-foreground">
            Stay updated with the latest news from around the school.
          </p>
        </div>
        {canCreate && <AnnouncementForm onAddAnnouncement={handleAddAnnouncement} />}
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {visibleAnnouncements.map((announcement) => (
          <AnnouncementCard key={announcement.id} announcement={announcement} />
        ))}
      </div>
    </div>
  );
}
`,
    "src/app/dashboard/assignments/page.tsx": `// src/app/dashboard/assignments/page.tsx
"use client";

import { useState, useMemo } from 'react';
import { useUser } from '@/context/user-context';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { PlusCircle, Trash2, BookCheck } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Dialog, DialogTrigger, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter, DialogClose } from '@/components/ui/dialog';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { CalendarIcon, Loader2 } from 'lucide-react';
import { Calendar } from '@/components/ui/calendar';
import { format, isPast, differenceInDays, isToday } from 'date-fns';
import { cn } from '@/lib/utils';
import type { Assignment } from '@/lib/data';
import { Badge } from '@/components/ui/badge';
import MarkdownRenderer from '@/components/markdown-renderer';
import { db } from '@/lib/firebase';
import { collection, addDoc, doc, setDoc, deleteDoc } from 'firebase/firestore';

const assignmentSchema = z.object({
  title: z.string().min(5, 'Title must be at least 5 characters.'),
  description: z.string().min(10, 'Please provide a detailed description.'),
  subject: z.string().min(1, 'Please select a subject.'),
  classId: z.string().min(1, 'Please select a class.'),
  dueDate: z.date({ required_error: 'A due date is required.' }),
});

type AssignmentFormValues = z.infer<typeof assignmentSchema>;

const AssignmentForm = ({ onAddAssignment, isSubmitting }: { onAddAssignment: (data: AssignmentFormValues) => void, isSubmitting: boolean }) => {
  const { user, schoolClasses, subjects } = useUser();
  const [isOpen, setIsOpen] = useState(false);
  
  const form = useForm<AssignmentFormValues>({
    resolver: zodResolver(assignmentSchema),
    defaultValues: {
      title: '',
      description: '',
      subject: '',
      classId: '',
    },
  });
  
  const selectedClassId = form.watch('classId');

  const availableSubjects = useMemo(() => {
    if (!selectedClassId) return [];
    const selectedClass = schoolClasses.find(c => c.id === selectedClassId);
    if (!selectedClass || !selectedClass.offeredSubjects) return [];
    return subjects.filter(s => selectedClass.offeredSubjects?.includes(s.id));
  }, [selectedClassId, schoolClasses, subjects]);

  const onSubmit = (data: AssignmentFormValues) => {
    onAddAssignment(data);
    form.reset();
    setIsOpen(false);
  };
  
  const mySchoolClasses = schoolClasses.filter(c => c.schoolId === user?.schoolId);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button><PlusCircle className="mr-2"/> New Assignment</Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="font-headline">Create New Assignment</DialogTitle>
          <DialogDescription>Fill out the details below to post a new assignment for a class.</DialogDescription>
        </DialogHeader>
        <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4 p-1">
                 <FormField control={form.control} name="title" render={({ field }) => (
                    <FormItem><FormLabel>Title</FormLabel><FormControl><Input placeholder="e.g., Photosynthesis Lab Report" {...field} /></FormControl><FormMessage /></FormItem>
                )}/>
                <FormField control={form.control} name="description" render={({ field }) => (
                    <FormItem><FormLabel>Description</FormLabel><FormControl><Textarea placeholder="Provide detailed instructions for the assignment..." className="min-h-[150px]" {...field} /></FormControl><FormMessage /></FormItem>
                )}/>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                     <FormField control={form.control} name="classId" render={({ field }) => (
                        <FormItem><FormLabel>Class</FormLabel>
                            <Select onValueChange={(value) => {
                                field.onChange(value);
                                form.setValue('subject', ''); // Reset subject when class changes
                            }} value={field.value}>
                                <FormControl><SelectTrigger><SelectValue placeholder="Select Class" /></SelectTrigger></FormControl>
                                <SelectContent>{mySchoolClasses.map(s => <SelectItem key={s.id} value={s.id}>{s.name}</SelectItem>)}</SelectContent>
                            </Select><FormMessage />
                        </FormItem>
                    )}/>
                     <FormField control={form.control} name="subject" render={({ field }) => (
                        <FormItem><FormLabel>Subject</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value} disabled={!selectedClassId || availableSubjects.length === 0}>
                                <FormControl><SelectTrigger><SelectValue placeholder={!selectedClassId ? "Select a class first" : "Select Subject"} /></SelectTrigger></FormControl>
                                <SelectContent>{availableSubjects.map(s => <SelectItem key={s.id} value={s.name}>{s.name}</SelectItem>)}</SelectContent>
                            </Select><FormMessage />
                        </FormItem>
                    )}/>
                     <FormField control={form.control} name="dueDate" render={({ field }) => (
                        <FormItem className="flex flex-col pt-2"><FormLabel>Due Date</FormLabel>
                            <Popover>
                                <PopoverTrigger asChild>
                                    <FormControl>
                                    <Button variant={"outline"} className={cn("pl-3 text-left font-normal", !field.value && "text-muted-foreground")}>
                                        {field.value ? format(field.value, "PPP") : <span>Pick a date</span>}
                                        <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                                    </Button>
                                    </FormControl>
                                </PopoverTrigger>
                                <PopoverContent className="w-auto p-0" align="start">
                                    <Calendar mode="single" selected={field.value} onSelect={field.onChange} disabled={(date) => date < new Date()} initialFocus />
                                </PopoverContent>
                            </Popover><FormMessage />
                        </FormItem>
                    )}/>
                </div>
                <DialogFooter className="pt-4">
                    <DialogClose asChild><Button type="button" variant="ghost">Cancel</Button></DialogClose>
                    <Button type="submit" disabled={isSubmitting}>
                        {isSubmitting && <Loader2 className="mr-2 animate-spin" />}
                        Create Assignment
                    </Button>
                </DialogFooter>
            </form>
        </Form>
      </DialogContent>
    </Dialog>
  )
}

const DueDateBadge = ({ dueDate }: { dueDate: string }) => {
    const date = new Date(dueDate);
    const diff = differenceInDays(date, new Date());
    
    if (isPast(date) && !isToday(date)) {
        return <Badge variant="destructive">Overdue</Badge>;
    }
    if (isToday(date)) {
        return <Badge variant="destructive" className="bg-orange-500 text-white">Due Today</Badge>;
    }
    if (diff < 7) {
        return <Badge variant="secondary" className="bg-yellow-400 text-black">Due in {diff + 1} day(s)</Badge>;
    }
    return <Badge variant="secondary">Due {format(date, "MMM dd")}</Badge>
}

export default function AssignmentsPage() {
    const { user, assignments, setAssignments, schoolClasses } = useUser();
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);

    const canCreate = user?.role === 'Admin' || user?.role === 'Staff';
  
    const myAssignments = useMemo(() => {
        if (!user) return [];
        const userSchoolId = user.schoolId;
        const schoolAssignments = assignments.filter(a => a.schoolId === userSchoolId);
        if (user.role === 'Admin' || user.role === 'Staff') return schoolAssignments;
        
        if (user.role === 'Student' || user.role === 'Parent') {
             const studentClassId = user.classId;
             if (!studentClassId) return [];
             return schoolAssignments.filter(a => a.classId === studentClassId);
        }
        return [];
    }, [user, assignments]);

    const handleAddAssignment = async (data: AssignmentFormValues) => {
        if (!user || !user.schoolId) return;
        setIsSubmitting(true);
        try {
            const newAssignment: Omit<Assignment, 'id'> = {
                ...data,
                dueDate: data.dueDate.toISOString(),
                createdBy: user.name,
                schoolId: user.schoolId,
            };
            const docRef = await addDoc(collection(db, "assignments"), newAssignment);
            setAssignments(prev => [{id: docRef.id, ...newAssignment }, ...prev].sort((a,b) => new Date(b.dueDate).getTime() - new Date(a.dueDate).getTime()));
            toast({ title: "Assignment Posted", description: \`The assignment "\${data.title}" has been posted.\`});
        } catch(error) {
            console.error("Error adding assignment:", error);
            toast({ variant: 'destructive', title: 'Error', description: 'Could not post the assignment.' });
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleRemoveAssignment = async (id: string) => {
        setIsSubmitting(true);
        try {
            await deleteDoc(doc(db, "assignments", id));
            setAssignments(prev => prev.filter(a => a.id !== id));
            toast({ title: "Assignment Removed" });
        } catch(error) {
            console.error("Error removing assignment:", error);
            toast({ variant: 'destructive', title: 'Error', description: 'Could not remove the assignment.' });
        } finally {
            setIsSubmitting(false);
        }
    }

    return (
        <div className="space-y-8">
            <div className="flex items-center justify-between">
                <div>
                    <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2"><BookCheck /> Assignments</h1>
                    <p className="text-muted-foreground">
                        {canCreate ? "Manage and create assignments for your classes." : "View your assignments and due dates."}
                    </p>
                </div>
                {canCreate && <AssignmentForm onAddAssignment={handleAddAssignment} isSubmitting={isSubmitting} />}
            </div>
            
            <div className="space-y-6">
                {myAssignments.length > 0 ? (
                    myAssignments.map(assignment => (
                         <Card key={assignment.id}>
                            <CardHeader>
                                <div className="flex justify-between items-start gap-4">
                                    <div>
                                        <div className="flex items-center gap-2 mb-1">
                                            <Badge variant="outline">{schoolClasses.find(c => c.id === assignment.classId)?.name || 'Unknown Class'}</Badge>
                                            <Badge variant="outline">{assignment.subject}</Badge>
                                        </div>
                                        <CardTitle className="font-headline">{assignment.title}</CardTitle>
                                        <CardDescription>
                                            Posted by {assignment.createdBy}
                                        </CardDescription>
                                    </div>
                                    <div className="text-right flex-shrink-0">
                                        <DueDateBadge dueDate={assignment.dueDate} />
                                        <p className="text-xs text-muted-foreground mt-1">{new Date(assignment.dueDate).toLocaleDateString()}</p>
                                    </div>
                                </div>
                            </CardHeader>
                            <CardContent>
                                <MarkdownRenderer content={assignment.description} />
                                {canCreate && assignment.createdBy === user?.name && (
                                    <div className="mt-4 pt-4 border-t">
                                        <Button variant="destructive" size="sm" onClick={() => handleRemoveAssignment(assignment.id)} disabled={isSubmitting}>
                                            {isSubmitting ? <Loader2 className="mr-2 animate-spin"/> : <Trash2 className="mr-2"/>} Remove Assignment
                                        </Button>
                                    </div>
                                )}
                            </CardContent>
                        </Card>
                    ))
                ) : (
                    <Card>
                        <CardContent className="py-12 text-center text-muted-foreground">
                            <BookCheck className="mx-auto h-12 w-12 mb-4" />
                            <h3 className="font-semibold">No Assignments Here</h3>
                            <p>
                                {canCreate ? "You haven't created any assignments yet." : "You have no pending assignments. Great job!"}
                            </p>
                        </CardContent>
                    </Card>
                )}
            </div>
        </div>
    );
}
`,
    "src/app/dashboard/attendance/page.tsx": `// src/app/dashboard/attendance/page.tsx
'use client';

import { useState, useMemo, useRef, useEffect, useCallback } from 'react';
import { useUser, type TeacherAttendanceRecord, type TeacherAttendanceLog } from '@/context/user-context';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { type Student, type User } from '@/lib/data';
import { Button } from '@/components/ui/button';
import { Calendar } from '@/components/ui/calendar';
import { Checkbox } from '@/components/ui/checkbox';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';
import { QrCode, Save, Clock, LogOut, CheckCircle, AlertCircle, UserCheck, UserX, CalendarX2, Camera, Video, Loader2 } from 'lucide-react';
import Image from 'next/image';
import { useToast } from '@/hooks/use-toast';
import type { AttendanceRecord } from '@/context/user-context';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger, DialogClose } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { format } from 'date-fns';
import jsQR from 'jsqr';

const EarlyDepartureDialog = ({ onConfirm }: { onConfirm: (reason: string) => void }) => {
  const [reason, setReason] = useState('');
  
  return (
    <DialogContent>
      <DialogHeader>
        <DialogTitle>Request Early Departure</DialogTitle>
        <DialogDescription>
          Please provide a reason for leaving before the official closing time. This will be logged for administrative review.
        </DialogDescription>
      </DialogHeader>
      <div className="py-4">
        <Label htmlFor="reason">Reason for Departure</Label>
        <Textarea id="reason" value={reason} onChange={(e) => setReason(e.target.value)} placeholder="e.g., Personal emergency, doctor's appointment..." />
      </div>
      <DialogFooter>
        <DialogClose asChild><Button variant="ghost">Cancel</Button></DialogClose>
        <DialogClose asChild><Button onClick={() => onConfirm(reason)} disabled={!reason.trim()}>Submit Request</Button></DialogClose>
      </DialogFooter>
    </DialogContent>
  )
}

const QRCodeScannerDialog = ({ onScanSuccess, expectedQrData }: { onScanSuccess: () => void, expectedQrData: string }) => {
    const videoRef = useRef<HTMLVideoElement>(null);
    const canvasRef = useRef<HTMLCanvasElement>(null);
    const [hasCameraPermission, setHasCameraPermission] = useState<boolean | null>(null);
    const [isScanning, setIsScanning] = useState(false);
    const { toast } = useToast();
    const [scanResult, setScanResult] = useState('');

    const tick = useCallback(() => {
        if (videoRef.current && videoRef.current.readyState === videoRef.current.HAVE_ENOUGH_DATA && canvasRef.current) {
            setIsScanning(true);
            const video = videoRef.current;
            const canvas = canvasRef.current;
            const ctx = canvas.getContext('2d');

            if (ctx) {
                canvas.height = video.videoHeight;
                canvas.width = video.videoWidth;
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
                const code = jsQR(imageData.data, imageData.width, imageData.height, {
                    inversionAttempts: 'dontInvert',
                });

                if (code) {
                    setScanResult(code.data);
                    if (code.data === expectedQrData) {
                        onScanSuccess();
                    } else {
                        toast({
                            variant: 'destructive',
                            title: 'Invalid QR Code',
                            description: 'The scanned QR code is not valid for this school.'
                        });
                    }
                }
            }
        }
        requestAnimationFrame(tick);
    }, [expectedQrData, onScanSuccess, toast]);

    useEffect(() => {
        const getCameraPermission = async () => {
            if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
                setHasCameraPermission(false);
                return;
            }
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } });
                setHasCameraPermission(true);
                if (videoRef.current) {
                    videoRef.current.srcObject = stream;
                }
                requestAnimationFrame(tick);
            } catch (error) {
                console.error('Error accessing camera:', error);
                setHasCameraPermission(false);
                toast({
                    variant: 'destructive',
                    title: 'Camera Access Denied',
                    description: 'Please enable camera permissions in your browser settings to clock-in.',
                });
            }
        };

        getCameraPermission();
        
        return () => {
             if (videoRef.current && videoRef.current.srcObject) {
                const stream = videoRef.current.srcObject as MediaStream;
                stream.getTracks().forEach(track => track.stop());
            }
        }
    }, [toast, tick]);

    return (
        <DialogContent>
            <DialogHeader>
                <DialogTitle>Scan QR Code to Clock-In</DialogTitle>
                <DialogDescription>Point your camera at the QR code provided at the school entrance.</DialogDescription>
            </DialogHeader>
            <div className="relative bg-muted rounded-md flex items-center justify-center aspect-video">
                <video ref={videoRef} className="w-full h-full object-cover rounded-md" autoPlay muted playsInline />
                <canvas ref={canvasRef} className="hidden" />

                {isScanning && !scanResult && (
                    <div className="absolute inset-0 flex flex-col items-center justify-center text-center p-4 bg-background/50">
                        <Loader2 className="h-8 w-8 text-primary animate-spin" />
                        <p className="text-sm font-semibold mt-2">Scanning...</p>
                    </div>
                )}
                 {hasCameraPermission === false && (
                    <div className="absolute inset-0 flex flex-col items-center justify-center text-center p-4 bg-background/80">
                        <Video className="h-8 w-8 text-muted-foreground mb-2" />
                        <p className="text-sm font-semibold">Camera Not Available</p>
                        <p className="text-xs text-muted-foreground">Please allow camera access in your browser settings.</p>
                    </div>
                )}
            </div>
            <DialogFooter>
                 <DialogClose asChild><Button variant="outline">Cancel</Button></DialogClose>
            </DialogFooter>
        </DialogContent>
    );
};


export default function AttendancePage() {
  const { 
    user, schoolClasses, attendance, setAttendance, holidays, setHolidays, 
    staff, teacherAttendance, setTeacherAttendance, resumptionTime, closureTime 
  } = useUser();
  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());
  const { toast } = useToast();

  const todayKey = useMemo(() => selectedDate ? selectedDate.toISOString().split('T')[0] : '', [selectedDate]);
  
  const [draftAttendance, setDraftAttendance] = useState<AttendanceRecord>({});

  const qrCodeData = useMemo(() => {
    if (!user?.schoolId) return 'invalid-school';
    return \`ENCON-CLOCK-IN:\${user.schoolId}\`;
  }, [user?.schoolId]);
  
  const qrCodeUrl = \`https://api.qrserver.com/v1/create-qr-code/?size=200x200&data=\${encodeURIComponent(qrCodeData)}\`;
  const qrCodeDownloadUrl = \`https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=\${encodeURIComponent(qrCodeData)}\`;


  useEffect(() => {
    // When the date changes, load the existing attendance for that day into the draft state.
    setDraftAttendance(attendance[todayKey] || {});
  }, [todayKey, attendance]);

  const handleSaveQRCode = async () => {
    try {
      const response = await fetch(qrCodeDownloadUrl);
      if (!response.ok) throw new Error('Network response was not ok.');
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = \`staff-clock-in-qr-\${user?.schoolId}.png\`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
      toast({ title: 'QR Code Saved', description: 'The QR code has been downloaded successfully.' });
    } catch (error) {
      console.error('Error downloading QR code:', error);
      toast({
        variant: 'destructive',
        title: 'Download Failed',
        description: 'Could not save the QR code. Please try again or take a screenshot.',
      });
    }
  };

  const isHoliday = useMemo(() => {
    if (!selectedDate) return false;
    const day = selectedDate.getDay();
    const isWeekend = day === 0 || day === 6;
    const isMarkedHoliday = holidays.some(h => h.toDateString() === selectedDate.toDateString());
    return isWeekend || isMarkedHoliday;
  }, [selectedDate, holidays]);

  const handleToggleHoliday = () => {
    if (!selectedDate) return;
    setHolidays(prev => {
      const isAlreadyHoliday = prev.some(h => h.toDateString() === selectedDate.toDateString());
      if (isAlreadyHoliday) {
        return prev.filter(h => h.toDateString() !== selectedDate.toDateString());
      }
      return [...prev, selectedDate];
    });
  };

  const handleAttendanceChange = (studentRegNo: string, session: 'morning' | 'afternoon', status: boolean) => {
    setDraftAttendance(prev => {
      const studentAttendance = prev[studentRegNo] || { morning: 'absent', afternoon: 'absent' };
      return {
        ...prev,
        [studentRegNo]: {
          ...studentAttendance,
          [session]: status ? 'present' : 'absent',
        },
      };
    });
  };

  const handleSubmitAttendance = () => {
    setAttendance(prev => ({
      ...prev,
      [todayKey]: draftAttendance,
    }));
    toast({
      title: 'Attendance Submitted',
      description: \`Student attendance for \${selectedDate?.toLocaleDateString()} has been saved.\`,
    });
  };

  const handleClockAction = useCallback((action: 'clock-in' | 'clock-out' | 'early-departure', reason = '') => {
    if (!user || !user.email) return;

    const now = new Date();
    const isLate = now > new Date(now.toDateString() + ' ' + resumptionTime);
    const isEarly = now < new Date(now.toDateString() + ' ' + closureTime);

    let userRecordUpdate: Partial<TeacherAttendanceRecord> = {};
    let toastTitle = '';
    let toastDescription = '';

    if (action === 'clock-in') {
        userRecordUpdate = { checkIn: now, status: isLate ? 'Late' : 'On Time' };
        toastTitle = 'Clocked In';
        toastDescription = \`You have been clocked in at \${now.toLocaleTimeString()}.\`;
    } else if (action === 'clock-out') {
        if(isEarly) {
            toast({ variant: 'destructive', title: 'Cannot Clock Out', description: \`Closing time is \${closureTime}. Please use the early departure option if needed.\`});
            return;
        }
        userRecordUpdate = { checkOut: now };
        toastTitle = 'Clocked Out';
        toastDescription = \`You have been clocked out at \${now.toLocaleTimeString()}.\`;
    } else if (action === 'early-departure') {
        userRecordUpdate = { checkOut: now, status: 'Early Departure', reason: reason };
        toastTitle = 'Early Departure Logged';
        toastDescription = 'Your departure has been recorded.';
    }

    setTeacherAttendance(prev => {
      const newLog = { ...prev };
      const dayLog = newLog[todayKey] ? { ...newLog[todayKey] } : {};
      const currentUserRecord = dayLog[user.email!] || { status: 'Absent', reason: '' };
      
      dayLog[user.email!] = { ...currentUserRecord, ...userRecordUpdate };
      newLog[todayKey] = dayLog;
      return newLog;
    });

    if (toastTitle) {
      toast({ title: toastTitle, description: toastDescription });
    }
  }, [user, setTeacherAttendance, todayKey, resumptionTime, closureTime, toast]);
  
  if (!user) return null;
  const isAdmin = user.role === 'Admin';
  const isChiefAdmin = isAdmin && user.isChiefAdmin;
  const isStaffMember = user.role === 'Staff';

  const staffClass = useMemo(() => {
    if (!isStaffMember) return undefined;
    return schoolClasses.find(c => c.teacher === user.name);
  }, [isStaffMember, schoolClasses, user.name]);

  const teacherLogForToday = teacherAttendance[todayKey]?.[user.email!] || null;


  const renderStudentRegister = (students: Student[]) => (
    <Card>
      <CardHeader>
        <CardTitle>Student Register</CardTitle>
        <CardDescription>Mark attendance for morning and afternoon sessions.</CardDescription>
      </CardHeader>
      <CardContent>
        {isHoliday ? (
            <Alert>
                <CalendarX2 className="h-4 w-4"/>
                <AlertTitle>Weekend or Public Holiday</AlertTitle>
                <AlertDescription>Student attendance cannot be marked today.</AlertDescription>
            </Alert>
        ) : (
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Student</TableHead>
              <TableHead className="text-center">Morning</TableHead>
              <TableHead className="text-center">Afternoon</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {students.map(student => {
              const studentAttendance = draftAttendance[student.regNo] || { morning: 'absent', afternoon: 'absent' };
              return (
                <TableRow key={student.regNo}>
                  <TableCell>
                    <div className="flex items-center gap-3">
                      <Avatar className="h-9 w-9">
                          <AvatarImage src={student.avatar} alt={student.name} data-ai-hint="person" />
                          <AvatarFallback>{student.name.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <span className="font-medium">{student.name}</span>
                    </div>
                  </TableCell>
                  <TableCell className="text-center">
                    <Checkbox 
                        checked={studentAttendance.morning === 'present'}
                        onCheckedChange={(checked) => handleAttendanceChange(student.regNo, 'morning', !!checked)}
                        disabled={isHoliday}
                    />
                  </TableCell>
                  <TableCell className="text-center">
                    <Checkbox
                        checked={studentAttendance.afternoon === 'present'}
                        onCheckedChange={(checked) => handleAttendanceChange(student.regNo, 'afternoon', !!checked)}
                        disabled={isHoliday}
                    />
                  </TableCell>
                </TableRow>
              );
            })}
          </TableBody>
        </Table>
        )}
      </CardContent>
      {!isHoliday && (
        <CardFooter>
            <Button onClick={handleSubmitAttendance} disabled={JSON.stringify(draftAttendance) === JSON.stringify(attendance[todayKey] || {})}>
                <Save className="mr-2 h-4 w-4" />
                Submit Attendance
            </Button>
        </CardFooter>
      )}
    </Card>
  );

  const renderStaffAttendance = () => (
    <>
      {isChiefAdmin && (
        <Card>
            <div className="p-6">
                <div className="space-y-2 text-center">
                    <QrCode className="mx-auto h-12 w-12" />
                    <h3 className="font-headline text-lg font-semibold">Staff Check-in QR Code</h3>
                    <p className="text-muted-foreground text-sm">Post this QR code at the school entrance for staff to scan upon arrival.</p>
                </div>
                <div className="flex items-center justify-center p-4">
                   <Image
                        src={qrCodeUrl}
                        alt="Attendance QR Code"
                        width={200}
                        height={200}
                        data-ai-hint="qr code"
                   />
                </div>
            </div>
            <CardFooter>
                <Button variant="outline" onClick={handleSaveQRCode}>
                    <Save className="mr-2 h-4 w-4" />
                    Save QR Code
                </Button>
            </CardFooter>
        </Card>
      )}

      {isStaffMember && (
        <Card>
          <CardHeader>
            <CardTitle>Your Attendance Today</CardTitle>
            <CardDescription>
              {\`Scan the QR code to clock-in. Resumption time: \${resumptionTime}. Closure time: \${closureTime}.\`}
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <Dialog>
                <DialogTrigger asChild>
                    <Button disabled={!!teacherLogForToday?.checkIn || isHoliday} className="w-full">
                        <UserCheck className="mr-2" /> {teacherLogForToday?.checkIn ? \`Clocked In at \${new Date(teacherLogForToday.checkIn).toLocaleTimeString()}\` : 'Scan to Clock-In'}
                    </Button>
                </DialogTrigger>
                <QRCodeScannerDialog onScanSuccess={() => handleClockAction('clock-in')} expectedQrData={qrCodeData} />
            </Dialog>

            <div className="flex gap-2">
              <Dialog>
                <DialogTrigger asChild>
                    <Button variant="outline" disabled={!teacherLogForToday?.checkIn || !!teacherLogForToday?.checkOut || isHoliday} className="w-full">
                      <LogOut className="mr-2" /> Request Early Departure
                    </Button>
                </DialogTrigger>
                <EarlyDepartureDialog onConfirm={(reason) => handleClockAction('early-departure', reason)} />
              </Dialog>
              <Button onClick={() => handleClockAction('clock-out')} disabled={!teacherLogForToday?.checkIn || !!teacherLogForToday?.checkOut || isHoliday} className="w-full">
                <Clock className="mr-2" /> {teacherLogForToday?.checkOut ? \`Clocked Out at \${new Date(teacherLogForToday.checkOut).toLocaleTimeString()}\` : 'Clock-Out'}
              </Button>
            </div>
             {isHoliday && <Alert><CalendarX2 className="h-4 w-4"/><AlertTitle>Today is a Weekend/Holiday</AlertTitle><AlertDescription>Attendance is not required today.</AlertDescription></Alert>}
          </CardContent>
        </Card>
      )}

      <Card className="mt-8">
          <CardHeader>
            <CardTitle>Staff Attendance Log for {selectedDate?.toLocaleDateString()}</CardTitle>
            <CardDescription>Overview of staff attendance for the selected date.</CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Staff</TableHead>
                  <TableHead>Check-in</TableHead>
                  <TableHead>Check-out</TableHead>
                  <TableHead>Status</TableHead>
                  {isAdmin && <TableHead>Reason</TableHead>}
                </TableRow>
              </TableHeader>
              <TableBody>
                {staff.filter(t => t.schoolId === user?.schoolId).map(staffMember => {
                  const log = teacherAttendance[todayKey]?.[staffMember.email!];
                  return (
                    <TableRow key={staffMember.email}>
                      <TableCell>
                         <div className="flex items-center gap-3">
                          <Avatar className="h-9 w-9">
                              <AvatarImage src={staffMember.avatar} alt={staffMember.name} data-ai-hint="person" />
                              <AvatarFallback>{staffMember.name.charAt(0)}</AvatarFallback>
                          </Avatar>
                          <span className="font-medium">{staffMember.name}</span>
                        </div>
                      </TableCell>
                      <TableCell>{log?.checkIn ? new Date(log.checkIn).toLocaleTimeString() : '--:--'}</TableCell>
                      <TableCell>{log?.checkOut ? new Date(log.checkOut).toLocaleTimeString() : '--:--'}</TableCell>
                      <TableCell>
                        {isHoliday ? (
                             <Badge variant="secondary">Holiday</Badge>
                        ) : log?.status ? (
                          <Badge variant={log.status === 'Late' || log.status === 'Early Departure' ? 'destructive' : 'default'}
                            className="bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300 data-[variant=destructive]:bg-red-100 data-[variant=destructive]:text-red-800 dark:data-[variant=destructive]:bg-red-900/20 dark:data-[variant=destructive]:text-red-300"
                          >
                           {log.status === 'On Time' && <CheckCircle className="mr-1 h-3 w-3" />}
                           {log.status !== 'On Time' && log.status !== 'Absent' && <AlertCircle className="mr-1 h-3 w-3" />}
                           {log.status}
                          </Badge>
                        ) : 'Absent'}
                      </TableCell>
                       {isAdmin && <TableCell className="text-xs text-muted-foreground">{log?.reason || 'N/A'}</TableCell>}
                    </TableRow>
                  )
                })}
              </TableBody>
            </Table>
          </CardContent>
      </Card>
    </>
  );

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight">Attendance</h1>
        <p className="text-muted-foreground">Manage daily attendance for staff and students.</p>
      </div>

      <div className="grid grid-cols-1 gap-8 md:grid-cols-3">
        <div className="md:col-span-1 space-y-6">
            <Card>
                <CardHeader>
                    <CardTitle>Select Date</CardTitle>
                </CardHeader>
                <CardContent>
                    <Calendar
                        mode="single"
                        selected={selectedDate}
                        onSelect={setSelectedDate}
                        disabled={(date) => date > new Date()}
                        modifiers={{ 
                            holidays: holidays,
                            weekend: { daysOfWeek: [0, 6] }
                        }}
                        modifiersClassNames={{ 
                            holidays: 'bg-destructive/20 text-destructive-foreground',
                            weekend: 'text-muted-foreground/50'
                        }}
                        className="p-0"
                    />
                </CardContent>
            </Card>
            {isAdmin && (
                <Card>
                    <CardHeader>
                        <CardTitle>Holiday Management</CardTitle>
                        <CardDescription>Mark selected non-weekend dates as public holidays.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Button 
                            onClick={handleToggleHoliday} 
                            className="w-full" 
                            disabled={!selectedDate || selectedDate.getDay() === 0 || selectedDate.getDay() === 6}
                        >
                            {holidays.some(h => h.toDateString() === selectedDate?.toDateString()) ? 'Unmark as Holiday' : 'Mark as Holiday'}
                        </Button>
                    </CardContent>
                </Card>
            )}
        </div>
        <div className="md:col-span-2">
            <Tabs defaultValue={staffClass ? 'student' : 'teacher'}>
                <TabsList>
                    {staffClass && <TabsTrigger value="student">Student Attendance</TabsTrigger>}
                    <TabsTrigger value="teacher">Staff Attendance</TabsTrigger>
                </TabsList>
                <TabsContent value="teacher" className="mt-4">
                    {renderStaffAttendance()}
                </TabsContent>
                 {staffClass && (
                    <TabsContent value="student" className="mt-4">
                        {renderStudentRegister(staffClass.students)}
                    </TabsContent>
                 )}
                  {!staffClass && isStaffMember && (
                     <TabsContent value="teacher" className="mt-4">
                         <Alert>
                            <AlertTitle>No Class Assigned</AlertTitle>
                            <AlertDescription>
                                You are not assigned as a form teacher for any class. Student attendance taking is disabled.
                            </AlertDescription>
                        </Alert>
                    </TabsContent>
                 )}
            </Tabs>
        </div>
      </div>
    </div>
  );
}
`,
    "src/app/dashboard/calendar/page.tsx": `"use client";

import { useState } from "react";
import AddEventForm from "@/components/dashboard/add-event-form";
import CalendarView, { type CalendarEvent } from "@/components/dashboard/calendar-view";
import { useUser } from "@/context/user-context";

const initialEvents: CalendarEvent[] = [
  {
    date: new Date(),
    title: 'Mid-term presentations',
    description: 'Computer Science mid-term project presentations in Hall C.',
  },
  {
    date: new Date(new Date().setDate(new Date().getDate() + 5)),
    title: 'Guest Lecture: AI Ethics',
    description: 'Special guest lecture by Dr. Anya Sharma on the ethics of artificial intelligence. Main Auditorium, 2 PM.',
  }
];

export default function CalendarPage() {
  const [events, setEvents] = useState<CalendarEvent[]>(initialEvents);
  const { user } = useUser();

  const handleAddEvent = (newEvent: CalendarEvent) => {
    setEvents((prev) => [...prev, newEvent].sort((a,b) => a.date.getTime() - b.date.getTime()));
  };
  
  const canAddEvent = user?.role === 'Admin' || user?.role === 'Staff';

  return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold font-headline tracking-tight">Calendar</h1>
          <p className="text-muted-foreground">
            Important dates, deadlines, and events.
          </p>
        </div>
        {canAddEvent && <AddEventForm onAddEvent={handleAddEvent} />}
      </div>

      <CalendarView events={events} />
    </div>
  );
}
`,
    "src/app/dashboard/cbt/create-test/page.tsx": `// src/app/dashboard/cbt/create-test/page.tsx
'use client';
import { useState, useEffect, useMemo, useCallback, useRef } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { useUser } from '@/context/user-context';
import { useForm, useFieldArray, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { PlusCircle, Trash2, Save, ArrowLeft, UserX, Sparkles, Upload, Loader2 } from 'lucide-react';
import type { CbtTest, TestCategory, Student } from '@/lib/data';
import { useToast } from '@/hooks/use-toast';
import { Checkbox } from '@/components/ui/checkbox';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import { generateTestQuestions } from '@/ai/flows/generate-test-questions-flow';

const objectiveQuestionSchema = z.object({
  question: z.string().min(5, 'Question must be at least 5 characters.'),
  options: z.array(z.string().min(1, 'Option cannot be empty.')).min(2, 'At least 2 options required.').max(5, 'Maximum of 5 options.'),
  correctAnswer: z.string().min(1, 'You must select a correct answer.'),
  marks: z.coerce.number().min(1, 'Marks must be at least 1.'),
});

const essayQuestionSchema = z.object({
  question: z.string().min(10, 'Question must be at least 10 characters.'),
  markingRubric: z.string().min(10, 'Rubric must be at least 10 characters.'),
  marks: z.coerce.number().min(1, 'Marks must be at least 1.'),
});

const testSchema = z.object({
  title: z.string().min(5, 'Title must be at least 5 characters.'),
  classId: z.string().min(1, 'Please select a class.'),
  subject: z.string().min(1, 'Please select a subject.'),
  category: z.enum(['1st CA', '2nd CA', 'Exam']),
  duration: z.coerce.number().min(1, "Duration must be at least 1 minute."),
  objectiveQuestions: z.array(objectiveQuestionSchema),
  essayQuestions: z.array(essayQuestionSchema),
  restrictedStudents: z.array(z.string()).optional(),
});

type TestFormValues = z.infer<typeof testSchema>;

const DRAFT_STORAGE_KEY = 'cbt-test-draft';

const AiQuestionGenerator = ({ onQuestionsExtracted, mainForm }: { onQuestionsExtracted: (data: any) => void, mainForm: any }) => {
    const { toast } = useToast();
    const [isGenerating, setIsGenerating] = useState(false);
    const [topic, setTopic] = useState('');
    const [numObjective, setNumObjective] = useState(5);
    const [numEssay, setNumEssay] = useState(1);
    const { schoolClasses } = useUser();

    // A dummy form provider to satisfy the context for FormItem, FormLabel, etc.
    const dummyForm = useForm();

    const handleGenerate = async () => {
        const { subject, classId } = mainForm.getValues();
        if (!subject || !classId) {
            toast({ variant: 'destructive', title: 'Missing Info', description: 'Please select a Class and Subject in the main form first.' });
            return;
        }
        if (!topic.trim()) {
            toast({ variant: 'destructive', title: 'Topic Required', description: 'Please enter a topic to generate questions from.' });
            return;
        }

        setIsGenerating(true);
        try {
            const className = schoolClasses.find(c => c.id === classId)?.name || '';
            const result = await generateTestQuestions({
                topic,
                subject,
                className,
                numObjective,
                numEssay,
            });
            onQuestionsExtracted(result);
            toast({ title: 'Generation Successful', description: 'Questions have been generated and added to the form. Please review and save.' });
        } catch (error) {
            console.error("AI question generation failed:", error);
            toast({ variant: 'destructive', title: 'Generation Failed', description: 'Could not generate questions. Please try again.' });
        } finally {
            setIsGenerating(false);
        }
    };
    
    return (
        <Card>
            <CardHeader>
                <CardTitle className="font-headline flex items-center gap-2"><Sparkles className="h-5 w-5 text-accent"/> AI Question Generator</CardTitle>
                <CardDescription>Generate test questions automatically based on a topic. Select Class and Subject below first.</CardDescription>
            </CardHeader>
            <CardContent>
                <Form {...dummyForm}>
                    <div className="space-y-4">
                        <FormItem>
                            <FormLabel>Topic</FormLabel>
                            <FormControl>
                                <Input placeholder="e.g., The Circulatory System" value={topic} onChange={(e) => setTopic(e.target.value)} disabled={isGenerating}/>
                            </FormControl>
                        </FormItem>
                         <div className="grid grid-cols-2 gap-4">
                            <FormItem>
                                <FormLabel>No. of Objectives</FormLabel>
                                <FormControl>
                                   <Input type="number" value={numObjective} onChange={(e) => setNumObjective(Number(e.target.value))} min="1" max="20" disabled={isGenerating}/>
                                </FormControl>
                            </FormItem>
                            <FormItem>
                                <FormLabel>No. of Essays</FormLabel>
                                <FormControl>
                                    <Input type="number" value={numEssay} onChange={(e) => setNumEssay(Number(e.target.value))} min="0" max="5" disabled={isGenerating}/>
                                </FormControl>
                            </FormItem>
                         </div>
                        <Button onClick={handleGenerate} className="w-full" disabled={isGenerating}>
                            {isGenerating ? <Loader2 className="animate-spin" /> : <Sparkles className="mr-2" />}
                            Generate Questions
                        </Button>
                    </div>
                </Form>
            </CardContent>
        </Card>
    );
};


export default function CreateTestPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { user, cbtTests, setCbtTests, schoolClasses, subjects, students } = useUser();
  const { toast } = useToast();
  const editTestId = searchParams.get('edit');
  const [existingTest, setExistingTest] = useState<CbtTest | null>(null);

  const form = useForm<TestFormValues>({
    resolver: zodResolver(testSchema),
    defaultValues: {
      title: '',
      classId: '',
      subject: '',
      category: '1st CA',
      duration: 30,
      objectiveQuestions: [],
      essayQuestions: [],
      restrictedStudents: [],
    },
  });

  // Load draft from localStorage on component mount
  useEffect(() => {
    if (editTestId) return; // Don't load draft if editing
    const savedDraft = localStorage.getItem(DRAFT_STORAGE_KEY);
    if (savedDraft) {
      try {
        const draftData = JSON.parse(savedDraft);
        form.reset(draftData);
      } catch (e) {
        console.error("Failed to parse draft data", e);
        localStorage.removeItem(DRAFT_STORAGE_KEY);
      }
    }
  }, [form, editTestId]);

  // Save form data to localStorage on change
  useEffect(() => {
    if (editTestId) return; // Don't save draft if editing
    const subscription = form.watch((value) => {
      localStorage.setItem(DRAFT_STORAGE_KEY, JSON.stringify(value));
    });
    return () => subscription.unsubscribe();
  }, [form.watch, form, editTestId]);
  
  useEffect(() => {
    if (!user) return;
    const canAccess = user.role === 'Admin' || user.role === 'Staff';
    if (!canAccess) {
      router.push('/dashboard/cbt');
    }
  }, [user, router]);


  const selectedClassId = form.watch('classId');

  const availableSubjectsForClass = useMemo(() => {
    if (!selectedClassId) return [];
    const selectedClass = schoolClasses.find(c => c.id === selectedClassId);
    if (!selectedClass || !selectedClass.offeredSubjects) return [];
    return subjects.filter(s => selectedClass.offeredSubjects?.includes(s.id));
  }, [selectedClassId, schoolClasses, subjects]);
  
  useEffect(() => {
    if (editTestId) {
      const testToEdit = cbtTests.find(t => t.id === editTestId);
      if (testToEdit) {
        setExistingTest(testToEdit);
        form.reset({
          title: testToEdit.title,
          classId: testToEdit.classId || '',
          subject: testToEdit.subject,
          category: testToEdit.category,
          duration: testToEdit.duration || 30,
          objectiveQuestions: testToEdit.objectiveQuestions.map(q => ({...q, options: Array.isArray(q.options) ? q.options : []})),
          essayQuestions: testToEdit.essayQuestions.map(q => ({...q})),
          restrictedStudents: testToEdit.restrictedStudents || [],
        });
      }
    }
  }, [editTestId, cbtTests, form]);


  const { fields: objFields, append: appendObj, remove: removeObj } = useFieldArray({
    control: form.control,
    name: 'objectiveQuestions',
  });

  const { fields: essayFields, append: appendEssay, remove: removeEssay } = useFieldArray({
    control: form.control,
    name: 'essayQuestions',
  });

  const handleQuestionsExtracted = (data: { objectiveQuestions?: any[], essayQuestions?: any[] }) => {
    if (data.objectiveQuestions) {
        data.objectiveQuestions.forEach(q => appendObj({
            question: q.question || '',
            options: Array.isArray(q.options) && q.options.length > 0 ? q.options : ['', '', '', ''],
            correctAnswer: q.correctAnswer || '',
            marks: 1,
        }));
    }
    if (data.essayQuestions) {
        data.essayQuestions.forEach(q => appendEssay({
            question: q.question || '',
            markingRubric: q.markingRubric || '',
            marks: 10,
        }));
    }
  };


  if (!user || (user.role !== 'Admin' && user.role !== 'Staff')) {
    return null;
  }
  
  const mySchoolClasses = schoolClasses.filter(c => c.schoolId === user?.schoolId);

  const onSubmit = (data: TestFormValues) => {
    if (existingTest) {
      const updatedTest: CbtTest = {
        ...existingTest,
        ...data,
        objectiveQuestions: data.objectiveQuestions.map((q, i) => ({ ...q, id: existingTest.objectiveQuestions[i]?.id || \`q\${i}\` })),
        essayQuestions: data.essayQuestions.map((q, i) => ({...q, id: existingTest.essayQuestions[i]?.id || \`e\${i}\`})),
        restrictedStudents: data.restrictedStudents || [],
      };
      setCbtTests(prev => prev.map(t => t.id === existingTest.id ? updatedTest : t));
      toast({ title: 'Test Updated', description: 'The test has been successfully updated.' });
    } else {
        const newTest: CbtTest = {
            id: \`test-\${Date.now()}\`,
            status: 'Draft',
            dateCreated: new Date().toISOString(),
            createdBy: user.name,
            resultsPublished: false,
            schoolId: user.schoolId!,
            ...data,
            objectiveQuestions: data.objectiveQuestions.map((q, i) => ({ ...q, id: \`q\${i}\` })),
            essayQuestions: data.essayQuestions.map((q, i) => ({...q, id: \`e\${i}\`})),
            restrictedStudents: data.restrictedStudents || [],
        };
        setCbtTests(prev => [newTest, ...prev]);
        toast({ title: 'Test Created', description: 'The new test has been saved as a draft. An admin needs to open it for students.' });
        localStorage.removeItem(DRAFT_STORAGE_KEY);
    }
    router.push('/dashboard/cbt');
  };

  return (
    <div className="space-y-8">
      <Button variant="outline" onClick={() => router.back()}><ArrowLeft className="mr-2"/> Back to CBT Platform</Button>
      
      <AiQuestionGenerator onQuestionsExtracted={handleQuestionsExtracted} mainForm={form} />

      <Card>
        <CardHeader>
          <CardTitle className="font-headline text-2xl">{existingTest ? 'Edit Test' : 'Create New Test'}</CardTitle>
          <CardDescription>Design a new computer-based test for your students.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
              {/* Test Details */}
              <div className="space-y-4 p-4 border rounded-lg">
                <h3 className="font-semibold font-headline">Test Details</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <FormField control={form.control} name="title" render={({ field }) => (
                    <FormItem className="lg:col-span-2">
                      <FormLabel>Test Title</FormLabel>
                      <FormControl><Input placeholder="e.g., Biology Mid-Term Assessment" {...field} /></FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                   <FormField control={form.control} name="classId" render={({ field }) => (
                    <FormItem>
                        <FormLabel>Class</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl><SelectTrigger><SelectValue placeholder="Select Class" /></SelectTrigger></FormControl>
                            <SelectContent>{mySchoolClasses.map(s => <SelectItem key={s.id} value={s.id}>{s.name}</SelectItem>)}</SelectContent>
                        </Select>
                        <FormMessage />
                    </FormItem>
                   )} />
                   <FormField control={form.control} name="subject" render={({ field }) => (
                    <FormItem>
                      <FormLabel>Subject</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value} disabled={!selectedClassId || availableSubjectsForClass.length === 0}>
                        <FormControl><SelectTrigger><SelectValue placeholder={!selectedClassId ? "Select a class first" : "Select Subject"} /></SelectTrigger></FormControl>
                        <SelectContent>{availableSubjectsForClass.map(s => <SelectItem key={s.id} value={s.name}>{s.name}</SelectItem>)}</SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField control={form.control} name="category" render={({ field }) => (
                    <FormItem>
                      <FormLabel>Category</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl><SelectTrigger><SelectValue placeholder="Select Category" /></SelectTrigger></FormControl>
                        <SelectContent>
                            <SelectItem value="1st CA">1st C.A.</SelectItem>
                            <SelectItem value="2nd CA">2nd C.A.</SelectItem>
                            <SelectItem value="Exam">Exam</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField control={form.control} name="duration" render={({ field }) => (
                    <FormItem>
                        <FormLabel>Duration (minutes)</FormLabel>
                        <FormControl><Input type="number" placeholder="e.g., 45" {...field} /></FormControl>
                        <FormMessage />
                    </FormItem>
                  )} />
                </div>
              </div>

              {/* Objective Questions */}
              <div className="space-y-4 p-4 border rounded-lg">
                <div className="flex justify-between items-center">
                    <h3 className="font-semibold font-headline">Objective Questions</h3>
                    <Button type="button" variant="outline" size="sm" onClick={() => appendObj({ question: '', options: ['', '', '', ''], correctAnswer: '', marks: 1 })}><PlusCircle className="mr-2"/>Add Objective</Button>
                </div>
                {objFields.map((field, index) => (
                  <div key={field.id} className="space-y-2 p-3 border rounded-md relative bg-muted/20">
                     <Button type="button" variant="ghost" size="icon" className="absolute top-1 right-1 h-7 w-7 text-destructive" onClick={() => removeObj(index)}><Trash2 size={16}/></Button>
                     <FormField control={form.control} name={\`objectiveQuestions.\${index}.question\`} render={({ field }) => (
                        <FormItem><FormLabel>Question {index + 1}</FormLabel><FormControl><Input placeholder="Enter the question" {...field} /></FormControl><FormMessage /></FormItem>
                     )} />
                     <div className="grid grid-cols-2 gap-2">
                        {(form.getValues(\`objectiveQuestions.\${index}.options\`) || []).map((_, optIndex) => (
                             <FormField key={optIndex} control={form.control} name={\`objectiveQuestions.\${index}.options.\${optIndex}\`} render={({ field }) => (
                                <FormItem><FormControl><Input placeholder={\`Option \${optIndex + 1}\`} {...field} /></FormControl><FormMessage /></FormItem>
                             )} />
                        ))}
                     </div>
                     <div className="grid grid-cols-2 gap-4">
                        <Controller control={form.control} name={\`objectiveQuestions.\${index}.correctAnswer\`} render={({ field }) => (
                            <FormItem>
                                <FormLabel>Correct Answer</FormLabel>
                                <Select onValueChange={field.onChange} value={field.value}>
                                    <FormControl><SelectTrigger><SelectValue placeholder="Select correct option" /></SelectTrigger></FormControl>
                                    <SelectContent>
                                        {form.getValues(\`objectiveQuestions.\${index}.options\`).map((opt, optIndex) => (
                                            opt && <SelectItem key={optIndex} value={opt}>Option {optIndex + 1}: {opt}</SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                                <FormMessage />
                            </FormItem>
                        )} />
                        <FormField control={form.control} name={\`objectiveQuestions.\${index}.marks\`} render={({ field }) => (
                           <FormItem>
                               <FormLabel>Marks</FormLabel>
                               <FormControl><Input type="number" placeholder="Marks" {...field} /></FormControl>
                               <FormMessage />
                           </FormItem>
                        )} />
                    </div>
                  </div>
                ))}
              </div>

              {/* Essay Questions */}
              <div className="space-y-4 p-4 border rounded-lg">
                 <div className="flex justify-between items-center">
                    <h3 className="font-semibold font-headline">Essay Questions</h3>
                    <Button type="button" variant="outline" size="sm" onClick={() => appendEssay({ question: '', markingRubric: '', marks: 10 })}><PlusCircle className="mr-2"/>Add Essay</Button>
                </div>
                {essayFields.map((field, index) => (
                    <div key={field.id} className="space-y-2 p-3 border rounded-md relative bg-muted/20">
                        <Button type="button" variant="ghost" size="icon" className="absolute top-1 right-1 h-7 w-7 text-destructive" onClick={() => removeEssay(index)}><Trash2 size={16}/></Button>
                        <FormField control={form.control} name={\`essayQuestions.\${index}.question\`} render={({ field }) => (
                            <FormItem><FormLabel>Essay Question {index + 1}</FormLabel><FormControl><Textarea placeholder="Enter the essay question" {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                        <FormField control={form.control} name={\`essayQuestions.\${index}.markingRubric\`} render={({ field }) => (
                            <FormItem><FormLabel>Marking Rubric / Model Answer</FormLabel><FormControl><Textarea placeholder="Provide a detailed marking guide for the AI." {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                        <FormField control={form.control} name={\`essayQuestions.\${index}.marks\`} render={({ field }) => (
                           <FormItem>
                               <FormLabel>Marks</FormLabel>
                               <FormControl><Input type="number" placeholder="Marks" {...field} /></FormControl>
                               <FormMessage />
                           </FormItem>
                        )} />
                    </div>
                ))}
              </div>

              {/* Student Access Control */}
              {user.role === 'Admin' && existingTest && (
                <div className="space-y-4 p-4 border rounded-lg">
                    <div className="flex justify-between items-center">
                        <h3 className="font-semibold font-headline flex items-center gap-2"><UserX /> Student Access Control</h3>
                    </div>
                    <p className="text-sm text-muted-foreground">Select students to restrict them from taking this test. This can be due to unpaid fees, suspension, etc.</p>
                     <ScrollArea className="h-72 w-full rounded-md border">
                        <div className="p-4">
                            <FormField
                                control={form.control}
                                name="restrictedStudents"
                                render={() => (
                                    <FormItem>
                                        {students.map((student) => (
                                        <FormField
                                            key={student.regNo}
                                            control={form.control}
                                            name="restrictedStudents"
                                            render={({ field }) => {
                                            return (
                                                <FormItem
                                                key={student.regNo}
                                                className="flex flex-row items-start space-x-3 space-y-0 py-2"
                                                >
                                                <FormControl>
                                                    <Checkbox
                                                    checked={field.value?.includes(student.regNo)}
                                                    onCheckedChange={(checked) => {
                                                        return checked
                                                        ? field.onChange([...(field.value || []), student.regNo])
                                                        : field.onChange(
                                                            field.value?.filter(
                                                                (value) => value !== student.regNo
                                                            )
                                                            )
                                                    }}
                                                    />
                                                </FormControl>
                                                <FormLabel className="font-normal w-full">
                                                    <div className="flex items-center justify-between">
                                                        <div className="flex items-center gap-2">
                                                            <Avatar className="h-8 w-8">
                                                                <AvatarImage src={student.avatar} alt={student.name} data-ai-hint="person" />
                                                                <AvatarFallback>{student.name.charAt(0)}</AvatarFallback>
                                                            </Avatar>
                                                            <div>
                                                                <p className="font-medium">{student.name}</p>
                                                                <p className="text-xs text-muted-foreground">{student.regNo}</p>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </FormLabel>
                                                </FormItem>
                                            )
                                            }}
                                        />
                                        ))}
                                    </FormItem>
                                )}
                            />
                        </div>
                     </ScrollArea>
                </div>
              )}

              <Button type="submit" size="lg" className="w-full" disabled={form.formState.isSubmitting}>
                <Save className="mr-2"/> {existingTest ? 'Save Changes' : 'Create Test'}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
`,
    "src/app/dashboard/cbt/page.tsx": `// src/app/dashboard/cbt/page.tsx
'use client';
import React, { useCallback, useMemo } from 'react';
import Link from 'next/link';
import { useUser } from '@/context/user-context';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { FileText, PlusCircle, PenSquare, ChevronRight, UserX, CheckCircle, Send } from 'lucide-react';
import { type CbtTest, type TestStatus } from '@/lib/data';
import { Select, SelectTrigger, SelectValue, SelectContent, SelectItem } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';

const TestCard = ({ test, canManageTests, isStudent, onStatusChange, onPublishResults }: { test: CbtTest, canManageTests: boolean, isStudent: boolean, onStatusChange: (testId: string, newStatus: TestStatus) => void, onPublishResults: (testId: string, publish: boolean) => void }) => {
    const { user } = useUser();
    
    const isChiefAdmin = user?.isChiefAdmin;
    const canEditTest = user?.role === 'Admin' || (user?.role === 'Staff' && user.name === test.createdBy);

    return (
        <Card className="hover:shadow-md transition-shadow flex flex-col">
            <CardHeader>
                <div className="flex justify-between items-start">
                    <div>
                        <Badge variant="secondary" className="mb-2">{test.category}</Badge>
                        <CardTitle className="font-headline">{test.title}</CardTitle>
                        <CardDescription>{test.subject} - Created by {test.createdBy}</CardDescription>
                    </div>
                    {canManageTests && isChiefAdmin ? (
                       <Select value={test.status} onValueChange={(value) => onStatusChange(test.id, value as TestStatus)}>
                            <SelectTrigger className="w-[120px]">
                                <SelectValue placeholder="Status" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="Draft">Draft</SelectItem>
                                <SelectItem value="Open">Open</SelectItem>
                                <SelectItem value="Closed">Closed</SelectItem>
                            </SelectContent>
                        </Select>
                    ) : (
                        <Badge 
                            variant={test.status === 'Open' ? 'default' : test.status === 'Closed' ? 'destructive' : 'secondary'}
                            className="bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300 data-[variant=destructive]:bg-red-100 data-[variant=destructive]:text-red-800 dark:data-[variant=destructive]:bg-red-900/20 dark:data-[variant=destructive]:text-red-300 data-[variant=secondary]:bg-yellow-100 data-[variant=secondary]:text-yellow-800 dark:data-[variant=secondary]:bg-yellow-900/20 dark:data-[variant=secondary]:text-yellow-300"
                        >
                            {test.status}
                        </Badge>
                    )}
                </div>
            </CardHeader>
            <CardContent className="flex-grow space-y-4">
                <div className="text-sm text-muted-foreground space-y-1">
                    <p>Objectives: {test.objectiveQuestions.length}</p>
                    <p>Essays: {test.essayQuestions.length}</p>
                    {(canManageTests || canEditTest) && (
                        <p className="flex items-center gap-1"><UserX className="h-3 w-3 text-destructive" /> Restricted: {test.restrictedStudents?.length || 0}</p>
                    )}
                </div>
                {canManageTests && isChiefAdmin && (
                     <div className="flex items-center space-x-2 pt-4 border-t">
                        <Switch id={\`publish-\${test.id}\`} checked={test.resultsPublished} onCheckedChange={(checked) => onPublishResults(test.id, checked)} />
                        <Label htmlFor={\`publish-\${test.id}\`} className={test.resultsPublished ? 'text-primary' : ''}>
                            {test.resultsPublished ? 'Results Published' : 'Publish Results'}
                        </Label>
                    </div>
                )}
            </CardContent>
            <CardFooter className="flex gap-2">
                {isStudent && test.status === 'Open' && (
                     <Button asChild className="w-full">
                        <Link href={\`/dashboard/cbt/take-test/\${test.id}\`}>
                            {test.resultsPublished ? 'View Result' : 'Start Test'} <ChevronRight className="ml-2" />
                        </Link>
                    </Button>
                )}
                 {(canManageTests || canEditTest) && (
                     <Button variant="outline" asChild>
                        <Link href={\`/dashboard/cbt/create-test?edit=\${test.id}\`}>
                            <PenSquare className="mr-2 h-4 w-4" /> Edit Test
                        </Link>
                    </Button>
                )}
            </CardFooter>
        </Card>
    );
};

export default function CbtPage() {
    const { user, cbtTests, setCbtTests } = useUser();
    const { toast } = useToast();
    
    if (!user) return null;

    const canManageTests = user.role === 'Admin';
    const canCreateTests = user.role === 'Admin' || user.role === 'Staff';
    const isStudent = user.role === 'Student';
    
    const handleStatusChange = useCallback((testId: string, newStatus: TestStatus) => {
        setCbtTests(prev => prev.map(t => t.id === testId ? { ...t, status: newStatus } : t));
    }, [setCbtTests]);

    const handlePublishResults = useCallback((testId: string, publish: boolean) => {
        setCbtTests(prev => prev.map(t => t.id === testId ? { ...t, resultsPublished: publish } : t));
        toast({
            title: publish ? "Results Published" : "Results Hidden",
            description: \`Students can \${publish ? 'now' : 'no longer'} view their scores for this test.\`,
        });
    }, [setCbtTests, toast]);

    const testsToDisplay = useMemo(() => {
        if (isStudent) return cbtTests.filter(t => t.status === 'Open' && t.classId === user.classId);
        if (user.role === 'Staff') return cbtTests.filter(t => t.createdBy === user.name || user.isChiefAdmin);
        return cbtTests;
    }, [cbtTests, isStudent, user]);

    return (
    <div className="space-y-8">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold font-headline tracking-tight">CBT Platform</h1>
          <p className="text-muted-foreground">
            {canCreateTests ? 'Create, manage, and grade computer-based tests.' : 'Take tests and view your results.'}
          </p>
        </div>
        {canCreateTests && (
          <Button asChild>
            <Link href="/dashboard/cbt/create-test">
                <PlusCircle className="mr-2 h-4 w-4" /> Create New Test
            </Link>
          </Button>
        )}
      </div>

      <Card>
        <CardHeader>
            <CardTitle>
                {isStudent ? "Available Tests" : "Existing Tests"}
            </CardTitle>
            <CardDescription>
                {isStudent ? "Tests that are currently open for you to take." : "View and manage tests you have created."}
            </CardDescription>
        </CardHeader>
        <CardContent>
            {testsToDisplay.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {testsToDisplay.map(test => (
                        <TestCard 
                            key={test.id} 
                            test={test}
                            canManageTests={canManageTests}
                            isStudent={isStudent}
                            onStatusChange={handleStatusChange}
                            onPublishResults={handlePublishResults}
                        />
                    ))}
                </div>
            ) : (
                <div className="text-center py-12 text-muted-foreground">
                    <FileText className="mx-auto h-12 w-12" />
                    <p className="mt-4 font-semibold">
                        {isStudent ? "No tests are currently available." : "No tests have been created yet."}
                    </p>
                    <p className="text-sm">
                        {isStudent ? "Please check back later." : "Click 'Create New Test' to get started."}
                    </p>
                </div>
            )}
        </CardContent>
      </Card>
    </div>
  );
}
`,
    "src/app/dashboard/cbt/take-test/[id]/page.tsx": `// src/app/dashboard/cbt/take-test/[id]/page.tsx
'use client';

import { useState, useEffect, useMemo, useRef } from 'react';
import { useParams, useRouter } from 'next/navigation';
import { useUser } from '@/context/user-context';
import { useForm, Controller } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Loader2, Send, ShieldAlert, BookOpen, Clock } from 'lucide-react';
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '@/components/ui/alert-dialog';
import { gradeEssay } from '@/ai/flows/grade-essay-flow';
import type { CbtTest, StudentTestAttempt, Grade } from '@/lib/data';

type TestFormValues = {
    objectiveAnswers: Record<string, string>;
    essayAnswers: Record<string, string>;
}

const CountdownTimer = ({ expiryTimestamp, onExpire }: { expiryTimestamp: number; onExpire: () => void }) => {
    const [timeLeft, setTimeLeft] = useState(expiryTimestamp - Date.now());

    useEffect(() => {
        const interval = setInterval(() => {
            const newTimeLeft = expiryTimestamp - Date.now();
            if (newTimeLeft <= 0) {
                clearInterval(interval);
                onExpire();
            } else {
                setTimeLeft(newTimeLeft);
            }
        }, 1000);

        return () => clearInterval(interval);
    }, [expiryTimestamp, onExpire]);

    const minutes = Math.floor((timeLeft / (1000 * 60)) % 60);
    const seconds = Math.floor((timeLeft / 1000) % 60);

    return (
        <div className="flex items-center font-mono text-lg font-semibold">
            <Clock className="mr-2 h-5 w-5" />
            <span>{String(minutes).padStart(2, '0')}:{String(seconds).padStart(2, '0')}</span>
        </div>
    );
};

export default function TakeTestPage() {
    const router = useRouter();
    const params = useParams();
    const testId = params.id as string;
    const { user, cbtTests, studentTestAttempts, setStudentTestAttempts } = useUser();
    const [test, setTest] = useState<CbtTest | null>(null);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [showSuccessDialog, setShowSuccessDialog] = useState(false);
    const formRef = useRef<HTMLFormElement>(null);

    useEffect(() => {
        const foundTest = cbtTests.find(t => t.id === testId);
        if (foundTest) {
            setTest(foundTest);
        } else {
            router.push('/dashboard/cbt');
        }
    }, [testId, cbtTests, router]);
    
    const form = useForm<TestFormValues>({
        defaultValues: {
            objectiveAnswers: {},
            essayAnswers: {}
        }
    });

    const attempt = useMemo(() => {
        if(!user || !user.regNo) return undefined;
        return studentTestAttempts.find(a => a.studentRegNo === user.regNo && a.testId === testId);
    }, [user, testId, studentTestAttempts]);
    
    const startTime = useMemo(() => {
        if (!test) return null;
        const now = Date.now();
        // If an attempt exists, use its start time, otherwise, use now.
        // This prevents the timer from resetting on re-renders.
        const existingStartTime = attempt?.startTime;
        return existingStartTime ? new Date(existingStartTime).getTime() : now;
    }, [test, attempt]);

    const endTime = useMemo(() => {
        if (!startTime || !test?.duration) return null;
        return startTime + test.duration * 60 * 1000;
    }, [startTime, test?.duration]);


    const isRestricted = useMemo(() => {
        if (!user || !test || !user.regNo) return false;
        return test.restrictedStudents?.includes(user.regNo) || false;
    }, [user, test]);


    const handleAutoSubmit = () => {
        if (formRef.current) {
            // Trigger form submission programmatically
            form.handleSubmit(onSubmit)();
        }
    };


    if (!user || user.role !== 'Student') {
        router.push('/dashboard');
        return null;
    }

    if (!test) {
        return <div className="flex justify-center items-center h-screen"><Loader2 className="animate-spin h-8 w-8" /></div>;
    }
    
    if (isRestricted) {
         return (
            <AlertDialog open={true}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <ShieldAlert className="h-10 w-10 text-destructive mx-auto mb-4" />
                        <AlertDialogTitle>Access Restricted</AlertDialogTitle>
                        <AlertDialogDescription>
                            You are not permitted to take this test. This may be due to outstanding fees, suspension, or other administrative reasons. Please contact the school administration for more information.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogAction onClick={() => router.push('/dashboard/cbt')}>Back to CBT Platform</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        );
    }
    
    if (attempt && test.resultsPublished) {
        // Show results view
        const totalObjectiveMarks = test.objectiveQuestions.reduce((sum, q) => sum + (q.marks || 1), 0);
        const totalEssayMarks = test.essayQuestions.reduce((sum, q) => sum + (q.marks || 0), 0);
        const totalTestMarks = totalObjectiveMarks + totalEssayMarks;
        const totalEssayScore = Object.values(attempt.essayScores).reduce((acc, s) => acc + s.score, 0);

        return (
             <div className="space-y-8 max-w-4xl mx-auto">
                <Card>
                    <CardHeader>
                        <CardTitle className="font-headline text-3xl">{test.title} - Results</CardTitle>
                        <CardDescription>{test.subject} - {test.category}</CardDescription>
                    </CardHeader>
                </Card>
                <Card>
                    <CardHeader>
                        <CardTitle>Your Score</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div className="flex justify-between items-center p-4 bg-muted/50 rounded-lg">
                            <span className="font-medium">Objective Score</span>
                            <span className="font-bold text-2xl">{attempt.objectiveScore} / {totalObjectiveMarks}</span>
                        </div>
                        {totalEssayMarks > 0 && (
                             <div className="flex justify-between items-center p-4 bg-muted/50 rounded-lg">
                                <span className="font-medium">Total Essay Score</span>
                                <span className="font-bold text-2xl">{totalEssayScore} / {totalEssayMarks}</span>
                            </div>
                        )}
                         <div className="flex justify-between items-center p-4 bg-primary/10 rounded-lg">
                            <span className="font-medium text-primary">Final Recorded Score</span>
                            <span className="font-bold text-2xl text-primary">{attempt.totalScore.toFixed(2)}%</span>
                        </div>
                    </CardContent>
                </Card>
                 {test.essayQuestions.length > 0 && (
                    <Card>
                        <CardHeader><CardTitle>Essay Feedback</CardTitle></CardHeader>
                        <CardContent className="space-y-4">
                            {test.essayQuestions.map(q => (
                                <div key={q.id} className="p-3 border rounded-md">
                                    <p className="font-semibold">{q.question} ({q.marks} marks)</p>
                                    <p className="text-sm my-2 p-3 bg-muted rounded-md italic">Your Answer: {attempt.essayAnswers[q.id] || "No answer"}</p>
                                    <p className="text-sm my-2 p-3 bg-green-500/10 rounded-md">Feedback: {attempt.essayScores[q.id]?.feedback || "Not graded"}</p>
                                    <p className="text-sm font-semibold p-3 bg-blue-500/10 rounded-md">Score: {attempt.essayScores[q.id]?.score || 0} / {q.marks}</p>
                                </div>
                            ))}
                        </CardContent>
                    </Card>
                 )}

                 <Button onClick={() => router.push('/dashboard/cbt')}><BookOpen className="mr-2"/> Back to CBT Platform</Button>
            </div>
        )
    }

    if (attempt && !test.resultsPublished) {
         return (
            <AlertDialog open={true}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>Test Already Submitted</AlertDialogTitle>
                        <AlertDialogDescription>
                            You have completed this test. Results are not yet published. Please check back later.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogAction onClick={() => router.push('/dashboard/cbt')}>Back to CBT Platform</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>
        );
    }

    const onSubmit = async (data: TestFormValues) => {
        if (!test || !user.regNo || isSubmitting) return;
        setIsSubmitting(true);

        // --- Calculate Objective Score ---
        let objectiveScore = 0;
        test.objectiveQuestions.forEach(q => {
            if (data.objectiveAnswers[q.id] === q.correctAnswer) {
                objectiveScore += (q.marks || 1);
            }
        });
        
        // --- Grade Essays with AI ---
        const essayScores: Record<string, { score: number; feedback: string }> = {};
        for (const essay of test.essayQuestions) {
            const studentAnswer = data.essayAnswers[essay.id];
            if (studentAnswer) {
                try {
                    const result = await gradeEssay({
                        question: essay.question,
                        markingRubric: \`\${essay.markingRubric}\\n\\nThe total marks for this question is \${essay.marks}.\`,
                        studentAnswer: studentAnswer,
                    });
                    // Clamp the score to be within the max marks for the question
                    const gradedScore = Math.max(0, Math.min(result.score, essay.marks || 10));
                    essayScores[essay.id] = { score: gradedScore, feedback: result.feedback };
                } catch(e) {
                     essayScores[essay.id] = { score: 0, feedback: 'AI grading failed. A staff member will review.' };
                }
            } else {
                 essayScores[essay.id] = { score: 0, feedback: 'No answer submitted.' };
            }
        }
        
        // --- Calculate Total Score based on test category ---
        const totalEssayScore = Object.values(essayScores).reduce((acc, s) => acc + s.score, 0);
        const totalObjectiveMarks = test.objectiveQuestions.reduce((sum, q) => sum + (q.marks || 1), 0);
        const totalEssayMarks = test.essayQuestions.reduce((sum, q) => sum + (q.marks || 0), 0);
        const totalTestMarks = totalObjectiveMarks + totalEssayMarks;
        
        let totalScore = 0;
        if (totalTestMarks > 0) {
            totalScore = ((objectiveScore + totalEssayScore) / totalTestMarks) * 100;
        }

        // --- Create Student Attempt Record ---
        const newAttempt: StudentTestAttempt = {
            studentRegNo: user.regNo,
            testId: test.id,
            startTime: startTime ? new Date(startTime).toISOString() : new Date().toISOString(),
            endTime: new Date().toISOString(),
            objectiveAnswers: data.objectiveAnswers,
            essayAnswers: data.essayAnswers,
            objectiveScore,
            essayScores,
            totalScore: parseFloat(totalScore.toFixed(2)),
            dateTaken: new Date().toISOString(),
        }
        setStudentTestAttempts(prev => [...prev, newAttempt]);

        setIsSubmitting(false);
        setShowSuccessDialog(true);
    };

    return (
        <div className="space-y-8 max-w-4xl mx-auto">
             <AlertDialog open={showSuccessDialog}>
                <AlertDialogContent>
                    <AlertDialogHeader>
                        <AlertDialogTitle>Test Submitted Successfully!</AlertDialogTitle>
                        <AlertDialogDescription>
                            Your answers have been submitted. You will be notified when your results are published by your form teacher.
                        </AlertDialogDescription>
                    </AlertDialogHeader>
                    <AlertDialogFooter>
                        <AlertDialogAction onClick={() => router.push('/dashboard/cbt')}>Return to CBT Platform</AlertDialogAction>
                    </AlertDialogFooter>
                </AlertDialogContent>
            </AlertDialog>

             <Card className="sticky top-0 z-10">
                <CardHeader className="flex flex-row items-center justify-between p-4">
                    <div>
                        <CardTitle className="font-headline text-2xl">{test.title}</CardTitle>
                        <CardDescription>{test.subject} - {test.category}</CardDescription>
                    </div>
                    {endTime && (
                        <div className="p-2 bg-muted rounded-lg">
                           <CountdownTimer expiryTimestamp={endTime} onExpire={handleAutoSubmit} />
                        </div>
                    )}
                </CardHeader>
            </Card>

            <form ref={formRef} onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
                {test.objectiveQuestions.length > 0 && (
                    <Card>
                        <CardHeader>
                            <CardTitle>Objective Questions</CardTitle>
                            <CardDescription>Select one answer for each question.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            {test.objectiveQuestions.map((q, index) => (
                                <div key={q.id} className="p-4 border rounded-md">
                                    <p className="font-semibold mb-2">{index + 1}. {q.question} ({q.marks} mark(s))</p>
                                    <Controller
                                        name={\`objectiveAnswers.\${q.id}\`}
                                        control={form.control}
                                        render={({ field }) => (
                                            <RadioGroup onValueChange={field.onChange} value={field.value} className="space-y-2">
                                                {q.options.map((option, optIndex) => (
                                                    <div key={optIndex} className="flex items-center space-x-2">
                                                        <RadioGroupItem value={option} id={\`\${q.id}-\${optIndex}\`} />
                                                        <Label htmlFor={\`\${q.id}-\${optIndex}\`}>{option}</Label>
                                                    </div>
                                                ))}
                                            </RadioGroup>
                                        )}
                                    />
                                </div>
                            ))}
                        </CardContent>
                    </Card>
                )}

                {test.essayQuestions.length > 0 && (
                    <Card>
                        <CardHeader>
                            <CardTitle>Essay Questions</CardTitle>
                            <CardDescription>Write your answers in the textboxes provided. Answer all questions unless otherwise stated.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            {test.essayQuestions.map((q, index) => (
                                <div key={q.id} className="p-4 border rounded-md">
                                    <Label className="font-semibold text-base">{index + 1}. {q.question} ({q.marks} mark(s))</Label>
                                     <Controller
                                        name={\`essayAnswers.\${q.id}\`}
                                        control={form.control}
                                        render={({ field }) => (
                                            <Textarea placeholder="Type your answer here..." className="mt-2 min-h-[150px]" {...field} />
                                        )}
                                    />
                                </div>
                            ))}
                        </CardContent>
                    </Card>
                )}

                <Button type="submit" size="lg" className="w-full" disabled={isSubmitting}>
                    {isSubmitting ? <Loader2 className="animate-spin mr-2" /> : <Send className="mr-2" />}
                    Submit Test
                </Button>
            </form>
        </div>
    );
}
`,
    "src/app/dashboard/classes/page.tsx": `// src/app/dashboard/classes/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useUser } from '@/context/user-context';
import { useRouter } from 'next/navigation';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { PlusCircle, Trash2, Building2, Edit, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import type { SchoolClass, SchoolCategory } from '@/lib/data';
import { db } from '@/lib/firebase';
import { doc, setDoc, deleteDoc } from "firebase/firestore";

const classSchema = z.object({
  name: z.string().min(2, 'Class name must be at least 2 characters.'),
  category: z.enum(['nursery', 'primary', 'upperBasic', 'highSchool'], { required_error: 'Please select a category.' }),
  teacher: z.string().optional(),
});

type ClassFormValues = z.infer<typeof classSchema>;

export default function ClassesPage() {
  const { user, schoolClasses, setSchoolClasses, staff } = useUser();
  const router = useRouter();
  const { toast } = useToast();
  const [editingClass, setEditingClass] = useState<SchoolClass | null>(null);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<ClassFormValues>({
    resolver: zodResolver(classSchema),
    defaultValues: {
      name: '',
      teacher: '',
    },
  });

  useEffect(() => {
    if (!user || user.role !== 'Admin') {
      router.push('/dashboard');
    }
  }, [user, router]);

  if (!user || user.role !== 'Admin') {
    return null;
  }

  const schoolStaff = staff.filter(t => t.schoolId === user.schoolId);
  const mySchoolClasses = schoolClasses.filter(c => c.schoolId === user?.schoolId);
  
  const handleEditClick = (classToEdit: SchoolClass) => {
    setEditingClass(classToEdit);
    form.reset({
        name: classToEdit.name,
        category: classToEdit.category,
        teacher: classToEdit.teacher || '',
    });
     window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleCancelEdit = () => {
    setEditingClass(null);
    form.reset({ name: '', teacher: '', category: undefined });
  };

  const onSubmit = async (data: ClassFormValues) => {
    if (!user.schoolId) return;
    setIsSubmitting(true);
    
    try {
        const finalData = {
            ...data,
            teacher: data.teacher === 'unassigned' ? '' : data.teacher,
        };

        if (editingClass) {
            const classToUpdate: SchoolClass = { ...editingClass, ...finalData, teacher: finalData.teacher || '' };
            await setDoc(doc(db, "schoolClasses", editingClass.id), classToUpdate);
            setSchoolClasses(schoolClasses.map(c => c.id === editingClass.id ? classToUpdate : c));
            toast({ title: 'Class Updated', description: \`Class "\${data.name}" has been updated.\` });
            handleCancelEdit();
        } else {
            const classId = \`class-\${Date.now()}\`;
            const newClass: SchoolClass = {
              id: classId,
              schoolId: user.schoolId!,
              name: data.name,
              category: data.category,
              teacher: finalData.teacher || '',
              students: [],
              offeredSubjects: [],
            };
            await setDoc(doc(db, "schoolClasses", classId), newClass);
            setSchoolClasses([...schoolClasses, newClass]);
            toast({ title: 'Class Added', description: \`Class "\${data.name}" has been created.\` });
            form.reset({ name: '', teacher: '', category: undefined });
        }
    } catch (error) {
        console.error("Error saving class:", error);
        toast({ variant: 'destructive', title: 'Error', description: 'Could not save class.'});
    } finally {
        setIsSubmitting(false);
    }
  };

  const handleRemoveClass = async (classId: string) => {
    const classToRemove = schoolClasses.find(c => c.id === classId);
    if (classToRemove?.students.length ?? 0 > 0) {
        toast({ variant: 'destructive', title: 'Cannot Remove Class', description: 'You cannot remove a class that has students enrolled in it.' });
        return;
    }
    
    setIsSubmitting(true);
    try {
        await deleteDoc(doc(db, "schoolClasses", classId));
        setSchoolClasses(schoolClasses.filter(c => c.id !== classId));
        toast({ title: 'Class Removed' });
    } catch (error) {
        console.error("Error removing class:", error);
        toast({ variant: 'destructive', title: 'Error', description: 'Could not remove class.'});
    } finally {
        setIsSubmitting(false);
    }
  };

  const formatCategory = (category: SchoolCategory) => {
    if (category === 'highSchool') return 'High School';
    if (category === 'upperBasic') return 'Upper Basic';
    return category.charAt(0).toUpperCase() + category.slice(1);
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2"><Building2 /> Class Management</h1>
        <p className="text-muted-foreground">Add, view, and manage classes for your school.</p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle>{editingClass ? \`Editing: \${editingClass.name}\`: 'Add New Class'}</CardTitle>
              <CardDescription>{editingClass ? 'Update the details for this class.' : 'Create a new class for your school.'}</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                  <FormField control={form.control} name="name" render={({ field }) => (
                    <FormItem>
                      <FormLabel>Class Name</FormLabel>
                      <FormControl><Input placeholder="e.g., JSS 1A, Basic 6 Gold" {...field} /></FormControl>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField control={form.control} name="category" render={({ field }) => (
                    <FormItem>
                      <FormLabel>Class Category</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl><SelectTrigger><SelectValue placeholder="Select a category" /></SelectTrigger></FormControl>
                        <SelectContent>
                          <SelectItem value="nursery">Nursery School</SelectItem>
                          <SelectItem value="primary">Primary School</SelectItem>
                          <SelectItem value="upperBasic">Upper Basic</SelectItem>
                          <SelectItem value="highSchool">High School</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <FormField control={form.control} name="teacher" render={({ field }) => (
                    <FormItem>
                      <FormLabel>Form Teacher (Optional)</FormLabel>
                      <Select onValueChange={field.onChange} value={field.value}>
                        <FormControl><SelectTrigger><SelectValue placeholder="Assign a staff member" /></SelectTrigger></FormControl>
                        <SelectContent>
                           <SelectItem value="unassigned">Unassigned</SelectItem>
                          {schoolStaff.map(t => <SelectItem key={t.email} value={t.name}>{t.name}</SelectItem>)}
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )} />
                  <div className="flex flex-col gap-2">
                    <Button type="submit" className="w-full" disabled={isSubmitting}>
                        {isSubmitting ? <Loader2 className="mr-2 animate-spin" /> : editingClass ? <Edit className="mr-2" /> : <PlusCircle className="mr-2" />}
                        {editingClass ? 'Save Changes' : 'Add Class'}
                    </Button>
                    {editingClass && (
                        <Button type="button" variant="outline" onClick={handleCancelEdit}>Cancel Edit</Button>
                    )}
                  </div>
                </form>
              </Form>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle>Existing Classes</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Class Name</TableHead>
                    <TableHead>Category</TableHead>
                    <TableHead>Form Teacher</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {mySchoolClasses.length > 0 ? (
                    mySchoolClasses.map(sc => (
                      <TableRow key={sc.id}>
                        <TableCell className="font-medium">{sc.name}</TableCell>
                        <TableCell>{formatCategory(sc.category)}</TableCell>
                        <TableCell>{sc.teacher || 'Unassigned'}</TableCell>
                        <TableCell className="text-right">
                          <Button variant="outline" size="icon" className="h-8 w-8 mr-2" onClick={() => handleEditClick(sc)} disabled={isSubmitting}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Edit</span>
                          </Button>
                          <Button variant="ghost" size="icon" className="h-8 w-8 text-destructive" onClick={() => handleRemoveClass(sc.id)} disabled={isSubmitting}>
                            <Trash2 className="h-4 w-4" />
                            <span className="sr-only">Remove</span>
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell colSpan={4} className="h-24 text-center text-muted-foreground">
                        No classes have been added yet.
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
`,
    "src/app/dashboard/directory/page.tsx": `// src/app/dashboard/directory/page.tsx
"use client";

import { useState, useMemo } from 'react';
import { useUser } from '@/context/user-context';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { PlusCircle, Trash2, UserCog, UserPlus, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import type { Staff, StaffPosition, StaffStatus, User as AdminUser } from '@/lib/data';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Checkbox } from '@/components/ui/checkbox';
import { db } from '@/lib/firebase';
import { doc, setDoc, deleteDoc } from 'firebase/firestore';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

const staffSchema = z.object({
  name: z.string().min(2, "Full name is required."),
  email: z.string().email("A valid email is required."),
  staffId: z.string().min(1, "Staff ID is required."),
  phoneNo: z.string().min(10, "A valid phone number is required."),
  position: z.enum(['Principal', 'Admin', 'HOD', 'Classroom Teacher', 'Form Master', 'Minder', 'Non-academic'], { required_error: 'Please select a position.' }),
  status: z.enum(['Full-time', 'Part-time'], { required_error: 'Please select a status.' }),
  subjectsTaught: z.array(z.string()).optional(),
});

type StaffFormValues = z.infer<typeof staffSchema>;


export default function DirectoryPage() {
  const { user, staff, setStaff, subjects, admins, setAdmins } = useUser();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<StaffFormValues>({
    resolver: zodResolver(staffSchema),
    defaultValues: {
      name: '',
      email: '',
      staffId: '',
      phoneNo: '',
      subjectsTaught: [],
    },
  });

  if (!user) return null;

  const isAdmin = user.role === 'Admin';
  
  const schoolStaff = staff.filter(t => t.schoolId === user.schoolId);
  const schoolSubjects = subjects.filter(s => s.schoolId === user.schoolId).map(s => s.name);


  const handleAddStaff = async (data: StaffFormValues) => {
    if (!user || !user.schoolId) {
        toast({variant: 'destructive', title: 'Error', description: 'Could not determine your school ID.'});
        return;
    }
    if (staff.some(t => t.email.toLowerCase() === data.email.toLowerCase() && t.schoolId === user.schoolId)) {
      form.setError("email", { message: "This email already exists."});
      return;
    }
     if (staff.some(t => t.staffId === data.staffId && t.schoolId === user.schoolId)) {
      form.setError("staffId", { message: "This Staff ID already exists."});
      return;
    }
    
    setIsSubmitting(true);
    try {
        const newStaff: Staff = {
          ...data,
          password: data.phoneNo, // Phone number is the password
          avatar: \`https://picsum.photos/seed/\${data.email}/100/100\`,
          schoolId: user.schoolId,
          role: 'Staff',
        };

        // Use email as doc ID for staff for easier lookup/uniqueness
        await setDoc(doc(db, "staff", newStaff.email), newStaff);
    
        setStaff(prev => [...prev, newStaff]);
        toast({ title: 'Staff Added', description: \`\${newStaff.name} has been added to the directory.\` });
        form.reset();

    } catch (error) {
        console.error("Error adding staff:", error);
        toast({variant: 'destructive', title: 'Error', description: 'Failed to add staff to the database.'});
    } finally {
        setIsSubmitting(false);
    }
  };
  
  const handleRemoveStaff = async (email: string) => {
    setIsSubmitting(true);
    try {
        await deleteDoc(doc(db, "staff", email));
        setStaff(prev => prev.filter(t => t.email !== email));
        // Also remove from admins if they were one
        const adminToDelete = admins.find(a => a.email === email);
        if (adminToDelete) {
            await deleteDoc(doc(db, "admins", email));
            setAdmins(prev => prev.filter(a => a.email !== email));
        }
        toast({ title: 'Staff Removed' });
    } catch(error) {
        console.error("Error removing staff:", error);
        toast({variant: 'destructive', title: 'Error', description: 'Failed to remove staff.'});
    } finally {
        setIsSubmitting(false);
    }
  };
  
  const handlePromoteToAdmin = async (staffMember: Staff) => {
    if(admins.some(a => a.email === staffMember.email)) {
      toast({ title: 'Already an Admin', description: \`\${staffMember.name} is already an administrator.\`});
      return;
    }

    const newAdmin: AdminUser = {
      name: staffMember.name,
      firstName: staffMember.name.split(' ')[0],
      surname: staffMember.name.split(' ').slice(1).join(' '),
      role: "Admin",
      avatar: staffMember.avatar,
      isChiefAdmin: false,
      email: staffMember.email,
      password: staffMember.phoneNo, // Phone number is the password
      phoneNo: staffMember.phoneNo,
      schoolId: user.schoolId,
      schoolName: user.schoolName,
      status: 'Active',
    };
    
    setIsSubmitting(true);
    try {
        await setDoc(doc(db, "admins", newAdmin.email!), newAdmin);
        setAdmins(prev => [...prev, newAdmin]);
        toast({
          title: "Admin Added",
          description: \`\${newAdmin.name} has been promoted to an administrator.\`,
        });
    } catch (error) {
         console.error("Error promoting staff:", error);
        toast({variant: 'destructive', title: 'Error', description: 'Failed to promote staff.'});
    } finally {
        setIsSubmitting(false);
    }
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight">Staff Directory</h1>
        <p className="text-muted-foreground">
          {isAdmin ? 'Manage staff members for your school.' : 'Find contact information for staff members.'}
        </p>
      </div>

      {isAdmin && (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="lg:col-span-1">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2"><UserPlus />Add New Staff</CardTitle>
                    <CardDescription>Enroll a new staff member into the school system.</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <Form {...form}>
                      <form onSubmit={form.handleSubmit(handleAddStaff)} className="space-y-4">
                        <FormField control={form.control} name="name" render={({ field }) => (
                          <FormItem><FormLabel>Full Name</FormLabel><FormControl><Input placeholder="Full Name" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                         <FormField control={form.control} name="email" render={({ field }) => (
                          <FormItem><FormLabel>Email Address</FormLabel><FormControl><Input placeholder="Email Address" type="email" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <FormField control={form.control} name="staffId" render={({ field }) => (
                          <FormItem><FormLabel>Staff ID</FormLabel><FormControl><Input placeholder="Staff ID" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <FormField control={form.control} name="phoneNo" render={({ field }) => (
                          <FormItem><FormLabel>Phone Number (Default Password)</FormLabel><FormControl><Input placeholder="Phone Number" type="tel" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <FormField control={form.control} name="position" render={({ field }) => (
                          <FormItem><FormLabel>Position</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl><SelectTrigger><SelectValue placeholder="Select Position" /></SelectTrigger></FormControl>
                              <SelectContent>{['Principal', 'Admin', 'HOD', 'Classroom Teacher', 'Form Master', 'Minder', 'Non-academic'].map(p => <SelectItem key={p} value={p}>{p}</SelectItem>)}</SelectContent>
                            </Select><FormMessage />
                          </FormItem>
                        )}/>
                         <FormField control={form.control} name="status" render={({ field }) => (
                          <FormItem><FormLabel>Status</FormLabel>
                            <Select onValueChange={field.onChange} value={field.value}>
                              <FormControl><SelectTrigger><SelectValue placeholder="Select Status" /></SelectTrigger></FormControl>
                              <SelectContent>{['Full-time', 'Part-time'].map(s => <SelectItem key={s} value={s}>{s}</SelectItem>)}</SelectContent>
                            </Select><FormMessage />
                           </FormItem>
                        )}/>
                         <FormField control={form.control} name="subjectsTaught" render={({ field }) => (
                            <FormItem>
                                <FormLabel>Subjects Taught (Max 3)</FormLabel>
                                <Popover>
                                <PopoverTrigger asChild>
                                    <Button variant="outline" className="w-full justify-start">
                                    {field.value && field.value.length > 0 ? \`Selected (\${field.value.length})\` : 'Select Subjects Taught'}
                                    </Button>
                                </PopoverTrigger>
                                <PopoverContent className="w-56 p-2">
                                    <div className="space-y-1">
                                    {schoolSubjects.map((subject) => (
                                        <div key={subject} className="flex items-center gap-2 p-1 rounded-md hover:bg-accent">
                                        <Checkbox
                                            id={\`subject-\${subject}\`}
                                            checked={field.value?.includes(subject)}
                                            onCheckedChange={(checked) => {
                                                const currentValue = field.value || [];
                                                if (checked) {
                                                    if(currentValue.length < 3) field.onChange([...currentValue, subject]);
                                                    else toast({variant: 'destructive', title: 'You can only select up to 3 subjects.'})
                                                } else {
                                                    field.onChange(currentValue.filter(s => s !== subject));
                                                }
                                            }}
                                        />
                                        <label htmlFor={\`subject-\${subject}\`} className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">{subject}</label>
                                        </div>
                                    ))}
                                    </div>
                                </PopoverContent>
                                </Popover>
                                <FormMessage />
                            </FormItem>
                         )} />
                        <Button type="submit" className="w-full" disabled={isSubmitting}>
                          {isSubmitting ? <Loader2 className="animate-spin" /> : <PlusCircle className="mr-2" />} Add Staff
                        </Button>
                      </form>
                    </Form>
                  </CardContent>
                </Card>
            </div>
            <div className="lg:col-span-2">
                 <Card>
                    <CardHeader>
                        <CardTitle>Staff List</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Name</TableHead>
                                    <TableHead>Staff ID</TableHead>
                                    <TableHead>Position</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {schoolStaff.map(staffMember => (
                                    <TableRow key={staffMember.email}>
                                        <TableCell>
                                            <div className="flex items-center gap-3">
                                                <Avatar className="h-9 w-9">
                                                    <AvatarImage src={staffMember.avatar} alt={staffMember.name} data-ai-hint="person" />
                                                    <AvatarFallback>{staffMember.name.charAt(0)}</AvatarFallback>
                                                </Avatar>
                                                <div>
                                                    <p className="font-medium">{staffMember.name}</p>
                                                    <p className="text-xs text-muted-foreground">{staffMember.email}</p>
                                                </div>
                                            </div>
                                        </TableCell>
                                        <TableCell>{staffMember.staffId}</TableCell>
                                        <TableCell>{staffMember.position}</TableCell>
                                        <TableCell>{staffMember.status}</TableCell>
                                        <TableCell className="text-right space-x-1">
                                            {user.isChiefAdmin && (
                                                <Button variant="outline" size="icon" className="h-8 w-8" onClick={() => handlePromoteToAdmin(staffMember)} disabled={isSubmitting}>
                                                    <UserCog className="h-4 w-4"/>
                                                    <span className="sr-only">Make Admin</span>
                                                </Button>
                                            )}
                                            <Button variant="ghost" size="icon" className="h-8 w-8 text-destructive" onClick={() => handleRemoveStaff(staffMember.email)} disabled={isSubmitting}>
                                                <Trash2 className="h-4 w-4"/>
                                                <span className="sr-only">Remove Staff</span>
                                            </Button>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
            </div>
        </div>
      )}

      {!isAdmin && (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
            {schoolStaff.map((staffMember, index) => (
            <Card key={index} className="hover:shadow-md transition-shadow">
              <CardContent className="p-6 flex flex-col items-center text-center">
                <Avatar className="h-20 w-20 mb-4">
                  <AvatarImage src={staffMember.avatar} alt={staffMember.name} data-ai-hint="person" />
                  <AvatarFallback>{staffMember.name.split(" ").map((n) => n[0]).join("")}</AvatarFallback>
                </Avatar>
                <h3 className="font-headline font-semibold text-lg">{staffMember.name}</h3>
                <p className="text-muted-foreground">{staffMember.position}</p>
                <a
                  href={\`mailto:\${staffMember.email}\`}
                  className="mt-2 text-sm text-primary/80 hover:text-primary flex items-center gap-1"
                >
                  <PlusCircle className="h-3 w-3" />
                  {staffMember.email}
                </a>
              </CardContent>
            </Card>
            ))}
        </div>
      )}
    </div>
  );
}
`,
    "src/app/dashboard/enrollment/page.tsx": `// src/app/dashboard/enrollment/page.tsx
"use client";

import { useState, useRef, useEffect } from "react";
import { useUser } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Student } from "@/lib/data";
import { useForm, SubmitHandler } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { CalendarIcon, PlusCircle, Trash2, UserPlus, Camera, Video, Sparkles, Upload, Loader2, Edit, CheckCircle, XCircle } from "lucide-react";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { Calendar } from "@/components/ui/calendar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useToast } from "@/hooks/use-toast";
import Image from "next/image";
import { Textarea } from "@/components/ui/textarea";
import { extractStudentData } from "@/ai/flows/extract-student-data-flow";
import { ScrollArea } from "@/components/ui/scroll-area";
import { db } from "@/lib/firebase";
import { doc, setDoc } from "firebase/firestore";

const newStudentSchema = z.object({
  firstName: z.string().min(2, "First name must be at least 2 characters."),
  middleName: z.string().optional(),
  surname: z.string().min(2, "Surname must be at least 2 characters."),
  regNo: z.string().min(3, "Registration number must be at least 3 characters."),
  email: z.string().email("Please enter a valid email address."),
  dob: z.date({ required_error: "Date of birth is required." }),
  parentName: z.string().min(2, "Parent/Guardian name is required."),
  parentContact: z.string().min(10, "Parent/Guardian contact must be at least 10 characters."),
  classId: z.string({ required_error: "Please select a class." }),
  nationality: z.string().min(2, "Nationality is required."),
  stateOfOrigin: z.string().min(2, "State of origin is required."),
  lga: z.string().min(2, "Local Government Area is required."),
  hobbies: z.string().min(2, "Hobbies are required."),
  bloodGroup: z.string().min(1, "Blood group is required."),
  genotype: z.string().min(2, "Genotype is required."),
  disabilities: z.string().optional(),
  healthConditions: z.string().optional(),
});

type NewStudentForm = z.infer<typeof newStudentSchema>;

const DRAFT_STORAGE_KEY = 'enrollment-form-draft';

const nigerianStates = [
    "Abia", "Adamawa", "Akwa Ibom", "Anambra", "Bauchi", "Bayelsa", "Benue", "Borno", 
    "Cross River", "Delta", "Ebonyi", "Edo", "Ekiti", "Enugu", "FCT - Abuja", "Gombe", 
    "Imo", "Jigawa", "Kaduna", "Kano", "Katsina", "Kebbi", "Kogi", "Kwara", "Lagos", 
    "Nasarawa", "Niger", "Ogun", "Ondo", "Osun", "Oyo", "Plateau", "Rivers", "Sokoto", 
    "Taraba", "Yobe", "Zamfara"
];

const bloodGroups = ["A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"];
const genotypes = ["AA", "AS", "AC", "SS"];
const commonHobbies = ["Reading", "Sports", "Music", "Art", "Dancing", "Gaming", "Cooking", "Writing"];

const AiScanForm = ({ onDataExtracted }: { onDataExtracted: (data: any) => void }) => {
    const { toast } = useToast();
    const fileInputRef = useRef<HTMLInputElement>(null);
    const [isScanning, setIsScanning] = useState(false);

    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        if (file.size > 4 * 1024 * 1024) { // 4MB limit
            toast({ variant: 'destructive', title: 'File too large', description: 'Please upload an image smaller than 4MB.' });
            return;
        }

        setIsScanning(true);
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = async () => {
            try {
                const result = await extractStudentData({ formImage: reader.result as string });
                onDataExtracted(result);
                 toast({ title: 'Scan Successful', description: 'Form data has been extracted. Please review and save.' });
            } catch (error) {
                console.error("AI data extraction failed:", error);
                toast({ variant: 'destructive', title: 'Scan Failed', description: 'Could not extract data from the image. Please try again.' });
            } finally {
                setIsScanning(false);
            }
        };
        reader.onerror = () => {
            toast({ variant: 'destructive', title: 'File Error', description: 'Could not read the selected file.' });
             setIsScanning(false);
        };
    };
    
    return (
        <Card>
            <CardHeader>
                <CardTitle className="font-headline flex items-center gap-2"><Sparkles className="h-5 w-5 text-accent"/> AI Form Scanner</CardTitle>
                <CardDescription>Upload a scanned enrollment form to automatically fill the fields below.</CardDescription>
            </CardHeader>
            <CardContent>
                <input type="file" ref={fileInputRef} onChange={handleFileChange} accept="image/png, image/jpeg, image/webp" className="hidden" />
                <Button onClick={() => fileInputRef.current?.click()} className="w-full" disabled={isScanning}>
                    {isScanning ? <Loader2 className="animate-spin" /> : <Upload className="mr-2" />}
                    Upload & Scan Form
                </Button>
            </CardContent>
        </Card>
    );
};


export default function EnrollmentPage() {
  const { user, students, setStudents, schoolClasses, setSchoolClasses, pendingStudents, setPendingStudents } = useUser();
  const router = useRouter();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [hasCameraPermission, setHasCameraPermission] = useState<boolean | null>(null);
  const [capturedImage, setCapturedImage] = useState<string | null>(null);
  const [editingStudent, setEditingStudent] = useState<Student | null>(null);
  const videoRef = useRef<HTMLVideoElement>(null);
  const canvasRef = useRef<HTMLCanvasElement>(null);

  const defaultFormValues: NewStudentForm = {
      firstName: "",
      middleName: "",
      surname: "",
      regNo: "",
      email: "",
      parentName: "",
      parentContact: "",
      classId: "",
      nationality: "Nigerian",
      stateOfOrigin: "",
      lga: "",
      hobbies: "",
      bloodGroup: "",
      genotype: "",
      disabilities: "",
      healthConditions: "",
      dob: new Date(),
  };

  const form = useForm<NewStudentForm>({
    resolver: zodResolver(newStudentSchema),
    defaultValues: defaultFormValues,
  });

  useEffect(() => {
    const canEnroll = user?.role === "Admin" || user?.role === "Staff";
    if (!user || !canEnroll) {
      router.push("/dashboard");
    }
  }, [user, router]);
  
  // Load draft from localStorage on mount
  useEffect(() => {
    if (editingStudent) return; // Don't load draft if editing
    const savedDraft = localStorage.getItem(DRAFT_STORAGE_KEY);
    if (savedDraft) {
      try {
        const draftData = JSON.parse(savedDraft);
        // Manually convert date string back to Date object
        if (draftData.dob) {
            draftData.dob = new Date(draftData.dob);
        }
        form.reset(draftData);
        if (draftData.capturedImage) {
          setCapturedImage(draftData.capturedImage);
        }
      } catch(e) {
        console.error("Failed to parse draft enrollment data", e);
        localStorage.removeItem(DRAFT_STORAGE_KEY);
      }
    }
  }, [form, editingStudent]);

  // Save form data to localStorage on change
  useEffect(() => {
    if (editingStudent) return; // Don't save draft if editing
    const subscription = form.watch((value) => {
      const dataToSave = { ...value, capturedImage };
      localStorage.setItem(DRAFT_STORAGE_KEY, JSON.stringify(dataToSave));
    });
    return () => subscription.unsubscribe();
  }, [form, capturedImage, editingStudent]);


  useEffect(() => {
    const getCameraPermission = async () => {
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        setHasCameraPermission(false);
        return;
      }
      try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        setHasCameraPermission(true);

        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (error) {
        console.error('Error accessing camera:', error);
        setHasCameraPermission(false);
      }
    };

    getCameraPermission();
  }, []);

  const handleCapture = () => {
    if (videoRef.current && canvasRef.current) {
      const video = videoRef.current;
      const canvas = canvasRef.current;
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const context = canvas.getContext('2d');
      context?.drawImage(video, 0, 0, canvas.width, canvas.height);
      const dataUrl = canvas.toDataURL('image/png');
      setCapturedImage(dataUrl);
    }
  };
  
  const handleDataExtracted = (data: any) => {
    const formData: Partial<NewStudentForm> = {};
    for (const key in data) {
        if (Object.prototype.hasOwnProperty.call(data, key) && data[key]) {
             if (key === 'dob' && typeof data.dob === 'string') {
                const date = new Date(data.dob);
                date.setDate(date.getDate() + 1);
                if (!isNaN(date.getTime())) {
                    formData.dob = date;
                }
            } else {
                 // @ts-ignore
                formData[key] = data[key];
            }
        }
    }
    form.reset(formData);
  };

  const handleEditClick = (student: Student) => {
    setEditingStudent(student);
    setCapturedImage(student.avatar);
    form.reset({
      ...student,
      dob: student.dob ? new Date(student.dob) : new Date(),
    });
    localStorage.removeItem(DRAFT_STORAGE_KEY);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const handleSaveStudent: SubmitHandler<NewStudentForm> = async (data) => {
    setIsSubmitting(true);
    
    try {
        if (editingStudent) { // Update existing student
            const updatedStudent: Student = {
              ...editingStudent,
              ...data,
              name: \`\${data.firstName} \${data.surname}\`,
              avatar: capturedImage || editingStudent.avatar,
            };
            await setDoc(doc(db, "students", updatedStudent.regNo), updatedStudent);

            setStudents(prev => prev.map(s => s.regNo === editingStudent.regNo ? updatedStudent : s));
            setSchoolClasses(prevClasses => prevClasses.map(c => ({
                ...c,
                students: c.students.map(s => s.regNo === editingStudent.regNo ? updatedStudent : s)
            })));
            toast({ title: "Student Updated", description: \`\${updatedStudent.name}'s details have been updated.\` });
            setEditingStudent(null);
        } else { // Add new student
            const newStudent: Student = {
              ...data,
              firstName: data.firstName,
              surname: data.surname,
              name: \`\${data.firstName} \${data.surname}\`,
              avatar: capturedImage || \`https://picsum.photos/seed/\${Math.random()}/100/100\`,
              schoolId: user?.schoolId,
              schoolName: user?.schoolName,
            };
            
            // Use regNo as document ID
            await setDoc(doc(db, "students", newStudent.regNo), newStudent);

            if (user?.role === 'Admin') {
                setStudents(prevStudents => [newStudent, ...prevStudents]);
                setSchoolClasses(prevClasses => prevClasses.map(c => {
                    if (c.id === data.classId) {
                        return { ...c, students: [...c.students, newStudent] };
                    }
                    return c;
                }));
                toast({ title: "Student Enrolled", description: \`\${newStudent.name} has been successfully enrolled.\` });
            } else if (user?.role === 'Staff') {
                // For staff, this still goes to a pending queue for approval.
                // In a full backend implementation, this would write to a 'pendingStudents' collection.
                setPendingStudents(prev => [...prev, newStudent]);
                toast({ title: "Submission Sent", description: \`\${newStudent.name}'s enrollment is pending admin approval.\` });
            }
        }
        setCapturedImage(null);
        form.reset(defaultFormValues);
        localStorage.removeItem(DRAFT_STORAGE_KEY);
    } catch (error) {
        console.error("Error saving student:", error);
        toast({ variant: 'destructive', title: 'Error', description: 'Failed to save student data to the database.' });
    } finally {
        setIsSubmitting(false);
    }
  };
  
  const handleRemoveStudent = (regNo: string) => {
    // In a real app, this would also delete from Firestore.
    setStudents(prev => prev.filter(student => student.regNo !== regNo));
    setSchoolClasses(prev => prev.map(c => ({
        ...c,
        students: c.students.filter(s => s.regNo !== regNo)
    })));
  };

  const handleApprove = (studentToApprove: Student) => {
    setStudents(prev => [studentToApprove, ...prev]);
     setSchoolClasses(prevClasses => prevClasses.map(c => {
      if (c.id === studentToApprove.classId) {
        return { ...c, students: [...c.students, studentToApprove] };
      }
      return c;
    }));
    setPendingStudents(prev => prev.filter(s => s.regNo !== studentToApprove.regNo));
    toast({ title: 'Enrollment Approved', description: \`\${studentToApprove.name} is now an enrolled student.\` });
  };

  const handleReject = (regNo: string) => {
    setPendingStudents(prev => prev.filter(s => s.regNo !== regNo));
    toast({ variant: 'destructive', title: 'Enrollment Rejected' });
  };
  
  const handleCancelEdit = () => {
    setEditingStudent(null);
    setCapturedImage(null);
    form.reset(defaultFormValues);
  }
  
  const canEnroll = user?.role === "Admin" || user?.role === "Staff";
  if (!user || !canEnroll) {
    return null;
  }

  const enrolledStudents = students.filter(s => s.schoolId === user?.schoolId);
  const schoolPendingStudents = pendingStudents.filter(s => s.schoolId === user?.schoolId);
  const mySchoolClasses = schoolClasses.filter(c => c.schoolId === user?.schoolId);


  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight">Student Enrollment</h1>
        <p className="text-muted-foreground">
          {user.role === 'Admin' ? \`Register or edit students for \${user.schoolName}.\` : \`Submit new student registrations for approval.\`}
        </p>
      </div>
      
      {user?.role === 'Admin' && schoolPendingStudents.length > 0 && (
        <Card>
            <CardHeader>
                <CardTitle>Pending Enrollments</CardTitle>
                <CardDescription>Review and approve student registrations submitted by staff.</CardDescription>
            </CardHeader>
            <CardContent>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Student</TableHead>
                            <TableHead>Class</TableHead>
                            <TableHead className="text-right">Actions</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {schoolPendingStudents.map(student => (
                            <TableRow key={student.regNo}>
                                <TableCell>
                                    <div className="flex items-center gap-3">
                                    <Avatar className="h-9 w-9">
                                        <AvatarImage src={student.avatar} alt={student.name} data-ai-hint="person" />
                                        <AvatarFallback>{student.name.charAt(0)}</AvatarFallback>
                                    </Avatar>
                                    <div>
                                        <p className="font-medium">{student.name}</p>
                                        <p className="text-xs text-muted-foreground">{student.regNo}</p>
                                    </div>
                                    </div>
                                </TableCell>
                                <TableCell>{schoolClasses.find(c => c.id === student.classId)?.name}</TableCell>
                                <TableCell className="text-right space-x-2">
                                    <Button size="sm" variant="outline" className="text-green-600 border-green-600 hover:bg-green-50 hover:text-green-700" onClick={() => handleApprove(student)}><CheckCircle className="mr-2" />Approve</Button>
                                    <Button size="sm" variant="destructive" onClick={() => handleReject(student.regNo)}><XCircle className="mr-2"/>Reject</Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
      )}


      <div className="grid gap-8 lg:grid-cols-3">
        <div className="lg:col-span-1 space-y-6">
            {user.role === 'Admin' && <AiScanForm onDataExtracted={handleDataExtracted} />}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 font-headline">
                <UserPlus className="h-5 w-5" />
                {editingStudent ? \`Editing: \${editingStudent.name}\` : (user.role === 'Admin' ? 'Register New Student' : 'Submit for Enrollment')}
              </CardTitle>
              <CardDescription>{editingStudent ? 'Update the details for this student.' : 'Enter the details for the new student.'}</CardDescription>
            </CardHeader>
            <CardContent>
                <ScrollArea className="h-[calc(100vh-12rem)]">
                <div className="pr-6">
              <Form {...form}>
                <form onSubmit={form.handleSubmit(handleSaveStudent)} className="space-y-4">
                   <FormField
                    control={form.control}
                    name="firstName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>First Name</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., John" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                   <FormField
                    control={form.control}
                    name="middleName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Middle Name (Optional)</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Fitzgerald" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                   <FormField
                    control={form.control}
                    name="surname"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Surname</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Doe" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="regNo"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Registration No.</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., S12345" {...field} disabled={!!editingStudent} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email Address</FormLabel>
                        <FormControl>
                          <Input type="email" placeholder="e.g., john.doe@school.com" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="dob"
                    render={({ field }) => (
                      <FormItem className="flex flex-col">
                        <FormLabel>Date of Birth</FormLabel>
                        <Popover>
                          <PopoverTrigger asChild>
                            <FormControl>
                              <Button
                                variant={"outline"}
                                className={cn(
                                  "w-full pl-3 text-left font-normal",
                                  !field.value && "text-muted-foreground"
                                )}
                              >
                                {field.value ? (
                                  format(field.value, "PPP")
                                ) : (
                                  <span>Pick a date</span>
                                )}
                                <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                              </Button>
                            </FormControl>
                          </PopoverTrigger>
                          <PopoverContent className="w-auto p-0" align="start">
                            <Calendar
                              mode="single"
                              selected={field.value}
                              onSelect={field.onChange}
                              captionLayout="dropdown-buttons"
                              fromYear={new Date().getFullYear() - 25}
                              toYear={new Date().getFullYear() - 3}
                              initialFocus
                            />
                          </PopoverContent>
                        </Popover>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="parentName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Parent/Guardian Name</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Jane Doe" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="parentContact"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Parent/Guardian Contact</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., 555-123-4567" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                   <FormField
                    control={form.control}
                    name="nationality"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Nationality</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Nigerian" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="stateOfOrigin"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>State of Origin</FormLabel>
                         <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select a state" />
                                </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                                {nigerianStates.map(state => <SelectItem key={state} value={state}>{state}</SelectItem>)}
                            </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                   <FormField
                    control={form.control}
                    name="lga"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Local Government Area</FormLabel>
                        <FormControl>
                          <Input placeholder="e.g., Ikeja" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                   <FormField
                    control={form.control}
                    name="hobbies"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Hobbies</FormLabel>
                         <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select a hobby" />
                                </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                                {commonHobbies.map(hobby => <SelectItem key={hobby} value={hobby}>{hobby}</SelectItem>)}
                            </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <div className="grid grid-cols-2 gap-4">
                    <FormField
                      control={form.control}
                      name="bloodGroup"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Blood Group</FormLabel>
                           <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select..." />
                                </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                                {bloodGroups.map(group => <SelectItem key={group} value={group}>{group}</SelectItem>)}
                            </SelectContent>
                           </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="genotype"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Genotype</FormLabel>
                          <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select..." />
                                </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                                {genotypes.map(type => <SelectItem key={type} value={type}>{type}</SelectItem>)}
                            </SelectContent>
                           </Select>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                  <FormField
                    control={form.control}
                    name="disabilities"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Disabilities (Optional)</FormLabel>
                        <FormControl>
                          <Textarea placeholder="e.g., None, or specify" {...field} value={field.value ?? ''}/>
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="healthConditions"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Known Health Conditions (Optional)</FormLabel>
                        <FormControl>
                          <Textarea placeholder="e.g., Asthma, or specify" {...field} value={field.value ?? ''} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="classId"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Assign to Class</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value}>
                            <FormControl>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select a class" />
                                </SelectTrigger>
                            </FormControl>
                            <SelectContent>
                                {mySchoolClasses.map(c => <SelectItem key={c.id} value={c.id}>{c.name}</SelectItem>)}
                            </SelectContent>
                        </Select>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                    <div className="space-y-2">
                        <FormLabel>Student Photograph</FormLabel>
                        <Card className="p-2">
                            {capturedImage ? (
                                <div className="relative">
                                    <Image src={capturedImage} alt="Captured student" width={400} height={300} className="rounded-md" />
                                    <Button variant="outline" size="sm" className="absolute top-2 right-2" onClick={() => setCapturedImage(null)}>Retake</Button>
                                </div>
                            ) : (
                                <>
                                    <div className="relative bg-muted rounded-md flex items-center justify-center">
                                       <video ref={videoRef} className="w-full aspect-video rounded-md" autoPlay muted playsInline />
                                       {hasCameraPermission === false && (
                                            <div className="absolute inset-0 flex flex-col items-center justify-center text-center p-4 bg-background/80">
                                                <Video className="h-8 w-8 text-muted-foreground mb-2" />
                                                <p className="text-sm text-muted-foreground">Camera not available or permission denied.</p>
                                            </div>
                                       )}
                                    </div>
                                    <Button type="button" onClick={handleCapture} disabled={!hasCameraPermission} className="w-full mt-2">
                                        <Camera className="mr-2 h-4 w-4" />
                                        Capture Photo
                                    </Button>
                                </>
                            )}
                            <canvas ref={canvasRef} className="hidden" />
                        </Card>
                    </div>

                  {isSubmitting && <p className="text-sm text-destructive">Submitting...</p>}
                  <div className="flex flex-col gap-2 pt-4">
                    <Button type="submit" className="w-full" disabled={isSubmitting}>
                        {isSubmitting ? <Loader2 className="animate-spin" /> : editingStudent ? <Edit className="mr-2 h-4 w-4" /> : <PlusCircle className="mr-2 h-4 w-4" />}
                        {editingStudent ? 'Update Student' : user?.role === 'Admin' ? 'Add Student' : 'Submit for Approval'}
                    </Button>
                    {editingStudent && (
                        <Button type="button" variant="outline" className="w-full" onClick={handleCancelEdit}>
                            Cancel Edit
                        </Button>
                    )}
                  </div>
                </form>
              </Form>
                </div>
              </ScrollArea>
            </CardContent>
          </Card>
        </div>

        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="font-headline">Enrolled Students</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Student</TableHead>
                    <TableHead>Class</TableHead>
                    <TableHead>Email</TableHead>
                    {user?.role === 'Admin' && <TableHead className="text-right">Actions</TableHead>}
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {enrolledStudents.map((student) => (
                    <TableRow key={student.regNo}>
                      <TableCell>
                        <div className="flex items-center gap-3">
                          <Avatar className="h-9 w-9">
                            <AvatarImage src={student.avatar} alt={student.name} data-ai-hint="person" />
                            <AvatarFallback>{student.name.charAt(0)}</AvatarFallback>
                          </Avatar>
                          <div>
                            <p className="font-medium">{student.name}</p>
                            <p className="text-xs text-muted-foreground">{student.regNo}</p>
                          </div>
                        </div>
                      </TableCell>
                      <TableCell>{schoolClasses.find(c => c.id === student.classId)?.name}</TableCell>
                      <TableCell>{student.email}</TableCell>
                      {user?.role === 'Admin' && (
                        <TableCell className="text-right space-x-2">
                           <Button variant="outline" size="icon" className="h-8 w-8" onClick={() => handleEditClick(student)}>
                            <Edit className="h-4 w-4" />
                            <span className="sr-only">Edit</span>
                          </Button>
                          <Button variant="ghost" size="icon" className="h-8 w-8 text-destructive" onClick={() => handleRemoveStudent(student.regNo)}>
                            <Trash2 className="h-4 w-4" />
                            <span className="sr-only">Remove</span>
                          </Button>
                        </TableCell>
                      )}
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
`,
    "src/app/dashboard/finance/page.tsx": `// src/app/dashboard/finance/page.tsx
"use client";

import { useState, useMemo, useEffect, useRef } from "react";
import { useUser } from "@/context/user-context";
import { Student, FeeItem, PaymentConfirmation } from "@/lib/data";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { DollarSign, PlusCircle, Landmark, Upload, CheckCircle, XCircle, AlertCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { ScrollArea } from "@/components/ui/scroll-area";
import Link from "next/link";
import Image from "next/image";


const PaymentForm = ({ student, onPaymentSuccess, onReceiptSubmit }: { student: Student, onPaymentSuccess: (regNo: string, amount: number, method: string, paidItems: FeeItem[]) => void, onReceiptSubmit: (confirmation: PaymentConfirmation) => void }) => {
    const { user, feeStructure, bankAccounts, schoolClasses } = useUser();
    const { toast } = useToast();
    
    const [selectedItems, setSelectedItems] = useState<FeeItem[]>([]);
    const [paymentMethod, setPaymentMethod] = useState('');
    const [uploadedReceipt, setUploadedReceipt] = useState<File | null>(null);
    const fileInputRef = useRef<HTMLInputElement>(null);
    
    const studentClassCategory = useMemo(() => {
        const studentClass = schoolClasses.find(c => c.id === student.classId);
        return studentClass?.category;
    }, [student.classId, schoolClasses]);

    const relevantFeeStructure = useMemo(() => {
        if (!studentClassCategory || !feeStructure) return [];
        return feeStructure[studentClassCategory] || [];
    }, [studentClassCategory, feeStructure]);


    const getBalanceForItem = (item: FeeItem) => {
        const paidAmount = student.fees?.paidItems?.find(p => p.name === item.name)?.amount || 0;
        return item.amount - paidAmount;
    }

    const paymentAmount = useMemo(() => {
        return selectedItems.reduce((total, item) => total + getBalanceForItem(item), 0);
    }, [selectedItems, student.fees]);

     useEffect(() => {
        // Pre-select items that have outstanding balances
        const itemsToSelect = relevantFeeStructure.filter(item => getBalanceForItem(item) > 0);
        setSelectedItems(itemsToSelect);
    }, [student.fees, relevantFeeStructure]);

    const handleItemToggle = (item: FeeItem) => {
        setSelectedItems(prev => {
            const isSelected = prev.some(i => i.name === item.name);
            if (isSelected) {
                return prev.filter(i => i.name !== item.name);
            } else {
                return [...prev, item];
            }
        });
    }

    const handleAdminPayment = () => {
        if (paymentAmount <= 0) {
            toast({ variant: 'destructive', title: 'Invalid Amount', description: 'Please select items to pay for.' });
            return;
        }
        if (!paymentMethod) {
            toast({ variant: 'destructive', title: 'Payment Method Required', description: 'Please select a payment method.' });
            return;
        }
        
        onPaymentSuccess(student.regNo, paymentAmount, paymentMethod, selectedItems);
        setSelectedItems([]);
        setPaymentMethod('');
    }
    
    const handleReceiptSubmit = () => {
        if (!uploadedReceipt) {
            toast({ variant: 'destructive', title: 'Receipt Required', description: 'Please upload a payment receipt.' });
            return;
        }
        if (paymentAmount <= 0) {
            toast({ variant: 'destructive', title: 'Invalid Amount', description: 'Please select items to submit a receipt for.' });
            return;
        }
        
        const confirmation: PaymentConfirmation = {
            id: \`confirm-\${Date.now()}\`,
            studentRegNo: student.regNo,
            studentName: student.name,
            amount: paymentAmount,
            paidItems: selectedItems,
            paymentMethod,
            receiptUrl: URL.createObjectURL(uploadedReceipt), // In a real app, upload this to storage
            date: new Date().toISOString()
        }
        onReceiptSubmit(confirmation);
        toast({ title: 'Receipt Submitted', description: 'Your payment is pending confirmation from the admin.' });
    };

    const tuitionAccount = bankAccounts.find(acc => acc.type === 'Tuition');
    const materialsAccount = bankAccounts.find(acc => acc.type === 'Materials');

    return (
        <DialogContent className="sm:max-w-md">
            <DialogHeader>
                <DialogTitle>Record Payment for {student.name}</DialogTitle>
            </DialogHeader>
            <ScrollArea className="max-h-[70vh]">
            <div className="space-y-4 py-4 px-1 pr-4">
                 <div className="text-sm space-y-2 rounded-lg border p-4">
                    <p className="flex justify-between font-semibold text-lg"><span>Outstanding Balance:</span> <span className="font-mono">{student.fees?.balance.toLocaleString()}</span></p>
                    <hr/>
                    <p className="flex justify-between"><span>Payment ID:</span> <span className="font-mono">{student.fees?.paymentId}</span></p>
                    <hr />
                    <p className="flex justify-between font-semibold"><span>Total Fees:</span> <span className="font-mono">{student.fees?.totalFees.toLocaleString()}</span></p>
                    <p className="flex justify-between"><span>Amount Paid:</span> <span className="font-mono">{student.fees?.amountPaid.toLocaleString()}</span></p>
                </div>
                
                <div className="space-y-2">
                    <Label>Select Items to Pay For</Label>
                    <div className="space-y-2 rounded-md border p-4">
                        {relevantFeeStructure.map(item => {
                            const balance = getBalanceForItem(item);
                            return (
                                <div className="flex items-center justify-between" key={item.name}>
                                    <div className="flex items-center space-x-2">
                                        <Checkbox 
                                            id={item.name}
                                            onCheckedChange={() => handleItemToggle(item)} 
                                            checked={selectedItems.some(i => i.name === item.name)}
                                            disabled={balance <= 0}
                                        />
                                        <Label htmlFor={item.name} className="font-medium">{item.name}</Label>
                                    </div>
                                    <span className="font-mono">{balance.toLocaleString()}</span>
                                </div>
                            )
                        })}
                    </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                        <Label htmlFor="amount">Payment Amount</Label>
                        <Input id="amount" type="text" value={paymentAmount.toLocaleString()} readOnly className="font-bold font-mono" />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="paymentMethod">Payment Method</Label>
                         <Select onValueChange={setPaymentMethod} value={paymentMethod}>
                            <SelectTrigger id="paymentMethod">
                                <SelectValue placeholder="Select Method" />
                            </SelectTrigger>
                            <SelectContent>
                                 <SelectItem value="Cash">Cash</SelectItem>
                                 <SelectItem value="POS">POS</SelectItem>
                                 <SelectItem value="Bank Transfer">Bank Transfer</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>
                </div>
                
                 {paymentMethod === 'Bank Transfer' && (
                    <Card className="mt-4 bg-blue-500/10 border-blue-500/20">
                        <CardHeader className="p-4">
                            <CardTitle className="text-base font-headline flex items-center gap-2 text-blue-800 dark:text-blue-300">
                                <Landmark className="h-5 w-5" /> Bank Account Details
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="p-4 pt-0 text-sm text-blue-700 dark:text-blue-300 space-y-3">
                           {tuitionAccount && (
                             <div>
                                <p className="font-semibold">{tuitionAccount.accountName} (For Tuition)</p>
                                <p><strong>Bank:</strong> {tuitionAccount.bankName}</p>
                                <p><strong>Account Number:</strong> {tuitionAccount.accountNumber}</p>
                            </div>
                           )}
                           {materialsAccount && (
                             <div>
                                <p className="font-semibold">{materialsAccount.accountName} (For Materials)</p>
                                <p><strong>Bank:</strong> {materialsAccount.bankName}</p>
                                <p><strong>Account Number:</strong> {materialsAccount.accountNumber}</p>
                            </div>
                           )}
                        </CardContent>
                    </Card>
                 )}
                 
                 {user?.role !== 'Admin' && paymentMethod === 'Bank Transfer' && (
                    <div className="space-y-2 mt-4">
                        <Label>Upload Receipt</Label>
                        <Input
                            type="file"
                            ref={fileInputRef}
                            onChange={(e) => setUploadedReceipt(e.target.files?.[0] || null)}
                            accept="image/png, image/jpeg, application/pdf"
                            className="hidden"
                        />
                         <Button type="button" variant="outline" onClick={() => fileInputRef.current?.click()} className="w-full">
                            <Upload className="mr-2"/>
                            {uploadedReceipt ? uploadedReceipt.name : "Choose File"}
                         </Button>
                    </div>
                 )}
            </div>
            </ScrollArea>
            <DialogFooter className="pt-4 border-t">
                 <DialogClose asChild>
                    <Button type="button" variant="secondary">Cancel</Button>
                </DialogClose>
                 {user?.role === 'Admin' ? (
                     <DialogClose asChild>
                        <Button onClick={handleAdminPayment}><PlusCircle className="mr-2" /> Record Payment</Button>
                    </DialogClose>
                 ) : (
                    <DialogClose asChild>
                        <Button onClick={handleReceiptSubmit} disabled={paymentAmount <= 0 || !uploadedReceipt}>
                           <Upload className="mr-2" /> Submit for Confirmation
                        </Button>
                    </DialogClose>
                 )}
            </DialogFooter>
        </DialogContent>
    )
}

export default function FinancePage() {
    const { user, students, setStudents, paymentConfirmations, setPaymentConfirmations } = useUser();
    const { toast } = useToast();

    const handlePaymentSuccess = (regNo: string, amount: number, method: string, paidItems: FeeItem[]) => {
        setStudents(prevStudents => prevStudents.map(s => {
            if (s.regNo === regNo && s.fees) {
                const newAmountPaid = s.fees.amountPaid + amount;
                const newBalance = s.fees.totalFees - newAmountPaid;
                const newStatus: "Paid" | "Owing" | "Part-payment" = newBalance <= 0 ? "Paid" : "Part-payment";
                
                const updatedPaidItems = [...(s.fees.paidItems || [])];
                paidItems.forEach(paidItem => {
                    const existingPaid = updatedPaidItems.find(p => p.name === paidItem.name);
                    const balanceForItem = getBalanceForItem(paidItem, s.fees?.paidItems || []);
                    
                    if (existingPaid) {
                        existingPaid.amount += balanceForItem;
                    } else {
                        updatedPaidItems.push({ name: paidItem.name, amount: balanceForItem });
                    }
                });

                return {
                    ...s,
                    fees: {
                        ...s.fees,
                        amountPaid: newAmountPaid,
                        balance: newBalance,
                        status: newStatus,
                        paidItems: updatedPaidItems,
                    }
                }
            }
            return s;
        }));
        toast({
            title: "Payment Recorded",
            description: \`Successfully recorded a payment of \${amount.toLocaleString()} for student \${regNo} via \${method}.\`
        })
    };
    
    const handleReceiptSubmit = (confirmation: PaymentConfirmation) => {
        setPaymentConfirmations(prev => [confirmation, ...prev]);
    };
    
    const handleApproveConfirmation = (confirmationId: string) => {
        const confirmation = paymentConfirmations.find(c => c.id === confirmationId);
        if (!confirmation) return;
        
        handlePaymentSuccess(confirmation.studentRegNo, confirmation.amount, confirmation.paymentMethod, confirmation.paidItems);
        setPaymentConfirmations(prev => prev.filter(c => c.id !== confirmationId));
        toast({ title: 'Payment Approved', description: \`Payment for \${confirmation.studentName} has been confirmed.\` });
    };

    const handleRejectConfirmation = (confirmationId: string) => {
        setPaymentConfirmations(prev => prev.filter(c => c.id !== confirmationId));
        toast({ variant: 'destructive', title: 'Payment Rejected', description: 'The payment confirmation has been rejected and removed.' });
    };

    const getBalanceForItem = (item: FeeItem, paidItems: FeeItem[]) => {
        const paidAmount = paidItems.find(p => p.name === item.name)?.amount || 0;
        return item.amount - paidAmount;
    };

    if (!user) return null;
    const isUserAllowed = user.role === 'Admin' || user.role === 'Student' || user.role === 'Parent';
    const isChiefAdmin = user.isChiefAdmin;
    
    const displayedStudents = isUserAllowed ? (user.role === 'Admin' ? students : students.filter(s => s.regNo === user.regNo)) : [];

    return (
        <div className="space-y-8">
            <div className="flex items-center justify-between">
                <div>
                    <h1 className="text-3xl font-bold font-headline tracking-tight">Finance</h1>
                    <p className="text-muted-foreground">
                        Manage student fee payments and financial records.
                    </p>
                </div>
                {isChiefAdmin && (
                    <Button asChild>
                        <Link href="/dashboard/finance/settings">Finance Settings</Link>
                    </Button>
                )}
            </div>

            {user.role === 'Admin' && paymentConfirmations.length > 0 && (
                 <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2"><AlertCircle className="text-yellow-500" /> Pending Payment Confirmations</CardTitle>
                        <CardDescription>Review and approve payments submitted by parents/students.</CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Table>
                             <TableHeader>
                                <TableRow>
                                    <TableHead>Student</TableHead>
                                    <TableHead>Amount</TableHead>
                                    <TableHead>Receipt</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {paymentConfirmations.map(conf => (
                                    <TableRow key={conf.id}>
                                        <TableCell>{conf.studentName} ({conf.studentRegNo})</TableCell>
                                        <TableCell className="font-mono">{conf.amount.toLocaleString()}</TableCell>
                                        <TableCell>
                                            <a href={conf.receiptUrl} target="_blank" rel="noopener noreferrer">
                                                <Image src={conf.receiptUrl} alt="Receipt" width={40} height={40} className="rounded-md object-cover" />
                                            </a>
                                        </TableCell>
                                        <TableCell className="text-right space-x-2">
                                            <Button size="sm" variant="outline" className="text-green-600 border-green-600 hover:bg-green-50 hover:text-green-700" onClick={() => handleApproveConfirmation(conf.id)}><CheckCircle className="mr-2 h-4 w-4" />Approve</Button>
                                            <Button size="sm" variant="destructive" onClick={() => handleRejectConfirmation(conf.id)}><XCircle className="mr-2 h-4 w-4"/>Reject</Button>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </CardContent>
                </Card>
            )}

            <Card>
                <CardHeader>
                    <CardTitle>Student Fee Status</CardTitle>
                </CardHeader>
                <CardContent>
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Student</TableHead>
                                <TableHead>Payment ID</TableHead>
                                <TableHead>Total Fees</TableHead>
                                <TableHead>Balance</TableHead>
                                <TableHead>Status</TableHead>
                                {isUserAllowed && <TableHead className="text-right">Actions</TableHead>}
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {displayedStudents.map(student => (
                                <TableRow key={student.regNo}>
                                    <TableCell>
                                        <div className="flex items-center gap-3">
                                            <Avatar className="h-9 w-9">
                                                <AvatarImage src={student.avatar} alt={student.name} data-ai-hint="person" />
                                                <AvatarFallback>{student.name.charAt(0)}</AvatarFallback>
                                            </Avatar>
                                            <div>
                                                <p className="font-medium">{student.name}</p>
                                                <p className="text-xs text-muted-foreground">{student.regNo}</p>
                                            </div>
                                        </div>
                                    </TableCell>
                                    <TableCell className="font-mono text-xs">{student.fees?.paymentId}</TableCell>
                                    <TableCell className="font-mono">{student.fees?.totalFees.toLocaleString() || 'N/A'}</TableCell>
                                    <TableCell className="font-mono font-semibold">{student.fees?.balance.toLocaleString() || 'N/A'}</TableCell>
                                    <TableCell>
                                        {student.fees?.status && (
                                            <Badge variant={
                                                student.fees.status === 'Paid' ? 'default' :
                                                student.fees.status === 'Owing' ? 'destructive' :
                                                'secondary'
                                            } className="bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300 data-[variant=destructive]:bg-red-100 data-[variant=destructive]:text-red-800 dark:data-[variant=destructive]:bg-red-900/20 dark:data-[variant=destructive]:text-red-300 data-[variant=secondary]:bg-yellow-100 data-[variant=secondary]:text-yellow-800 dark:data-[variant=secondary]:bg-yellow-900/20 dark:data-[variant=secondary]:text-yellow-300">
                                                {student.fees.status}
                                            </Badge>
                                        )}
                                    </TableCell>
                                    {isUserAllowed && (
                                        <TableCell className="text-right">
                                            {student.fees?.status !== 'Paid' && (
                                                <Dialog>
                                                    <DialogTrigger asChild>
                                                        <Button variant="outline" size="sm">
                                                            <DollarSign className="mr-2 h-4 w-4" />
                                                            {user.role === 'Admin' ? 'Record Payment' : 'Make Payment'}
                                                        </Button>
                                                    </DialogTrigger>
                                                    <PaymentForm 
                                                        student={student} 
                                                        onPaymentSuccess={handlePaymentSuccess} 
                                                        onReceiptSubmit={handleReceiptSubmit}
                                                    />
                                                </Dialog>
                                            )}
                                        </TableCell>
                                    )}
                                </TableRow>
                            ))}
                        </TableBody>
                    </Table>
                </CardContent>
            </Card>
        </div>
    )
}
`,
    "src/app/dashboard/finance/settings/page.tsx": `// src/app/dashboard/finance/settings/page.tsx
"use client";

import { useState, useEffect } from 'react';
import { useUser } from '@/context/user-context';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { useToast } from '@/hooks/use-toast';
import { SchoolCategory, FeeItem, BankAccount } from '@/lib/data';
import { Trash2, PlusCircle, Save, Settings, Landmark, ShieldAlert, ArrowLeft } from 'lucide-react';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

export default function FinanceSettingsPage() {
    const { user, feeStructure, setFeeStructure, bankAccounts, setBankAccounts, setStudents } = useUser();
    const router = useRouter();
    const { toast } = useToast();

    const [editableFeeStructure, setEditableFeeStructure] = useState(JSON.parse(JSON.stringify(feeStructure)));
    const [editableBankAccounts, setEditableBankAccounts] = useState(JSON.parse(JSON.stringify(bankAccounts)));
    const [isDirty, setIsDirty] = useState(false);
    
    useEffect(() => {
        if (!user || !user.isChiefAdmin) {
            router.push('/dashboard/finance');
        }
    }, [user, router]);
    
    if (!user || !user.isChiefAdmin) {
        return null;
    }

    const handleFeeItemChange = (category: SchoolCategory, index: number, field: 'name' | 'amount', value: string) => {
        const newStructure = { ...editableFeeStructure };
        if (field === 'amount') {
            newStructure[category][index][field] = Number(value) || 0;
        } else {
            newStructure[category][index][field] = value;
        }
        setEditableFeeStructure(newStructure);
        setIsDirty(true);
    };

    const handleAddFeeItem = (category: SchoolCategory) => {
        const newStructure = { ...editableFeeStructure };
        newStructure[category].push({ name: '', amount: 0 });
        setEditableFeeStructure(newStructure);
        setIsDirty(true);
    };

    const handleRemoveFeeItem = (category: SchoolCategory, index: number) => {
        const newStructure = { ...editableFeeStructure };
        newStructure[category].splice(index, 1);
        setEditableFeeStructure(newStructure);
        setIsDirty(true);
    };

    const handleBankAccountChange = (index: number, field: keyof BankAccount, value: string) => {
        const newAccounts = [...editableBankAccounts];
        newAccounts[index] = { ...newAccounts[index], [field]: value };
        setEditableBankAccounts(newAccounts);
        setIsDirty(true);
    };

     const handleAddBankAccount = () => {
        setEditableBankAccounts([...editableBankAccounts, { type: 'General', bankName: '', accountName: '', accountNumber: '' }]);
        setIsDirty(true);
    };

    const handleRemoveBankAccount = (index: number) => {
        const newAccounts = [...editableBankAccounts];
        newAccounts.splice(index, 1);
        setEditableBankAccounts(newAccounts);
        setIsDirty(true);
    };

    const handleSaveChanges = () => {
        setFeeStructure(editableFeeStructure);
        setBankAccounts(editableBankAccounts);
        
        // This is a complex operation. In a real app, this would be a backend job.
        // Here, we simulate updating all students' fee details based on their class category.
        setStudents(prevStudents => {
            return prevStudents.map(student => {
                const classCategory = student.classId?.replace(/\\d+/g, '').replace(/[^a-zA-Z]/g, '');
                let structureKey: SchoolCategory | undefined;

                if (classCategory) {
                    if (['ss'].includes(classCategory)) structureKey = 'highSchool';
                    else if (['basic'].includes(classCategory)) structureKey = 'upperBasic';
                    else if (['nur'].includes(classCategory)) structureKey = 'nursery';
                }

                if (structureKey) {
                    const structure = editableFeeStructure[structureKey];
                    const totalFees = structure.reduce((acc, item) => acc + item.amount, 0);
                    const amountPaid = student.fees?.amountPaid || 0;
                    const balance = totalFees - amountPaid;
                    const status = balance <= 0 ? 'Paid' : (amountPaid > 0 ? 'Part-payment' : 'Owing');
                    
                    return {
                        ...student,
                        fees: {
                            ...(student.fees || { paymentId: \`PAY-\${student.regNo}\`, paidItems: [] }),
                            totalFees,
                            amountPaid,
                            balance,
                            status,
                        }
                    };
                }
                return student;
            });
        });

        toast({ title: 'Settings Saved', description: 'Finance settings have been updated successfully.' });
        setIsDirty(false);
    };

    return (
        <div className="space-y-8">
            <div className="flex items-center gap-4">
                <Button variant="outline" size="icon" onClick={() => router.back()}><ArrowLeft /></Button>
                <div>
                    <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2"><Settings /> Finance Settings</h1>
                    <p className="text-muted-foreground">Manage school-wide fee structures and designated bank accounts.</p>
                </div>
            </div>
            
            <Alert variant="destructive">
                <ShieldAlert className="h-4 w-4" />
                <AlertTitle>Chief Admin Area</AlertTitle>
                <AlertDescription>
                   Changes made on this page affect all students' fee calculations. Please be careful.
                </AlertDescription>
            </Alert>

            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                <Card>
                    <CardHeader>
                        <CardTitle>Fee Structures by Category</CardTitle>
                        <CardDescription>Define the required fees for each school section.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-6">
                        {(Object.keys(editableFeeStructure) as SchoolCategory[]).map(category => (
                            <div key={category} className="p-4 border rounded-lg">
                                <h3 className="font-semibold capitalize font-headline">{category.replace('highSchool', 'High School').replace('upperBasic', 'Upper Basic')}</h3>
                                <div className="space-y-2 mt-2">
                                    {editableFeeStructure[category].map((item: FeeItem, index: number) => (
                                        <div key={index} className="flex items-center gap-2">
                                            <Input 
                                                placeholder="Item Name (e.g., Tuition)" 
                                                value={item.name}
                                                onChange={(e) => handleFeeItemChange(category, index, 'name', e.target.value)}
                                            />
                                            <Input 
                                                type="number" 
                                                placeholder="Amount" 
                                                value={item.amount}
                                                onChange={(e) => handleFeeItemChange(category, index, 'amount', e.target.value)}
                                                className="w-32"
                                            />
                                            <Button variant="ghost" size="icon" onClick={() => handleRemoveFeeItem(category, index)}><Trash2 className="h-4 w-4 text-destructive"/></Button>
                                        </div>
                                    ))}
                                </div>
                                <Button size="sm" variant="outline" className="mt-4" onClick={() => handleAddFeeItem(category)}><PlusCircle className="mr-2"/>Add Item</Button>
                            </div>
                        ))}
                    </CardContent>
                </Card>

                 <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2"><Landmark/> Designated Bank Accounts</CardTitle>
                        <CardDescription>Manage the bank accounts for receiving payments.</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div className="space-y-2">
                            {editableBankAccounts.map((account: BankAccount, index: number) => (
                                <div key={index} className="p-3 border rounded-lg space-y-2 relative">
                                     <Button variant="ghost" size="icon" className="absolute top-1 right-1 h-7 w-7" onClick={() => handleRemoveBankAccount(index)}><Trash2 className="h-4 w-4 text-destructive"/></Button>
                                     <div className="grid grid-cols-2 gap-2">
                                        <Input placeholder="Bank Name" value={account.bankName} onChange={(e) => handleBankAccountChange(index, 'bankName', e.target.value)} />
                                        <Select value={account.type} onValueChange={(value) => handleBankAccountChange(index, 'type', value)}>
                                            <SelectTrigger><SelectValue/></SelectTrigger>
                                            <SelectContent>
                                                <SelectItem value="Tuition">Tuition Account</SelectItem>
                                                <SelectItem value="Materials">Materials Account</SelectItem>
                                                <SelectItem value="General">General Account</SelectItem>
                                            </SelectContent>
                                        </Select>
                                     </div>
                                     <Input placeholder="Account Name" value={account.accountName} onChange={(e) => handleBankAccountChange(index, 'accountName', e.target.value)} />
                                     <Input placeholder="Account Number" value={account.accountNumber} onChange={(e) => handleBankAccountChange(index, 'accountNumber', e.target.value)} />
                                </div>
                            ))}
                        </div>
                        <Button size="sm" variant="outline" className="w-full" onClick={handleAddBankAccount}><PlusCircle className="mr-2"/>Add Bank Account</Button>
                    </CardContent>
                </Card>
            </div>

            {isDirty && (
                <div className="sticky bottom-4 z-50 flex justify-end">
                    <Card className="p-2 border-primary/50 bg-background shadow-lg">
                        <div className="flex items-center gap-4">
                            <p className="text-sm font-semibold text-primary">You have unsaved changes.</p>
                            <Button onClick={handleSaveChanges}><Save className="mr-2"/>Save All Changes</Button>
                        </div>
                    </Card>
                </div>
            )}
        </div>
    );
}
`,
    "src/app/dashboard/id-card/page.tsx": `// src/app/dashboard/id-card/page.tsx
"use client";

import { useUser } from "@/context/user-context";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { Card, CardContent } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Icons } from "@/components/icons";
import { useEffect } from "react";

export default function IdCardPage() {
  const { user, schoolClasses } = useUser();
  const router = useRouter();

  useEffect(() => {
    if (!user || user.role !== "Student") {
      router.push("/dashboard");
    }
  }, [user, router]);
  
  if (!user || user.role !== "Student") {
    return null;
  }
  
  const studentClass = schoolClasses.find(c => c.id === user.classId);

  return (
    <div className="space-y-8">
       <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight">Digital ID Card</h1>
        <p className="text-muted-foreground">
          Your official student identification card.
        </p>
      </div>

      <div className="max-w-sm mx-auto">
        <Card className="rounded-2xl shadow-lg overflow-hidden border-2 border-primary/20">
            <CardContent className="p-0">
                <div className="bg-primary/10 p-6 relative">
                    <div className="absolute top-4 right-4">
                        <Icons.Logo className="h-10 w-10" />
                    </div>
                    <div className="flex flex-col items-center pt-8">
                        <Avatar className="h-32 w-32 border-4 border-white shadow-md">
                            <AvatarImage src={user.avatar} alt={user.name} data-ai-hint="person" />
                            <AvatarFallback className="text-4xl">{user.name?.charAt(0)}</AvatarFallback>
                        </Avatar>
                        <h2 className="text-2xl font-bold font-headline mt-4">{user.name}</h2>
                        <p className="text-muted-foreground">{user.regNo}</p>
                    </div>
                </div>
                <div className="p-6 space-y-6">
                    <div className="flex justify-between items-center">
                        <div className="text-center">
                            <p className="text-xs text-muted-foreground">Class</p>
                            <p className="font-semibold">{studentClass?.name || 'N/A'}</p>
                        </div>
                        <div className="text-center">
                            <p className="text-xs text-muted-foreground">Expires</p>
                            <p className="font-semibold">08/2025</p>
                        </div>
                         <div className="text-center">
                            <p className="text-xs text-muted-foreground">D.O.B</p>
                            <p className="font-semibold">{user.dob ? new Date(user.dob).toLocaleDateString() : 'N/A'}</p>
                        </div>
                    </div>
                     <div className="flex items-center justify-center pt-4 border-t">
                        <Image
                            src={\`https://api.qrserver.com/v1/create-qr-code/?size=150x150&data=\${user.regNo}\`}
                            alt="Student QR Code"
                            width={150}
                            height={150}
                            data-ai-hint="qr code"
                        />
                    </div>
                </div>
                 <div className="bg-primary text-primary-foreground text-center p-2 font-bold text-sm">
                    STUDENT
                </div>
            </CardContent>
        </Card>
      </div>

    </div>
  );
}
`,
    "src/app/dashboard/layout.tsx": `// src/app/dashboard/layout.tsx
'use client';

import { useEffect, type ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import { useUser } from '@/context/user-context';
import { SidebarProvider, SidebarInset } from '@/components/ui/sidebar';
import { AppSidebar } from '@/components/layout/sidebar';
import { Header } from '@/components/layout/header';
import { Footer } from '@/components/layout/footer';
import { Loader2 } from 'lucide-react';
import { CommandMenu } from '@/components/layout/command-menu';

export default function DashboardLayout({ children }: { children: ReactNode }) {
  const { user, isGlobalLoading } = useUser();
  const router = useRouter();

  useEffect(() => {
    if (!isGlobalLoading && !user) {
      router.push('/');
    }
  }, [user, isGlobalLoading, router]);

  if (isGlobalLoading || !user) {
    return (
      <div className="flex h-screen w-full items-center justify-center">
        <div className="flex flex-col items-center gap-4">
            <Loader2 className="h-12 w-12 animate-spin text-primary" />
            <p className="text-muted-foreground">Loading school data...</p>
        </div>
      </div>
    );
  }

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <div className="flex min-h-screen flex-col">
            <Header />
            <CommandMenu />
            <main className="flex-1 p-4 sm:p-6 md:p-8">
                {children}
            </main>
            <Footer />
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}
`,
    "src/app/dashboard/lesson-plan/page.tsx": `// src/app/dashboard/lesson-plan/page.tsx
'use client';

import { useState, useMemo, useEffect } from 'react';
import { useUser } from '@/context/user-context';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ClipboardList, Sparkles, Loader2, BookOpen, Youtube, Link as LinkIcon, Send, BookCopy } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { generateLessonPlan, type GenerateLessonPlanOutput } from '@/ai/flows/generate-lesson-plan-flow';
import MarkdownRenderer from '@/components/markdown-renderer';
import type { LearningMaterial } from '@/lib/data';

const lessonPlanSchema = z.object({
  subject: z.string().min(1, 'Please select a subject.'),
  classId: z.string().min(1, 'Please select a class.'),
  topic: z.string().min(3, 'Topic must be at least 3 characters long.'),
  week: z.coerce.number().min(1, 'Week number must be at least 1.').max(15, 'Week number cannot exceed 15.'),
  objectives: z.string().optional(),
});

type LessonPlanFormValues = z.infer<typeof lessonPlanSchema>;

const DRAFT_STORAGE_KEY = 'lesson-plan-draft';

export default function LessonPlanPage() {
  const { user, schoolClasses, subjects, setLearningMaterials } = useUser();
  const { toast } = useToast();
  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedContent, setGeneratedContent] = useState<GenerateLessonPlanOutput | null>(null);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isNotePosted, setIsNotePosted] = useState(false);

  const form = useForm<LessonPlanFormValues>({
    resolver: zodResolver(lessonPlanSchema),
    defaultValues: {
      topic: '',
      week: 1,
      objectives: '',
    },
  });

  // Load draft from localStorage on mount
  useEffect(() => {
    const savedDraft = localStorage.getItem(DRAFT_STORAGE_KEY);
    if (savedDraft) {
      try {
        const draftData = JSON.parse(savedDraft);
        form.reset(draftData);
      } catch (e) {
        console.error("Failed to parse lesson plan draft", e);
        localStorage.removeItem(DRAFT_STORAGE_KEY);
      }
    }
  }, [form]);

  // Save form data to localStorage on change
  useEffect(() => {
    const subscription = form.watch((value) => {
      localStorage.setItem(DRAFT_STORAGE_KEY, JSON.stringify(value));
    });
    return () => subscription.unsubscribe();
  }, [form.watch, form]);
  
  const selectedClassId = form.watch('classId');

  const availableSubjects = useMemo(() => {
    if (!selectedClassId) return [];
    const selectedClass = schoolClasses.find(c => c.id === selectedClassId);
    if (!selectedClass || !selectedClass.offeredSubjects) return [];
    return subjects.filter(s => selectedClass.offeredSubjects?.includes(s.id));
  }, [selectedClassId, schoolClasses, subjects]);

  const onSubmit = async (data: LessonPlanFormValues) => {
    setIsGenerating(true);
    setGeneratedContent(null);
    setIsSubmitted(false);
    setIsNotePosted(false);
    try {
      const result = await generateLessonPlan({
        ...data,
        className: schoolClasses.find(c => c.id === data.classId)?.name || '',
      });
      setGeneratedContent(result);
      toast({
        title: 'Generation Complete',
        description: 'Your lesson plan and note have been generated successfully.',
      });
      localStorage.removeItem(DRAFT_STORAGE_KEY); // Clear draft after successful generation
    } catch (error) {
      console.error('Lesson plan generation failed:', error);
      toast({
        variant: 'destructive',
        title: 'Generation Failed',
        description: 'The AI could not generate the lesson plan. Please try again.',
      });
    } finally {
      setIsGenerating(false);
    }
  };
  
  const handleSubmitToAdmin = () => {
    // In a real app, this would send the 'generatedContent' to a backend.
    // For this demo, we'll just simulate the submission.
    setIsSubmitted(true);
    toast({
        title: "Lesson Plan Submitted",
        description: "Your lesson plan has been sent to the administration for review."
    });
  }

  const handlePostNoteToStudents = () => {
    if (!generatedContent || !user) return;
    
    const newMaterial: LearningMaterial = {
      id: \`mat-\${Date.now()}\`,
      title: \`Lesson Note: \${generatedContent.topic}\`,
      subject: form.getValues('subject'),
      classId: form.getValues('classId'),
      type: 'document',
      content: generatedContent.lessonNote,
      uploadedBy: user.name,
      date: new Date().toISOString(),
      schoolId: user.schoolId!,
    };

    setLearningMaterials(prev => [newMaterial, ...prev]);
    setIsNotePosted(true);
    toast({
        title: "Note Posted",
        description: \`The lesson note for "\${generatedContent.topic}" is now available to students.\`
    });
  };

  if (!user || (user.role !== 'Admin' && user.role !== 'Staff')) {
    // Redirect or show access denied message
    return (
      <Card>
        <CardHeader>
          <CardTitle>Access Denied</CardTitle>
        </CardHeader>
        <CardContent>
          <p>You do not have permission to view this page.</p>
        </CardContent>
      </Card>
    );
  }

  const mySchoolClasses = schoolClasses.filter(c => c.schoolId === user?.schoolId);

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2">
          <ClipboardList /> AI Lesson Plan Generator
        </h1>
        <p className="text-muted-foreground">
          Generate weekly lesson plans and detailed notes for your classes.
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <div className="lg:col-span-1">
          <Card>
            <CardHeader>
              <CardTitle className="font-headline">Lesson Details</CardTitle>
              <CardDescription>Provide the details for the lesson you want to plan.</CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...form}>
                <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                   <FormField control={form.control} name="classId" render={({ field }) => (
                    <FormItem><FormLabel>Class</FormLabel>
                        <Select onValueChange={(value) => {
                            field.onChange(value);
                            form.setValue('subject', ''); // Reset subject when class changes
                        }} value={field.value}>
                            <FormControl><SelectTrigger><SelectValue placeholder="Select Class" /></SelectTrigger></FormControl>
                            <SelectContent>{mySchoolClasses.map(s => <SelectItem key={s.id} value={s.id}>{s.name}</SelectItem>)}</SelectContent>
                        </Select><FormMessage />
                    </FormItem>
                  )}/>
                   <FormField control={form.control} name="subject" render={({ field }) => (
                    <FormItem><FormLabel>Subject</FormLabel>
                        <Select onValueChange={field.onChange} value={field.value} disabled={!selectedClassId || availableSubjects.length === 0}>
                            <FormControl><SelectTrigger><SelectValue placeholder={!selectedClassId ? "Select a class first" : "Select Subject"} /></SelectTrigger></FormControl>
                            <SelectContent>{availableSubjects.map(s => <SelectItem key={s.id} value={s.name}>{s.name}</SelectItem>)}</SelectContent>
                        </Select><FormMessage />
                    </FormItem>
                  )}/>
                  <FormField control={form.control} name="week" render={({ field }) => (
                    <FormItem><FormLabel>Week</FormLabel><FormControl><Input type="number" min="1" max="15" placeholder="e.g., 1" {...field} /></FormControl><FormMessage /></FormItem>
                  )}/>
                  <FormField control={form.control} name="topic" render={({ field }) => (
                    <FormItem><FormLabel>Topic</FormLabel><FormControl><Input placeholder="e.g., The Solar System" {...field} /></FormControl><FormMessage /></FormItem>
                  )}/>
                  <FormField control={form.control} name="objectives" render={({ field }) => (
                    <FormItem><FormLabel>Learning Objectives (Optional)</FormLabel><FormControl><Textarea placeholder="e.g., By the end of the lesson, students should be able to list the planets..." {...field} /></FormControl><FormMessage /></FormItem>
                  )}/>
                  <Button type="submit" className="w-full" disabled={isGenerating}>
                    {isGenerating ? <Loader2 className="animate-spin" /> : <Sparkles className="mr-2"/>}
                    Generate Lesson Plan
                  </Button>
                </form>
              </Form>
            </CardContent>
          </Card>
        </div>
        <div className="lg:col-span-2">
          <Card className="min-h-[500px]">
            <CardHeader>
              <CardTitle>Generated Content</CardTitle>
              <CardDescription>Your lesson plan and notes will appear here.</CardDescription>
            </CardHeader>
            <CardContent>
              {isGenerating && (
                <div className="flex flex-col items-center justify-center h-64 text-muted-foreground">
                  <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
                  <p>The AI is preparing your lesson plan...</p>
                </div>
              )}
              {generatedContent ? (
                <div className="space-y-6">
                  <div>
                    <h3 className="font-bold text-xl font-headline mb-2">Lesson Plan: {generatedContent.topic}</h3>
                    <div className="p-4 border rounded-lg bg-muted/30">
                        <MarkdownRenderer content={generatedContent.lessonPlan} />
                    </div>
                  </div>
                   <div>
                    <h3 className="font-bold text-xl font-headline mb-2 flex items-center gap-2"><BookOpen /> Lesson Note</h3>
                     <div className="p-4 border rounded-lg bg-muted/30">
                        <MarkdownRenderer content={generatedContent.lessonNote} />
                    </div>
                  </div>
                  <div>
                     <h3 className="font-bold text-xl font-headline mb-2">Suggested Materials</h3>
                     <div className="space-y-3">
                        {generatedContent.suggestedMaterials?.map((material, index) => (
                            <a key={index} href={material.url} target="_blank" rel="noopener noreferrer" className="block p-3 border rounded-lg hover:bg-muted/50 transition-colors">
                                <div className="flex items-center gap-3">
                                    {material.type === 'video' ? <Youtube className="h-5 w-5 text-red-500"/> : <LinkIcon className="h-5 w-5"/>}
                                    <div>
                                        <p className="font-semibold text-primary">{material.title}</p>
                                        <p className="text-xs text-muted-foreground truncate">{material.url}</p>
                                    </div>
                                </div>
                            </a>
                        ))}
                     </div>
                  </div>
                   <div className="pt-6 border-t flex flex-col sm:flex-row gap-2">
                        <Button onClick={handleSubmitToAdmin} disabled={isSubmitted} className="w-full">
                            <Send className="mr-2"/>
                            {isSubmitted ? 'Submitted to Admin' : 'Submit to Admin'}
                        </Button>
                         <Button onClick={handlePostNoteToStudents} disabled={isNotePosted} variant="secondary" className="w-full">
                            <BookCopy className="mr-2"/>
                            {isNotePosted ? 'Note Posted to Students' : 'Post Note to Students'}
                        </Button>
                    </div>
                </div>
              ) : (
                !isGenerating && (
                    <div className="flex flex-col items-center justify-center h-64 text-muted-foreground">
                        <ClipboardList className="h-12 w-12 mb-4" />
                        <p>Fill out the form to generate your content.</p>
                    </div>
                )
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
`,
    "src/app/dashboard/management/page.tsx": `// src/app/dashboard/management/page.tsx
"use client";

import { useUser, type User } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { KeyRound, PlusCircle, ShieldCheck, Trash2, UserPlus } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { useEffect } from "react";

const newAdminSchema = z.object({
  firstName: z.string().min(2, "First name is required."),
  middleName: z.string().optional(),
  surname: z.string().min(2, "Surname is required."),
  username: z.string().min(4, "Username must be at least 4 characters."),
  email: z.string().email("Please enter a valid email address."),
  phoneNo: z.string().min(10, "Phone number must be at least 10 digits."),
});

type NewAdminForm = z.infer<typeof newAdminSchema>;

const changePasswordSchema = z.object({
  currentPassword: z.string().min(1, "Current password is required."),
  newPassword: z.string().min(6, "New password must be at least 6 characters."),
  confirmPassword: z.string(),
}).refine(data => data.newPassword === data.confirmPassword, {
  message: "Passwords do not match.",
  path: ["confirmPassword"],
});

type ChangePasswordForm = z.infer<typeof changePasswordSchema>;

export default function ManagementPage() {
  const { user, setUser, admins, setAdmins } = useUser();
  const router = useRouter();
  const { toast } = useToast();

  const addAdminForm = useForm<NewAdminForm>({
    resolver: zodResolver(newAdminSchema),
    defaultValues: {
      firstName: "",
      middleName: "",
      surname: "",
      username: "",
      email: "",
      phoneNo: "",
    }
  });

  const changePasswordForm = useForm<ChangePasswordForm>({
    resolver: zodResolver(changePasswordSchema),
    defaultValues: {
      currentPassword: "",
      newPassword: "",
      confirmPassword: "",
    }
  });

  useEffect(() => {
    if (!user || user?.role !== "Admin" || !user.isChiefAdmin) {
      router.push("/dashboard");
    }
  }, [user, router]);

  if (!user || user?.role !== "Admin" || !user.isChiefAdmin) {
    return null;
  }

  const schoolAdmins = admins.filter(a => a.schoolId === user.schoolId);

  const handleAddAdmin = (data: NewAdminForm) => {
    if (schoolAdmins.length >= 3) {
      toast({
        variant: "destructive",
        title: "Admin Limit Reached",
        description: "You cannot add more than 3 administrators.",
      });
      return;
    }

    if (admins.some(admin => admin.username === data.username)) {
        addAdminForm.setError("username", { message: "This username is already taken." });
        return;
    }
     if (admins.some(admin => admin.email === data.email)) {
        addAdminForm.setError("email", { message: "This email is already taken." });
        return;
    }

    const newAdmin: User = {
      name: \`\${data.firstName} \${data.surname}\`,
      role: "Admin",
      avatar: \`https://i.pravatar.cc/150?u=\${data.email}\`,
      isChiefAdmin: false,
      ...data,
      password: data.phoneNo, // Phone number as password
      schoolId: user.schoolId,
      schoolName: user.schoolName,
      status: 'Active',
    };
    
    setAdmins(prev => [...prev, newAdmin]);

    toast({
      title: "Admin Added",
      description: \`\${newAdmin.name} has been added as an administrator.\`,
    });
    addAdminForm.reset();
  };

  const handleRemoveAdmin = (email: string) => {
    const adminToRemove = admins.find(a => a.email === email);
    if (adminToRemove?.isChiefAdmin) {
      toast({
        variant: "destructive",
        title: "Action Forbidden",
        description: "The Chief Admin cannot be removed.",
      });
      return;
    }
    if(adminToRemove?.email) {
      setAdmins(prev => prev.filter(a => a.email !== email));
      toast({
        title: "Admin Removed",
        description: \`The administrator '\${adminToRemove.name}' has been removed.\`,
      });
    }
  };

  const handleChangePassword = (data: ChangePasswordForm) => {
    if (!user || data.currentPassword !== user.password) {
        changePasswordForm.setError("currentPassword", { type: 'manual', message: "Incorrect current password."});
        return;
    }
    
    const updatedUser = { ...user, password: data.newPassword };
    
    setAdmins(prevAdmins => prevAdmins.map(admin => admin.email === user.email ? updatedUser : admin));
    setUser(updatedUser);

    toast({
      title: "Password Updated",
      description: "Your password has been changed successfully.",
    });
    changePasswordForm.reset();
  };

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight">User Management</h1>
        <p className="text-muted-foreground">Add or remove administrators and manage your account.</p>
      </div>

      <div className="grid gap-8 lg:grid-cols-3">
        <div className="lg:col-span-1 space-y-8">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 font-headline">
                <UserPlus /> Add New Admin
              </CardTitle>
              <CardDescription>Create a new administrator account.</CardDescription>
            </CardHeader>
            <CardContent>
                {schoolAdmins.length < 3 ? (
                    <Form {...addAdminForm}>
                        <form onSubmit={addAdminForm.handleSubmit(handleAddAdmin)} className="space-y-4">
                            <FormField control={addAdminForm.control} name="firstName" render={({ field }) => (
                                <FormItem><FormLabel>First Name</FormLabel><FormControl><Input placeholder="e.g., John" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                             <FormField control={addAdminForm.control} name="middleName" render={({ field }) => (
                                <FormItem><FormLabel>Middle Name (Optional)</FormLabel><FormControl><Input placeholder="e.g., Fitzgerald" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                            <FormField control={addAdminForm.control} name="surname" render={({ field }) => (
                                <FormItem><FormLabel>Surname</FormLabel><FormControl><Input placeholder="e.g., Doe" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                            <FormField control={addAdminForm.control} name="username" render={({ field }) => (
                                <FormItem><FormLabel>Username (Legacy)</FormLabel><FormControl><Input placeholder="e.g., j.doe" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                            <FormField control={addAdminForm.control} name="email" render={({ field }) => (
                                <FormItem><FormLabel>Email (Login ID)</FormLabel><FormControl><Input type="email" placeholder="e.g., j.doe@school.com" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                            <FormField control={addAdminForm.control} name="phoneNo" render={({ field }) => (
                                <FormItem><FormLabel>Phone Number (as Password)</FormLabel><FormControl><Input type="tel" placeholder="08012345678" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                            <Button type="submit" className="w-full" disabled={addAdminForm.formState.isSubmitting}>
                                <PlusCircle className="mr-2 h-4 w-4" /> Add Administrator
                            </Button>
                        </form>
                    </Form>
                ) : (
                    <Alert>
                        <ShieldCheck className="h-4 w-4" />
                        <AlertTitle>Admin Limit Reached</AlertTitle>
                        <AlertDescription>You have reached the maximum of 3 administrators for your school.</AlertDescription>
                    </Alert>
                )}
            </CardContent>
          </Card>
          
           <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 font-headline">
                <KeyRound /> Change Password
              </CardTitle>
              <CardDescription>Update your own login password.</CardDescription>
            </CardHeader>
            <CardContent>
                 <Form {...changePasswordForm}>
                    <form onSubmit={changePasswordForm.handleSubmit(handleChangePassword)} className="space-y-4">
                        <FormField control={changePasswordForm.control} name="currentPassword" render={({ field }) => (
                            <FormItem><FormLabel>Current Password</FormLabel><FormControl><Input type="password" placeholder="********" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                         <FormField control={changePasswordForm.control} name="newPassword" render={({ field }) => (
                            <FormItem><FormLabel>New Password</FormLabel><FormControl><Input type="password" placeholder="********" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <FormField control={changePasswordForm.control} name="confirmPassword" render={({ field }) => (
                            <FormItem><FormLabel>Confirm New Password</FormLabel><FormControl><Input type="password" placeholder="********" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <Button type="submit" className="w-full" disabled={changePasswordForm.formState.isSubmitting}>
                           Update Password
                        </Button>
                    </form>
                </Form>
            </CardContent>
          </Card>

        </div>

        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="font-headline">Current Administrators</CardTitle>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Name</TableHead>
                    <TableHead>Login ID (Email)</TableHead>
                    <TableHead>Password</TableHead>
                    <TableHead>Role</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {schoolAdmins.map((admin) => (
                    <TableRow key={admin.email}>
                      <TableCell>
                        <div className="flex items-center gap-3">
                          <Avatar className="h-9 w-9">
                            <AvatarImage src={admin.avatar} alt={admin.name} data-ai-hint="person" />
                            <AvatarFallback>{admin.name.charAt(0)}</AvatarFallback>
                          </Avatar>
                          <span className="font-medium">{admin.name}</span>
                        </div>
                      </TableCell>
                      <TableCell>{admin.email}</TableCell>
                      <TableCell className="font-mono text-xs">{admin.isChiefAdmin ? "Custom" : admin.phoneNo}</TableCell>
                      <TableCell>
                        {admin.isChiefAdmin ? (
                          <span className="font-bold text-primary">Chief Admin</span>
                        ) : (
                          "Admin"
                        )}
                      </TableCell>
                      <TableCell className="text-right">
                        {!admin.isChiefAdmin && (
                          <Button variant="ghost" size="icon" onClick={() => handleRemoveAdmin(admin.email!)}>
                            <Trash2 className="h-4 w-4 text-destructive" />
                            <span className="sr-only">Remove</span>
                          </Button>
                        )}
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}
`,
    "src/app/dashboard/materials/page.tsx": `// src/app/dashboard/materials/page.tsx
"use client";

import { useState, useMemo } from "react";
import { useUser } from "@/context/user-context";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Upload, Film, FileText, Image as ImageIcon, PlusCircle, Trash2, BookOpen, Loader2 } from "lucide-react";
import Image from 'next/image';
import type { LearningMaterial } from "@/lib/data";
import { Dialog, DialogClose, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import MarkdownRenderer from "@/components/markdown-renderer";
import { ScrollArea } from "@/components/ui/scroll-area";
import { useToast } from "@/hooks/use-toast";
import { db } from "@/lib/firebase";
import { collection, addDoc, deleteDoc, doc } from "firebase/firestore";

const MaterialIcon = ({ type }: { type: LearningMaterial['type'] }) => {
  switch (type) {
    case 'video': return <Film className="h-5 w-5 text-red-500" />;
    case 'slide': return <FileText className="h-5 w-5 text-yellow-500" />;
    case 'document': return <FileText className="h-5 w-5 text-blue-500" />;
    case 'image': return <ImageIcon className="h-5 w-5 text-green-500" />;
    default: return <FileText className="h-5 w-5" />;
  }
}

export default function MaterialsPage() {
  const { user, learningMaterials, setLearningMaterials, subjects: allSubjects, schoolClasses } = useUser();
  const [newMaterial, setNewMaterial] = useState({ title: '', subject: '', classId: '', type: 'document' as LearningMaterial['type'], url: '' });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  if (!user) return null;

  const canUpload = user.role === 'Admin' || user.role === 'Staff';

  const myMaterials = useMemo(() => {
    if (!user || !user.schoolId) return [];
    const schoolMaterials = learningMaterials.filter(m => m.schoolId === user.schoolId);

    if (canUpload) return schoolMaterials;
    if (user.role === 'Student' || user.role === 'Parent') {
        const studentClassId = user.classId;
        return schoolMaterials.filter(m => !m.classId || m.classId === studentClassId);
    }
    return [];
  }, [user, learningMaterials, canUpload]);

  const handleAddMaterial = async () => {
    if (!newMaterial.title || !newMaterial.subject || !newMaterial.classId) {
        toast({ variant: 'destructive', title: 'Missing fields', description: 'Please fill out title, subject, and class.' });
        return;
    }
    if (!user || !user.schoolId) return;

    setIsSubmitting(true);
    try {
        const newEntry: Omit<LearningMaterial, 'id'> = {
          title: newMaterial.title,
          subject: newMaterial.subject,
          classId: newMaterial.classId,
          type: newMaterial.type,
          url: newMaterial.url || '#',
          thumbnail: \`https://picsum.photos/seed/lm\${learningMaterials.length + 1}/300/200\`,
          uploadedBy: user.name,
          date: new Date().toISOString(),
          schoolId: user.schoolId,
        };
        const docRef = await addDoc(collection(db, "learningMaterials"), newEntry);
        setLearningMaterials(prev => [{ id: docRef.id, ...newEntry }, ...prev]);
        setNewMaterial({ title: '', subject: '', classId: '', type: 'document', url: '' });
        toast({ title: 'Material Added', description: 'The new resource is now available.' });
    } catch (error) {
        console.error("Error adding material:", error);
        toast({ variant: 'destructive', title: 'Error', description: 'Could not add the material.' });
    } finally {
        setIsSubmitting(false);
    }
  };
  
  const handleRemoveMaterial = async (id: string) => {
    setIsSubmitting(true);
    try {
        await deleteDoc(doc(db, "learningMaterials", id));
        setLearningMaterials(prev => prev.filter(material => material.id !== id));
        toast({ title: 'Material Removed' });
    } catch (error) {
        console.error("Error removing material:", error);
        toast({ variant: 'destructive', title: 'Error', description: 'Could not remove the material.' });
    } finally {
        setIsSubmitting(false);
    }
  }

  const schoolSubjects = allSubjects.filter(s => s.schoolId === user.schoolId);
  const mySchoolClasses = schoolClasses.filter(c => c.schoolId === user.schoolId);

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight">Learning Materials</h1>
        <p className="text-muted-foreground">
          Access course materials, lecture notes, and other resources.
        </p>
      </div>

      {canUpload && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2 font-headline">
              <Upload className="h-5 w-5" />
              Upload New Material
            </CardTitle>
            <CardDescription>Add a new resource for students. For videos or slides, provide a URL link.</CardDescription>
          </CardHeader>
          <CardContent className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
            <Input
              placeholder="Material Title"
              value={newMaterial.title}
              onChange={(e) => setNewMaterial(prev => ({ ...prev, title: e.target.value }))}
              className="lg:col-span-2"
              disabled={isSubmitting}
            />
            <Select value={newMaterial.subject} onValueChange={(value) => setNewMaterial(prev => ({ ...prev, subject: value }))} disabled={isSubmitting}>
              <SelectTrigger>
                <SelectValue placeholder="Select Subject" />
              </SelectTrigger>
              <SelectContent>
                {schoolSubjects.map(subject => <SelectItem key={subject.id} value={subject.name}>{subject.name}</SelectItem>)}
              </SelectContent>
            </Select>
            <Select value={newMaterial.classId} onValueChange={(value) => setNewMaterial(prev => ({ ...prev, classId: value }))} disabled={isSubmitting}>
              <SelectTrigger>
                <SelectValue placeholder="Select Class" />
              </SelectTrigger>
              <SelectContent>
                {mySchoolClasses.map(c => <SelectItem key={c.id} value={c.id}>{c.name}</SelectItem>)}
              </SelectContent>
            </Select>
            <Select value={newMaterial.type} onValueChange={(value) => setNewMaterial(prev => ({ ...prev, type: value as LearningMaterial['type'] }))} disabled={isSubmitting}>
              <SelectTrigger>
                <SelectValue placeholder="Select Type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="document">Document</SelectItem>
                <SelectItem value="video">Video</SelectItem>
                <SelectItem value="slide">Slides</SelectItem>
                <SelectItem value="image">Image</SelectItem>
              </SelectContent>
            </Select>
             {['video', 'slide'].includes(newMaterial.type) && (
                 <Input
                  placeholder="Paste URL (e.g., YouTube, Google Slides)"
                  value={newMaterial.url}
                  onChange={(e) => setNewMaterial(prev => ({ ...prev, url: e.target.value }))}
                  className="lg:col-span-5"
                  disabled={isSubmitting}
                />
            )}
          </CardContent>
          <CardFooter>
            <Button onClick={handleAddMaterial} disabled={isSubmitting}>
              {isSubmitting ? <Loader2 className="mr-2 animate-spin" /> : <PlusCircle className="mr-2" />}
              Add Material
            </Button>
          </CardFooter>
        </Card>
      )}

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {myMaterials.map(material => (
          <Card key={material.id} className="flex flex-col">
            <CardHeader className="p-0">
               {material.thumbnail ? (
                    <Image 
                        src={material.thumbnail} 
                        alt={material.title} 
                        width={300} 
                        height={200}
                        data-ai-hint="learning material"
                        className="rounded-t-lg w-full aspect-video object-cover" 
                    />
               ) : (
                    <div className="rounded-t-lg w-full aspect-video bg-muted flex items-center justify-center">
                        <FileText className="h-16 w-16 text-muted-foreground" />
                    </div>
               )}
            </CardHeader>
            <CardContent className="p-4 flex-grow">
              <p className="text-xs font-semibold text-primary">{material.subject}</p>
              <h3 className="font-semibold font-headline leading-tight mt-1">{material.title}</h3>
            </CardContent>
            <CardFooter className="p-4 pt-0 text-xs text-muted-foreground flex justify-between items-center">
                <div className="flex items-center gap-2">
                    <MaterialIcon type={material.type} />
                    <span>{material.type.charAt(0).toUpperCase() + material.type.slice(1)}</span>
                </div>
                 {material.content ? (
                    <Dialog>
                        <DialogTrigger asChild>
                            <Button variant="outline" size="sm"><BookOpen className="mr-2 h-4 w-4"/>View Note</Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-3xl max-h-[90vh]">
                             <DialogHeader>
                                <DialogTitle>{material.title}</DialogTitle>
                                <DialogDescription>Subject: {material.subject} | Posted by: {material.uploadedBy}</DialogDescription>
                            </DialogHeader>
                            <ScrollArea className="h-[60vh] rounded-md border p-4">
                               <MarkdownRenderer content={material.content} />
                            </ScrollArea>
                             <DialogFooter>
                                <DialogClose asChild>
                                    <Button type="button">Close</Button>
                                </DialogClose>
                            </DialogFooter>
                        </DialogContent>
                    </Dialog>
                ) : (
                    canUpload && user?.name === material.uploadedBy && (
                        <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => handleRemoveMaterial(material.id)} disabled={isSubmitting}>
                          {isSubmitting ? <Loader2 className="animate-spin" /> : <Trash2 className="h-4 w-4" />}
                        </Button>
                    )
                )}
            </CardFooter>
          </Card>
        ))}
      </div>
    </div>
  );
}
`,
    "src/app/dashboard/messaging/page.tsx": `// src/app/dashboard/messaging/page.tsx
"use client";

import { useState, useMemo } from 'react';
import { useUser } from '@/context/user-context';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ConversationList } from '@/components/dashboard/messaging/conversation-list';
import { MessageView } from '@/components/dashboard/messaging/message-view';
import { ComposeMessage } from '@/components/dashboard/messaging/compose-message';
import type { Conversation } from '@/lib/data';
import { Mail } from 'lucide-react';

export default function MessagingPage() {
    const { user, conversations, setConversations, admins, staff, students } = useUser();
    const [selectedConversation, setSelectedConversation] = useState<Conversation | null>(null);
    const [isComposing, setIsComposing] = useState(false);

    const myConversations = useMemo(() => {
        if (!user) return [];
        const myId = user.role === 'Student' ? user.regNo : user.role === 'Parent' ? user.phoneNo : user.email;
        if (!myId) return [];
        
        return conversations
            .filter(c => c.participants.includes(myId))
            .sort((a,b) => new Date(b.messages[b.messages.length - 1].timestamp).getTime() - new Date(a.messages[a.messages.length - 1].timestamp).getTime());

    }, [user, conversations]);
    
    const handleSelectConversation = (conversation: Conversation) => {
        setSelectedConversation(conversation);
        setIsComposing(false);
    }
    
    const handleStartComposing = () => {
        setSelectedConversation(null);
        setIsComposing(true);
    }

    if (!user) return null;

    return (
        <div className="space-y-8 h-full flex flex-col">
            <div>
                <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2">
                    <Mail /> Messaging
                </h1>
                <p className="text-muted-foreground">
                    Communicate securely with staff, students, and parents.
                </p>
            </div>
            <div className="flex-grow grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-6 h-[calc(100vh-12rem)]">
                <div className="md:col-span-1 lg:col-span-1 h-full">
                    <ConversationList 
                        conversations={myConversations}
                        onSelectConversation={handleSelectConversation}
                        selectedConversationId={selectedConversation?.id}
                        onStartComposing={handleStartComposing}
                        isComposing={isComposing}
                    />
                </div>
                <div className="md:col-span-2 lg:col-span-3 h-full">
                    {selectedConversation ? (
                        <MessageView 
                            conversation={selectedConversation}
                            currentUser={user}
                        />
                    ) : isComposing ? (
                        <ComposeMessage />
                    ) : (
                         <Card className="h-full flex items-center justify-center">
                            <div className="text-center text-muted-foreground">
                                <Mail className="mx-auto h-12 w-12 mb-4"/>
                                <p>Select a conversation to view messages</p>
                                <p className="text-sm">or start a new one.</p>
                            </div>
                        </Card>
                    )}
                </div>
            </div>
        </div>
    );
}
`,
    "src/app/dashboard/page.tsx": `"use client";

import { useUser } from "@/context/user-context";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { announcements, Student, Grade, SchoolClass } from "@/lib/data";
import AnnouncementCard from "@/components/dashboard/announcement-card";
import { Calendar, Megaphone, BookOpen, BarChart3, CheckCircle, Info, BookCheck, Users, DollarSign } from "lucide-react";
import { Calendar as CalendarComponent } from "@/components/ui/calendar";
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { BarChart, CartesianGrid, XAxis, YAxis, Bar, LineChart, Line, Tooltip } from "recharts";


const calculateTotalScore = (grades: Grade[]) => {
  if (!grades || grades.length === 0) return 0;
  const total = grades.reduce((acc, grade) => {
    const gradeTotal = (grade.firstCA || 0) + (grade.secondCA || 0) + (grade.project || 0) + (grade.exam || 0);
    return acc + gradeTotal;
  }, 0);
  const average = total / grades.length;
  return isNaN(average) ? 0 : average;
};

const getRemark = (avg: number) => {
    if (avg >= 75) return "Excellent";
    if (avg >= 60) return "Good";
    if (avg >= 50) return "Satisfactory";
    return "Needs Improvement";
  };

export default function DashboardPage() {
  const { user, students, schoolClasses, assignments } = useUser();
  const recentAnnouncements = announcements.slice(0, 2);

  if (!user) return null;

  const getStudentDetails = () => {
    if (user.role !== 'Student' || !user.regNo) return null;
    const studentData = students.find(s => s.regNo === user.regNo);
    if (!studentData) return null;

    const studentClass = schoolClasses.find(c => c.students.some(s => s.regNo === studentData.regNo));
    const studentAverage = calculateTotalScore(studentData.grades || []);
    const studentRemark = getRemark(studentAverage);
    const studentAssignments = assignments.filter(a => a.classId === studentData.classId);
    
    return {
        studentData,
        studentClass,
        studentAverage,
        studentRemark,
        studentAssignments
    };
  }
  
   const getAdminDetails = () => {
      const enrollmentData = schoolClasses.map(c => ({
        name: c.name,
        students: c.students.length,
      }));

      const totalFees = students.reduce((sum, s) => sum + (s.fees?.totalFees || 0), 0);
      const totalPaid = students.reduce((sum, s) => sum + (s.fees?.amountPaid || 0), 0);
      const financeData = [
        { name: 'Total Fees', value: totalFees },
        { name: 'Total Paid', value: totalPaid },
        { name: 'Outstanding', value: totalFees - totalPaid },
      ];
      return { enrollmentData, financeData };
   }

  const studentDetails = getStudentDetails();
  const adminDetails = (user.role === 'Admin' || user.role === 'Staff') ? getAdminDetails() : null;


  const renderAdminStaffDashboard = () => (
     <div className="grid gap-6 lg:grid-cols-3">
        <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardHeader>
                 <CardTitle className="font-headline flex items-center gap-2"><Users className="h-5 w-5"/> Enrollment Overview</CardTitle>
              </CardHeader>
              <CardContent>
                <ChartContainer config={{ students: { label: "Students", color: "hsl(var(--primary))" } }} className="h-64 w-full">
                  <BarChart data={adminDetails?.enrollmentData} accessibilityLayer>
                    <CartesianGrid vertical={false} />
                    <XAxis dataKey="name" tickLine={false} axisLine={false} tickMargin={8} />
                    <YAxis />
                    <Tooltip content={<ChartTooltipContent />} />
                    <Bar dataKey="students" fill="var(--color-students)" radius={4} />
                  </BarChart>
                </ChartContainer>
              </CardContent>
            </Card>
             <Card>
              <CardHeader>
                <CardTitle className="font-headline flex items-center gap-2"><DollarSign className="h-5 w-5"/> Financial Summary</CardTitle>
              </CardHeader>
              <CardContent>
                 <ChartContainer config={{ value: { label: "Amount (NGN)", color: "hsl(var(--accent))" } }} className="h-64 w-full">
                   <BarChart data={adminDetails?.financeData} layout="vertical" accessibilityLayer>
                      <CartesianGrid horizontal={false} />
                      <YAxis dataKey="name" type="category" tickLine={false} axisLine={false} tickMargin={8} className="w-24" />
                      <XAxis type="number" />
                      <Tooltip content={<ChartTooltipContent />} />
                      <Bar dataKey="value" fill="var(--color-value)" radius={4} />
                   </BarChart>
                 </ChartContainer>
              </CardContent>
            </Card>
        </div>

        <div className="lg:col-span-1 space-y-6">
           <Card>
              <CardHeader className="flex flex-row items-center justify-between">
                <CardTitle className="flex items-center gap-2 text-xl font-headline">
                  <Megaphone className="h-5 w-5" />
                  Recent Announcements
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {recentAnnouncements.map((announcement) => (
                  <AnnouncementCard
                    key={announcement.id}
                    announcement={announcement}
                  />
                ))}
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2 text-xl font-headline">
                  <Calendar className="h-5 w-5" />
                  Upcoming Events
                </CardTitle>
              </CardHeader>
              <CardContent>
                <CalendarComponent
                  mode="single"
                  selected={new Date()}
                  className="p-0"
                  classNames={{
                    head_cell: "w-full",
                    day: "h-9 w-full",
                  }}
                />
                <div className="mt-4 space-y-2 text-sm">
                    <div className="flex items-center gap-2">
                        <div className="h-2 w-2 rounded-full bg-primary" />
                        <p><span className="font-semibold">Today:</span> Mid-term presentations</p>
                    </div>
                    <div className="flex items-center gap-2">
                        <div className="h-2 w-2 rounded-full bg-accent" />
                        <p>No upcoming deadlines.</p>
                    </div>
                </div>
              </CardContent>
            </Card>
        </div>
      </div>
  );
  
  const renderStudentDashboard = () => {
    if (!studentDetails) {
        return (
             <Card>
                <CardHeader>
                    <CardTitle>Welcome!</CardTitle>
                </CardHeader>
                <CardContent>
                    <p>Your academic data is not available yet. This could be because you are not yet assigned to a class. Please check back later.</p>
                </CardContent>
             </Card>
        );
    }
    const { studentData, studentClass, studentAverage, studentRemark, studentAssignments } = studentDetails;
    const performanceData = (studentData.grades || []).map(g => ({
        name: g.subject,
        score: (g.firstCA || 0) + (g.secondCA || 0) + (g.project || 0) + (g.exam || 0)
    }));
    
    return (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2 space-y-6">
                <Card>
                    <CardHeader>
                        <CardTitle className="font-headline">Academic Snapshot</CardTitle>
                        <CardDescription>A quick summary of your current academic standing.</CardDescription>
                    </CardHeader>
                    <CardContent className="grid grid-cols-1 md:grid-cols-3 gap-4 text-center">
                        <div className="p-4 bg-muted/50 rounded-lg">
                            <p className="text-sm text-muted-foreground flex items-center justify-center gap-1"><BookOpen size={14}/> Current Class</p>
                            <p className="text-2xl font-bold">{studentClass?.name || 'Not Assigned'}</p>
                        </div>
                        <div className="p-4 bg-muted/50 rounded-lg">
                            <p className="text-sm text-muted-foreground flex items-center justify-center gap-1"><BarChart3 size={14}/> Overall Average</p>
                            <p className="text-2xl font-bold">{studentAverage.toFixed(2)}%</p>
                        </div>
                        <div className="p-4 bg-muted/50 rounded-lg">
                            <p className="text-sm text-muted-foreground flex items-center justify-center gap-1"><CheckCircle size={14}/> General Remark</p>
                            <p className="text-2xl font-bold">{studentRemark}</p>
                        </div>
                    </CardContent>
                </Card>

                 <Card>
                  <CardHeader>
                    <CardTitle className="font-headline flex items-center gap-2"><BarChart3/> Performance by Subject</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <ChartContainer config={{ score: { label: "Score", color: "hsl(var(--primary))" } }} className="h-64 w-full">
                      <LineChart data={performanceData} margin={{ top: 5, right: 20, left: -10, bottom: 5 }} accessibilityLayer>
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="name" />
                        <YAxis domain={[0, 100]} />
                        <Tooltip content={<ChartTooltipContent />} />
                        <Line type="monotone" dataKey="score" stroke="var(--color-score)" strokeWidth={2} />
                      </LineChart>
                    </ChartContainer>
                  </CardContent>
                </Card>
            </div>
             <div className="lg:col-span-1 space-y-6">
                <Card>
                    <CardHeader>
                        <CardTitle className="font-headline flex items-center gap-2">
                           <BookCheck className="h-5 w-5"/> Upcoming Assignments
                        </CardTitle>
                        <CardDescription>You have {studentAssignments.length} pending assignment(s).</CardDescription>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {studentAssignments.length > 0 ? studentAssignments.slice(0, 3).map(assignment => (
                            <div key={assignment.id} className="p-3 bg-muted/50 rounded-lg">
                                <p className="font-semibold text-primary text-sm">{assignment.subject}</p>
                                <p className="font-medium leading-tight">{assignment.title}</p>
                                <p className="text-xs text-muted-foreground mt-1">Due: {new Date(assignment.dueDate).toLocaleDateString()}</p>
                            </div>
                        )) : (
                            <div className="text-center py-8 text-muted-foreground">
                                <p>No upcoming assignments. Great job!</p>
                            </div>
                        )}
                        {studentAssignments.length > 3 && (
                            <Button asChild variant="secondary" className="w-full mt-2">
                                <Link href="/dashboard/assignments">View All Assignments</Link>
                            </Button>
                        )}
                    </CardContent>
                </Card>
                <Card>
                    <CardHeader className="flex flex-row items-center justify-between">
                        <CardTitle className="flex items-center gap-2 text-xl font-headline">
                        <Megaphone className="h-5 w-5" />
                        Recent Announcements
                        </CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        {recentAnnouncements.length > 0 ? recentAnnouncements.map((announcement) => (
                        <AnnouncementCard
                            key={announcement.id}
                            announcement={announcement}
                        />
                        )) : (
                            <div className="text-center py-8 text-muted-foreground">
                                <Info className="mx-auto h-10 w-10 mb-2"/>
                                <p>No new announcements at this time.</p>
                            </div>
                        )}
                    </CardContent>
                </Card>
            </div>
        </div>
    );
  };

  return (
    <div className="space-y-8">
      <div className="flex items-center gap-4">
        {user.role === 'Student' && user.avatar && (
            <Avatar className="h-16 w-16">
                <AvatarImage src={user.avatar} alt={user.name} data-ai-hint="person" />
                <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
            </Avatar>
        )}
        <div>
            <h1 className="text-3xl font-bold font-headline tracking-tight">
            Welcome back, {user.name.split(" ")[0]}!
            </h1>
            <p className="text-muted-foreground">
            Here's what's happening around the school today.
            </p>
        </div>
      </div>

      {user.role === 'Student' ? renderStudentDashboard() : renderAdminStaffDashboard()}

    </div>
  );
}
`,
    "src/app/dashboard/report-issue/page.tsx": `// src/app/dashboard/report-issue/page.tsx
"use client";

import { useState, useEffect } from "react";
import { useUser } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";
import { MessageSquareWarning, Send, ShieldAlert } from "lucide-react";
import { AlertDialog, AlertDialogAction, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";

const reportSchema = z.object({
  report: z.string().min(20, "Please provide a detailed description of at least 20 characters.").max(1000, "Report cannot exceed 1000 characters."),
});

type ReportFormValues = z.infer<typeof reportSchema>;

export default function ReportIssuePage() {
  const { user, issueReports, setIssueReports } = useUser();
  const router = useRouter();
  const { toast } = useToast();

  const form = useForm<ReportFormValues>({
    resolver: zodResolver(reportSchema),
    defaultValues: {
      report: "",
    },
  });

  useEffect(() => {
    if (!user || user.role !== 'Student') {
      router.push('/dashboard');
    }
  }, [user, router]);

  if (!user || user.role !== 'Student') {
    return null;
  }
  
  const isBlocked = user.isBlockedFromReporting;

  const onSubmit = (data: ReportFormValues) => {
    if (!user.regNo) return;

    setIssueReports(prev => [
      ...prev,
      {
        id: \`report-\${Date.now()}\`,
        studentRegNo: user.regNo!,
        studentName: user.name,
        report: data.report,
        date: new Date().toISOString(),
        isResolved: false,
      }
    ]);

    toast({
      title: "Report Submitted",
      description: "Thank you for your feedback. The administration has been notified.",
    });

    form.reset();
    router.push("/dashboard");
  };

  if (isBlocked) {
    return (
       <AlertDialog open={true}>
            <AlertDialogContent>
                <AlertDialogHeader>
                    <ShieldAlert className="h-10 w-10 text-destructive mx-auto mb-4" />
                    <AlertDialogTitle>Reporting Function Blocked</AlertDialogTitle>
                    <AlertDialogDescription>
                        Your access to the issue reporting feature has been blocked by the administration due to misuse. Please contact them directly if you have a serious concern.
                    </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                    <AlertDialogAction onClick={() => router.push('/dashboard')}>Return to Dashboard</AlertDialogAction>
                </AlertDialogFooter>
            </AlertDialogContent>
        </AlertDialog>
    )
  }

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2">
          <MessageSquareWarning /> Report an Issue
        </h1>
        <p className="text-muted-foreground">
          Have a problem or a suggestion? Let the administration know.
        </p>
      </div>

      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <CardTitle>Submit a Report</CardTitle>
          <CardDescription>
            Your report will be sent anonymously to the school administration. Please be respectful and descriptive. This feature is for serious issues only.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="report"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Describe the issue or suggestion</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Please describe the issue in detail..."
                        className="min-h-[200px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={form.formState.isSubmitting}>
                <Send className="mr-2 h-4 w-4" />
                Submit Report
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
`,
    "src/app/dashboard/reports/page.tsx": `// src/app/dashboard/reports/page.tsx
"use client";

import { useUser } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { ShieldAlert, ShieldCheck, ShieldX } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";
import { IssueReport } from "@/lib/data";
import { useEffect } from "react";

export default function ViewReportsPage() {
  const { user, issueReports, setIssueReports, students, setStudents } = useUser();
  const router = useRouter();
  const { toast } = useToast();

  useEffect(() => {
    if (!user || user.role !== 'Admin') {
      router.push('/dashboard');
    }
  }, [user, router]);

  if (!user || user.role !== 'Admin') {
    return null;
  }
  
  const handleToggleResolve = (reportId: string) => {
    setIssueReports(prev => 
      prev.map(r => r.id === reportId ? { ...r, isResolved: !r.isResolved } : r)
    );
  };

  const handleBlockStudent = (regNo: string, studentName: string) => {
    setStudents(prev => 
      prev.map(s => s.regNo === regNo ? { ...s, isBlockedFromReporting: true } : s)
    );
    toast({
      variant: 'destructive',
      title: 'Student Blocked',
      description: \`\${studentName} can no longer submit issue reports.\`
    })
  };
  
  const handleUnblockStudent = (regNo: string, studentName: string) => {
     setStudents(prev => 
      prev.map(s => s.regNo === regNo ? { ...s, isBlockedFromReporting: false } : s)
    );
     toast({
      title: 'Student Unblocked',
      description: \`\${studentName} can now submit issue reports again.\`
    })
  };

  const getStudent = (regNo: string) => students.find(s => s.regNo === regNo);

  const sortedReports = [...issueReports].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());

  return (
    <div className="space-y-8">
       <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight">Student Reports</h1>
        <p className="text-muted-foreground">
          View and manage issues and suggestions submitted by students.
        </p>
      </div>

      <Card>
        <CardHeader>
            <CardTitle>Submitted Reports</CardTitle>
            <CardDescription>
                {sortedReports.length > 0 ? \`There are \${sortedReports.length} reports.\` : 'No reports have been submitted yet.'}
            </CardDescription>
        </CardHeader>
        <CardContent>
            {sortedReports.length > 0 ? (
                <Accordion type="multiple" className="w-full space-y-4">
                    {sortedReports.map(report => {
                        const student = getStudent(report.studentRegNo);
                        return (
                            <AccordionItem value={report.id} key={report.id} className="border rounded-lg px-4 bg-muted/20">
                                <AccordionTrigger>
                                    <div className="flex items-center justify-between w-full pr-4">
                                        <div className="text-left">
                                            <p className="font-semibold">{report.studentName}</p>
                                            <p className="text-xs text-muted-foreground">{new Date(report.date).toLocaleString()}</p>
                                        </div>
                                        <Badge variant={report.isResolved ? 'default' : 'destructive'} className="bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300 data-[variant=destructive]:bg-yellow-100 data-[variant=destructive]:text-yellow-800 dark:data-[variant=destructive]:bg-yellow-900/20 dark:data-[variant=destructive]:text-yellow-300">
                                          {report.isResolved ? 'Resolved' : 'Pending'}
                                        </Badge>
                                    </div>
                                </AccordionTrigger>
                                <AccordionContent className="space-y-4">
                                    <p className="text-base whitespace-pre-wrap">{report.report}</p>
                                    <div className="flex items-center gap-2 pt-4 border-t">
                                        <Button size="sm" onClick={() => handleToggleResolve(report.id)}>
                                            {report.isResolved ? 'Mark as Pending' : 'Mark as Resolved'}
                                        </Button>
                                        {user.isChiefAdmin && student && (
                                           student.isBlockedFromReporting ? (
                                                <Button size="sm" variant="outline" className="text-green-600 border-green-600 hover:text-green-700 hover:bg-green-50" onClick={() => handleUnblockStudent(student.regNo, student.name)}>
                                                    <ShieldCheck className="mr-2"/> Unblock Student
                                                </Button>
                                           ) : (
                                                <AlertDialog>
                                                    <AlertDialogTrigger asChild>
                                                        <Button size="sm" variant="destructive">
                                                          <ShieldX className="mr-2"/> Block Student
                                                        </Button>
                                                    </AlertDialogTrigger>
                                                     <AlertDialogContent>
                                                        <AlertDialogHeader>
                                                            <AlertDialogTitle>Block {report.studentName}?</AlertDialogTitle>
                                                            <AlertDialogDescription>
                                                                This will prevent the student from submitting any more issue reports. This action should only be taken in cases of abuse of the reporting feature. Are you sure?
                                                            </AlertDialogDescription>
                                                        </AlertDialogHeader>
                                                        <AlertDialogFooter>
                                                            <AlertDialogCancel>Cancel</AlertDialogCancel>
                                                            <AlertDialogAction onClick={() => handleBlockStudent(report.studentRegNo, report.studentName)} className="bg-destructive hover:bg-destructive/90">Yes, Block Student</AlertDialogAction>
                                                        </AlertDialogFooter>
                                                    </AlertDialogContent>
                                                </AlertDialog>
                                           )
                                        )}
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                        );
                    })}
                </Accordion>
            ) : (
                <div className="text-center py-12 text-muted-foreground">
                    <p>No reports to show.</p>
                </div>
            )}
        </CardContent>
      </Card>
    </div>
  );
}
`,
    "src/app/dashboard/schools/page.tsx": `// src/app/dashboard/schools/page.tsx
"use client";

import { useUser, type User } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";
import { Building, ShieldAlert, CheckCircle, XCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Badge } from "@/components/ui/badge";
import { db } from "@/lib/firebase";
import { collection, query, where, getDocs, updateDoc, doc } from "firebase/firestore";
import { useEffect } from "react";

export default function SchoolsPage() {
  const { user, admins, setAdmins } = useUser();
  const router = useRouter();
  const { toast } = useToast();

  useEffect(() => {
    // This page is strictly for the platform owner
    if (!user || user.schoolId !== 'encon-initial') {
      router.push("/dashboard");
    }
  }, [user, router]);

  if (!user || user.schoolId !== 'encon-initial') {
    return null;
  }
  
  const handleSchoolAction = async (schoolId: string, action: 'activate' | 'block', adminEmail: string, adminName: string) => {
    try {
      const adminsRef = collection(db, "admins");
      const q = query(adminsRef, where("schoolId", "==", schoolId), where("isChiefAdmin", "==", true));
      const querySnapshot = await getDocs(q);

      if (querySnapshot.empty) {
        toast({ variant: 'destructive', title: 'Error', description: 'Could not find the chief school administrator to update.' });
        return;
      }

      const adminDoc = querySnapshot.docs[0];
      const docRef = doc(db, "admins", adminDoc.id);

      if (action === 'activate') {
        const newPassword = Math.random().toString(36).slice(-8);
        await updateDoc(docRef, {
          status: 'Active',
          password: newPassword
        });

        // Update local state for immediate UI feedback
        setAdmins(prevAdmins =>
          prevAdmins.map(admin =>
            admin.schoolId === schoolId && admin.isChiefAdmin ? { ...admin, status: 'Active', password: newPassword } : admin
          )
        );

        toast({
          title: "School Activated",
          description: \`An email with the new password "\${newPassword}" has been sent to \${adminName} at \${adminEmail}.\`,
          duration: 9000,
        });
      } else { // This is the 'block' action
        await updateDoc(docRef, { status: 'Blocked' });
         // Update local state for immediate UI feedback
        setAdmins(prevAdmins =>
          prevAdmins.map(admin =>
            admin.schoolId === schoolId && admin.isChiefAdmin ? { ...admin, status: 'Blocked' } : admin
          )
        );

        toast({
          variant: 'destructive',
          title: "School Blocked",
          description: \`The school has been blocked and its administrators can no longer log in.\`,
        });
      }
    } catch (error) {
      console.error("Error updating school status: ", error);
      toast({ variant: 'destructive', title: 'Update Failed', description: 'Could not update the school status in the database.' });
    }
  };

  // Filter out the platform owner's own "school" entry
  const registeredSchools = admins.filter(admin => admin.schoolId !== 'encon-initial' && admin.isChiefAdmin);

  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2">
          <Building /> Registered Schools
        </h1>
        <p className="text-muted-foreground">
          View and manage all schools that have registered on the platform.
        </p>
      </div>

       <Alert>
        <ShieldAlert className="h-4 w-4" />
        <AlertTitle>Platform Owner View</AlertTitle>
        <AlertDescription>
          This page is only visible to you as the primary platform administrator. You can manage school access from here.
        </AlertDescription>
      </Alert>

      <Card>
        <CardHeader>
          <CardTitle>Schools List</CardTitle>
          <CardDescription>
            A total of {registeredSchools.length} school(s) have registered.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>School Name</TableHead>
                <TableHead>Chief Administrator</TableHead>
                <TableHead>Admin Email</TableHead>
                <TableHead>Password</TableHead>
                <TableHead>Status</TableHead>
                <TableHead className="text-right">Action</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {registeredSchools.length > 0 ? (
                registeredSchools.map((school) => {
                  const isActive = school.status === 'Active';
                  return (
                    <TableRow key={school.schoolId}>
                      <TableCell className="font-medium">{school.schoolName}</TableCell>
                      <TableCell>
                        <div className="flex items-center gap-3">
                          <Avatar className="h-9 w-9">
                            <AvatarImage src={school.avatar} alt={school.name} data-ai-hint="person" />
                            <AvatarFallback>{school.name.charAt(0)}</AvatarFallback>
                          </Avatar>
                          <span className="font-medium">{school.name}</span>
                        </div>
                      </TableCell>
                      <TableCell>{school.email}</TableCell>
                      <TableCell className="font-mono text-xs">{school.password}</TableCell>
                      <TableCell>
                          <Badge variant={isActive ? 'default' : 'destructive'} className="bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300 data-[variant=destructive]:bg-red-100 data-[variant=destructive]:text-red-800 dark:data-[variant=destructive]:bg-red-900/20 dark:data-[variant=destructive]:text-red-300">
                            {isActive ? 'Active' : 'Blocked'}
                          </Badge>
                      </TableCell>
                      <TableCell className="text-right">
                        {isActive ? (
                          <Button 
                            size="sm" 
                            variant="destructive"
                            onClick={() => handleSchoolAction(school.schoolId!, 'block', school.email!, school.name)}
                          >
                            <XCircle className="mr-2 h-4 w-4" /> Block
                          </Button>
                        ) : (
                          <Button 
                            size="sm" 
                            variant="default"
                            onClick={() => handleSchoolAction(school.schoolId!, 'activate', school.email!, school.name)}
                          >
                            <CheckCircle className="mr-2 h-4 w-4" /> Activate
                          </Button>
                        )}
                      </TableCell>
                    </TableRow>
                  )
                })
              ) : (
                <TableRow>
                  <TableCell colSpan={6} className="text-center text-muted-foreground h-24">
                    No schools have registered yet.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}
`,
    "src/app/dashboard/subjects/my-subjects/page.tsx": `// src/app/dashboard/subjects/my-subjects/page.tsx
'use client';

import { useState, useEffect } from "react";
import { useUser } from "@/context/user-context";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Checkbox } from "@/components/ui/checkbox";
import { BookMarked, Save } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from "@/components/ui/alert-dialog";

const subjectSelectionSchema = z.object({
  subjectIds: z.array(z.string()).refine(value => value.length > 0, {
    message: "You must select at least one subject.",
  }),
});

type SubjectSelectionForm = z.infer<typeof subjectSelectionSchema>;

export default function MySubjectsPage() {
  const { user, setUser, subjects, schoolClasses } = useUser();
  const router = useRouter();
  const { toast } = useToast();

  useEffect(() => {
    if (!user || user.role !== 'Student') {
      router.push('/dashboard');
    }
  }, [user, router]);

  if (!user || user.role !== 'Student') {
    return null;
  }
  
  const studentClass = schoolClasses.find(c => c.id === user.classId);
  const offeredSubjectIds = studentClass?.offeredSubjects || [];
  const availableSubjects = subjects.filter(s => offeredSubjectIds.includes(s.id));
  
  const hasSelectedSubjects = user.offeredSubjects && user.offeredSubjects.length > 0;

  const form = useForm<SubjectSelectionForm>({
    resolver: zodResolver(subjectSelectionSchema),
    defaultValues: {
      subjectIds: user.offeredSubjects || offeredSubjectIds, // Default to all if none selected
    },
  });

  const onSubmit = (data: SubjectSelectionForm) => {
    setUser({ ...user, offeredSubjects: data.subjectIds });
    toast({
      title: "Subjects Saved",
      description: "Your subject selection has been updated successfully.",
    });
  };
  
  const isAdmin = user.role === 'Admin';


  return (
    <div className="space-y-8">
      <div>
        <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2">
            <BookMarked /> My Subjects
        </h1>
        <p className="text-muted-foreground">
          Select the subjects you will be offering for this academic session.
        </p>
      </div>

      <Card className="max-w-2xl mx-auto">
        <CardHeader>
          <div className="flex justify-between items-center">
            <div>
              <CardTitle>Subject Selection for {studentClass?.name}</CardTitle>
              <CardDescription>
                {hasSelectedSubjects 
                    ? "Your subject selection is locked. Contact administration for changes." 
                    : "Choose your subjects from the list below."
                }
              </CardDescription>
            </div>
          </div>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8">
               <FormField
                control={form.control}
                name="subjectIds"
                render={() => (
                  <FormItem className="space-y-3">
                    <FormLabel className="text-base">Available Subjects</FormLabel>
                    {availableSubjects.length > 0 ? (
                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                            {availableSubjects.map((subject) => (
                            <FormField
                                key={subject.id}
                                control={form.control}
                                name="subjectIds"
                                render={({ field }) => {
                                return (
                                    <FormItem
                                    key={subject.id}
                                    className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4"
                                    >
                                    <FormControl>
                                        <Checkbox
                                          disabled={hasSelectedSubjects}
                                          checked={field.value?.includes(subject.id)}
                                          onCheckedChange={(checked) => {
                                              return checked
                                              ? field.onChange([...(field.value || []), subject.id])
                                              : field.onChange(
                                                  field.value?.filter(
                                                      (value) => value !== subject.id
                                                  )
                                                  );
                                          }}
                                        />
                                    </FormControl>
                                    <FormLabel className="font-normal">{subject.name}</FormLabel>
                                    </FormItem>
                                );
                                }}
                            />
                            ))}
                        </div>
                    ) : (
                        <p className="text-sm text-muted-foreground">No subjects have been assigned to your class yet. Please check back later.</p>
                    )}
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              {!hasSelectedSubjects && (
                 <AlertDialog>
                    <AlertDialogTrigger asChild>
                      <Button className="w-full" disabled={availableSubjects.length === 0}>
                         <Save className="mr-2 h-4 w-4" /> Save Selection
                      </Button>
                    </AlertDialogTrigger>
                    <AlertDialogContent>
                      <AlertDialogHeader>
                        <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                        <AlertDialogDescription>
                          This action will lock your subject selection. You will need to contact the school administration to make any further changes.
                        </AlertDialogDescription>
                      </AlertDialogHeader>
                      <AlertDialogFooter>
                        <AlertDialogCancel>Cancel</AlertDialogCancel>
                        <AlertDialogAction onClick={form.handleSubmit(onSubmit)}>
                          Yes, Save and Lock
                        </AlertDialogAction>
                      </AlertDialogFooter>
                    </AlertDialogContent>
                  </AlertDialog>
              )}

            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
`,
    "src/app/dashboard/subjects/page.tsx": `// src/app/dashboard/subjects/page.tsx
'use client';

import { useUser } from '@/context/user-context';
import { useRouter } from 'next/navigation';
import MySubjectsPage from './my-subjects/page';
import { useState, useMemo, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { PlusCircle, Trash2, BookMarked, X, Loader2 } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import type { Subject, SchoolClass, SchoolCategory } from '@/lib/data';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Label } from '@/components/ui/label';
import { db } from '@/lib/firebase';
import { doc, setDoc, deleteDoc, updateDoc } from "firebase/firestore";
import { arrayRemove, arrayUnion } from 'firebase/firestore';


const newSubjectSchema = {
    name: '',
    category: '' as SchoolCategory | '',
};

export default function SubjectsPage() {
    const { user, subjects, setSubjects, schoolClasses, setSchoolClasses } = useUser();
    const router = useRouter();
    const { toast } = useToast();
    const [newSubject, setNewSubject] = useState(newSubjectSchema);
    const [selectedCategory, setSelectedCategory] = useState<SchoolCategory | 'all'>('all');
    const [isSubmitting, setIsSubmitting] = useState(false);

    useEffect(() => {
      if (!user) {
          router.push('/dashboard');
      } else if (user.role !== 'Student' && user.role !== 'Admin') {
          router.push('/dashboard');
      }
    }, [user, router]);


    if (!user) {
        return null;
    }

    if (user.role === 'Student') {
        return <MySubjectsPage />;
    }

    if (user.role !== 'Admin') {
        return null;
    }

    const schoolSubjects = subjects.filter(s => s.schoolId === user.schoolId);
    const mySchoolClasses = schoolClasses.filter(c => c.schoolId === user?.schoolId);

    const handleAddSubject = async () => {
        if (!newSubject.name.trim()) {
            toast({ variant: 'destructive', title: 'Subject name cannot be empty.' });
            return;
        }
        if (!newSubject.category) {
            toast({ variant: 'destructive', title: 'Please select a category.' });
            return;
        }
        if (!user.schoolId) return;

        setIsSubmitting(true);
        try {
            const subjectId = \`subj-\${Date.now()}\`;
            const newSubjectData: Subject = {
                id: subjectId,
                name: newSubject.name.trim(),
                schoolId: user.schoolId!,
                category: newSubject.category,
            };
            await setDoc(doc(db, "subjects", subjectId), newSubjectData);
            setSubjects(prev => [...prev, newSubjectData]);
            setNewSubject({ name: '', category: '' });
            toast({ title: 'Subject Added', description: \`"\${newSubjectData.name}" has been added.\` });
        } catch(error) {
             console.error("Error adding subject:", error);
            toast({ variant: 'destructive', title: 'Error', description: 'Could not add subject.'});
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleRemoveSubject = async (subjectId: string) => {
        setIsSubmitting(true);
        try {
            // First, remove the subject from any class that offers it
            const updatePromises = schoolClasses
                .filter(c => c.offeredSubjects?.includes(subjectId))
                .map(c => updateDoc(doc(db, "schoolClasses", c.id), { offeredSubjects: arrayRemove(subjectId) }));
            
            await Promise.all(updatePromises);

            // Then, delete the subject document itself
            await deleteDoc(doc(db, "subjects", subjectId));

            // Update local state
            setSchoolClasses(prevClasses => prevClasses.map(c => ({
                ...c,
                offeredSubjects: (c.offeredSubjects || []).filter(id => id !== subjectId)
            })));
            setSubjects(prev => prev.filter(s => s.id !== subjectId));
            
            toast({ title: 'Subject Removed' });
        } catch(error) {
             console.error("Error removing subject:", error);
            toast({ variant: 'destructive', title: 'Error', description: 'Could not remove subject.'});
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleAssignSubjectToClass = async (classId: string, subjectId: string) => {
        if (!subjectId) return;
        setIsSubmitting(true);
        try {
            const classDocRef = doc(db, "schoolClasses", classId);
            await updateDoc(classDocRef, { offeredSubjects: arrayUnion(subjectId) });

            setSchoolClasses(prevClasses => prevClasses.map(c => {
                if (c.id === classId) {
                    const updatedSubjects = [...(c.offeredSubjects || []), subjectId];
                    return { ...c, offeredSubjects: [...new Set(updatedSubjects)] };
                }
                return c;
            }));
            
            const subjectName = subjects.find(s => s.id === subjectId)?.name;
            const className = schoolClasses.find(c => c.id === classId)?.name;
            toast({ title: 'Subject Assigned', description: \`Assigned "\${subjectName}" to \${className}.\`});
        } catch(error) {
            console.error("Error assigning subject:", error);
            toast({ variant: 'destructive', title: 'Error', description: 'Could not assign subject.'});
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleRemoveSubjectFromClass = async (classId: string, subjectId: string) => {
         setIsSubmitting(true);
         try {
            const classDocRef = doc(db, "schoolClasses", classId);
            await updateDoc(classDocRef, { offeredSubjects: arrayRemove(subjectId) });

            setSchoolClasses(prevClasses => prevClasses.map(c => {
                if (c.id === classId) {
                    return { ...c, offeredSubjects: (c.offeredSubjects || []).filter(id => id !== subjectId) };
                }
                return c;
            }));
             toast({ title: 'Subject Unassigned' });
         } catch(error) {
            console.error("Error unassigning subject:", error);
            toast({ variant: 'destructive', title: 'Error', description: 'Could not unassign subject.'});
        } finally {
            setIsSubmitting(false);
        }
    };
    
    const displayedClasses = useMemo(() => {
        if (selectedCategory === 'all') return mySchoolClasses;
        return mySchoolClasses.filter(c => c.category === selectedCategory);
    }, [selectedCategory, mySchoolClasses]);
    
    const displayedSubjects = useMemo(() => {
        return schoolSubjects.reduce((acc, subject) => {
            (acc[subject.category] = acc[subject.category] || []).push(subject);
            return acc;
        }, {} as Record<SchoolCategory, Subject[]>);
    }, [schoolSubjects]);


    const renderClassSubjectManager = (classes: SchoolClass[]) => {
        if (classes.length === 0) {
            return <p className="text-sm text-muted-foreground text-center py-4">No classes found in this category.</p>
        }
        return classes.map(sc => {
            const assignableSubjects = schoolSubjects.filter(s => s.category === sc.category && !(sc.offeredSubjects || []).includes(s.id));
            return (
                <div key={sc.id} className="border p-4 rounded-lg">
                    <h4 className="font-bold">{sc.name}</h4>
                    <div className="my-4 space-y-2">
                        <p className="text-sm font-medium">Offered Subjects:</p>
                        {(sc.offeredSubjects && sc.offeredSubjects.length > 0) ? (
                            <div className="flex flex-wrap gap-2">
                                {sc.offeredSubjects.map(subjectId => {
                                    const subject = subjects.find(s => s.id === subjectId);
                                    return (
                                        <Badge key={subjectId} variant="secondary" className="flex items-center gap-1.5 pr-1">
                                            {subject?.name || 'Unknown Subject'}
                                            <button 
                                                onClick={() => handleRemoveSubjectFromClass(sc.id, subjectId)} 
                                                className="rounded-full hover:bg-destructive/20 text-destructive p-0.5"
                                                aria-label={\`Remove \${subject?.name || 'subject'}\`}
                                                disabled={isSubmitting}
                                            >
                                                <X size={12} />
                                            </button>
                                        </Badge>
                                    );
                                })}
                            </div>
                        ) : (
                            <p className="text-xs text-muted-foreground">No subjects assigned yet.</p>
                        )}
                    </div>
                    <div className="flex gap-2">
                        <Select onValueChange={(val) => handleAssignSubjectToClass(sc.id, val)} disabled={assignableSubjects.length === 0 || isSubmitting}>
                            <SelectTrigger>
                                <SelectValue placeholder={assignableSubjects.length > 0 ? "Add a subject..." : "No subjects to add"} />
                            </SelectTrigger>
                            <SelectContent>
                                {assignableSubjects.map(s => (
                                    <SelectItem key={s.id} value={s.id}>{s.name}</SelectItem>
                                ))}
                            </SelectContent>
                        </Select>
                    </div>
                </div>
            );
        });
    };

    return (
        <div className="space-y-8">
            <div>
                <h1 className="text-3xl font-bold font-headline tracking-tight flex items-center gap-2">
                    <BookMarked /> Subject Management
                </h1>
                <p className="text-muted-foreground">
                    Manage subjects for your school and assign them to classes.
                </p>
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                <div className="lg:col-span-1 space-y-8">
                    <Card>
                        <CardHeader>
                            <CardTitle>Add New Subject</CardTitle>
                            <CardDescription>Create a new subject for your school.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <Input
                                placeholder="e.g., Further Mathematics"
                                value={newSubject.name}
                                onChange={(e) => setNewSubject(s => ({...s, name: e.target.value}))}
                                disabled={isSubmitting}
                            />
                            <Select value={newSubject.category} onValueChange={(value) => setNewSubject(s => ({...s, category: value as SchoolCategory}))} disabled={isSubmitting}>
                                <SelectTrigger>
                                    <SelectValue placeholder="Select Category" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="nursery">Nursery School</SelectItem>
                                    <SelectItem value="primary">Primary School</SelectItem>
                                    <SelectItem value="upperBasic">Upper Basic</SelectItem>
                                    <SelectItem value="highSchool">High School</SelectItem>
                                </SelectContent>
                            </Select>
                            <Button onClick={handleAddSubject} className="w-full" disabled={!newSubject.name.trim() || !newSubject.category || isSubmitting}>
                                {isSubmitting ? <Loader2 className="mr-2 animate-spin"/> : <PlusCircle className="mr-2 h-4 w-4" />} Add Subject
                            </Button>
                        </CardContent>
                    </Card>

                    <Card>
                        <CardHeader>
                            <CardTitle>School Subject List</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            {Object.keys(displayedSubjects).length > 0 ? (
                                (Object.keys(displayedSubjects) as SchoolCategory[]).map(category => (
                                    <div key={category}>
                                        <h4 className="font-semibold capitalize mb-2">{category.replace('highSchool', 'High School').replace('upperBasic', 'Upper Basic')}</h4>
                                        <ul className="space-y-2 border-l pl-4">
                                            {displayedSubjects[category].map(subject => (
                                                <li key={subject.id} className="flex items-center justify-between p-2 bg-muted/50 rounded-md">
                                                    <span className="font-medium">{subject.name}</span>
                                                    <Button variant="ghost" size="icon" className="h-7 w-7 text-destructive" onClick={() => handleRemoveSubject(subject.id)} disabled={isSubmitting}>
                                                        <Trash2 size={16} />
                                                    </Button>
                                                </li>
                                            ))}
                                        </ul>
                                    </div>
                                ))
                            ) : (
                                <p className="text-sm text-muted-foreground text-center py-4">No subjects added yet.</p>
                            )}
                        </CardContent>
                    </Card>
                </div>

                <div className="lg:col-span-2">
                    <Card>
                        <CardHeader>
                            <CardTitle>Assign Subjects to Classes</CardTitle>
                            <CardDescription>Manage which subjects are offered for each class.</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            <div className="space-y-2">
                                <Label htmlFor="category-select">Select School Category</Label>
                                <Select value={selectedCategory} onValueChange={(value) => setSelectedCategory(value as SchoolCategory | 'all')}>
                                    <SelectTrigger id="category-select">
                                        <SelectValue placeholder="Select a category..." />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="all">All Categories</SelectItem>
                                        <SelectItem value="nursery">Nursery School</SelectItem>
                                        <SelectItem value="primary">Primary School</SelectItem>
                                        <SelectItem value="upperBasic">Upper Basic</SelectItem>
                                        <SelectItem value="highSchool">High School</SelectItem>
                                    </SelectContent>
                                </Select>
                            </div>
                            
                            <div className="space-y-4">
                                {renderClassSubjectManager(displayedClasses)}
                            </div>
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    );
}
`,
    "src/app/globals.css": `@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 224 71% 95%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 239 84% 67%;
    --primary-foreground: 239 84% 10%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 250 84% 67%;
    --accent-foreground: 250 84% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 239 84% 67%;
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 239 84% 67%;
    --primary-foreground: 239 84% 10%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 250 84% 67%;
    --accent-foreground: 250 84% 10%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 239 84% 67%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
`,
    "src/app/layout.tsx": `import type { Metadata } from 'next';
import './globals.css';
import { UserProvider } from '@/context/user-context';
import { Toaster } from '@/components/ui/toaster';

export const metadata: Metadata = {
  title: 'ENCON CONCEPT',
  description: 'The All-in-One School Management Platform by encon concept.',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin="anonymous" />
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Space+Grotesk:wght@400;500;600;700&display=swap" rel="stylesheet" />
      </head>
      <body className="font-body antialiased">
        <UserProvider>
          {children}
          <Toaster />
        </UserProvider>
      </body>
    </html>
  );
}
`,
    "src/app/page.tsx": `// src/app/page.tsx
"use client";

import { useState } from "react";
import Link from 'next/link';
import { type Role } from "@/context/user-context";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Icons } from "@/components/ui/icons";
import { Eye, EyeOff, Loader2 } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useAuth } from "@/hooks/use-auth";

export default function LoginPage() {
  const { toast } = useToast();
  const { login, isLoading, error } = useAuth();
  
  const [selectedRole, setSelectedRole] = useState<Role>("Admin");
  const [password, setPassword] = useState("");
  const [showPassword, setShowPassword] = useState(false);
  const [loginId, setLoginId] = useState("");

  const handleLogin = () => {
    login(selectedRole, loginId, password);
  };
  
  const getLoginIdLabel = () => {
    switch(selectedRole) {
      case 'Admin': return 'Email Address';
      case 'Staff': return 'Staff ID';
      case 'Student': return 'Registration Number';
      case 'Parent': return 'Registered Phone Number';
      default: return 'Login ID';
    }
  };

  const renderFormFields = () => {
    return (
      <>
        <div className="space-y-2">
          <Label htmlFor="role">I am a...</Label>
          <Select value={selectedRole} onValueChange={(value) => {
              setSelectedRole(value as Role);
              setLoginId('');
              setPassword('');
            }} disabled={isLoading}>
            <SelectTrigger id="role">
              <SelectValue placeholder="Select a role" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="Admin">Admin</SelectItem>
              <SelectItem value="Staff">Staff</SelectItem>
              <SelectItem value="Student">Student</SelectItem>
              <SelectItem value="Parent">Parent</SelectItem>
            </SelectContent>
          </Select>
        </div>
        
        <div className="space-y-2">
          <Label htmlFor="loginId">{getLoginIdLabel()}</Label>
          <Input id="loginId" type="text" value={loginId} onChange={(e) => setLoginId(e.target.value)} placeholder={\`Enter your \${getLoginIdLabel()}\`} disabled={isLoading} />
        </div>

        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <Label htmlFor="password">Password</Label>
            <button
              type="button"
              onClick={() => toast({ title: 'Forgot Password', description: 'Please contact the school administrator to reset your password.' })}
              className="text-xs text-primary hover:underline"
              disabled={isLoading}
            >
              Forgot Password?
            </button>
          </div>
          <div className="relative">
            <Input 
              id="password" 
              type={showPassword ? "text" : "password"} 
              value={password} 
              onChange={(e) => setPassword(e.target.value)} 
              placeholder={selectedRole === 'Student' ? 'Enter Reg. No. again' : selectedRole === 'Parent' ? 'Enter phone number again' : '********'}
              disabled={isLoading}
              onKeyDown={(e) => e.key === 'Enter' && !isLoading && handleLogin()}
            />
            <Button 
              type="button" 
              variant="ghost" 
              size="icon" 
              className="absolute right-1 top-1/2 h-7 w-7 -translate-y-1/2 text-muted-foreground"
              onClick={() => setShowPassword(prev => !prev)}
              disabled={isLoading}
            >
              {showPassword ? <EyeOff size={16} /> : <Eye size={16} />}
              <span className="sr-only">{showPassword ? 'Hide password' : 'Show password'}</span>
            </Button>
          </div>
        </div>

        {error && <p className="text-sm text-destructive">{error}</p>}
        
        <Button onClick={handleLogin} className="w-full" disabled={isLoading}>
          {isLoading ? <Loader2 className="animate-spin" /> : 'Sign In'}
        </Button>
      </>
    );
  };

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-background p-4">
      <div className="mb-8 flex flex-col items-center text-center">
        <Icons.Logo className="h-14 w-14" />
        <h1 className="text-2xl font-bold font-headline mt-4">ENCON CONCEPT</h1>
        <p className="text-muted-foreground">The All-in-One School Management Platform</p>
      </div>
      <Card className="w-full max-w-md shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl font-headline">Welcome Back!</CardTitle>
          <CardDescription>Select your role to sign in to the dashboard.</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {renderFormFields()}
          </div>
        </CardContent>
      </Card>
      <div className="mt-4 text-center text-sm">
        Don't have a school account?{" "}
        <Link href="/register" className="underline text-primary">
          Register your school now
        </Link>
      </div>
    </main>
  );
}
`,
    "src/app/register/page.tsx": `// src/app/register/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useUser, type User } from "@/context/user-context";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Icons } from "@/components/ui/icons";
import { Loader2, ArrowLeft, Landmark, Check, ShieldCheck } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Checkbox } from "@/components/ui/checkbox";
import { db } from "@/lib/firebase";
import { collection, writeBatch, doc } from "firebase/firestore";
import { defaultClassesTemplate, defaultSubjectsTemplate } from "@/lib/data";


export default function RegisterPage() {
  const router = useRouter();
  const { toast } = useToast();
  const { admins, setAdmins } = useUser();
  const [isRegistering, setIsRegistering] = useState(false);
  const [error, setError] = useState("");
  const [step, setStep] = useState(1);
  const [paymentConfirmed, setPaymentConfirmed] = useState(false);
  const [formData, setFormData] = useState({
    schoolName: "",
    adminName: "",
    adminEmail: "",
    adminPhone: "",
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };
  
  const handleNextStep = () => {
    setError("");
     const { schoolName, adminName, adminEmail, adminPhone } = formData;
     if (!schoolName || !adminName || !adminEmail || !adminPhone) {
      setError("Please fill in all fields to continue.");
      return;
    }
     if (admins.some(admin => admin.email?.toLowerCase() === adminEmail.toLowerCase())) {
        setError("An administrator with this email already exists.");
        return;
    }
    const schoolId = schoolName.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');
    if (admins.some(admin => admin.schoolId === schoolId)) {
        setError("A school with a similar name already exists. Please choose a different name.");
        return;
    }
    setStep(2);
  }

  const handleRegister = async () => {
    setError("");
    setIsRegistering(true);

    const { schoolName, adminName, adminEmail, adminPhone } = formData;

    try {
        const schoolId = schoolName.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');
        
        const newAdmin: User = {
            name: adminName,
            firstName: adminName.split(' ')[0],
            surname: adminName.split(' ').slice(1).join(' '),
            email: adminEmail,
            phoneNo: adminPhone,
            password: "pending-activation",
            role: "Admin",
            avatar: \`https://i.pravatar.cc/150?u=\${adminEmail}\`,
            isChiefAdmin: true,
            schoolId: schoolId,
            schoolName: schoolName,
            status: 'Blocked',
        };

        const batch = writeBatch(db);

        // 1. Add the new admin user
        const adminDocRef = doc(db, "admins", newAdmin.email!);
        batch.set(adminDocRef, newAdmin);

        // 2. Add default subjects for the new school
        defaultSubjectsTemplate.forEach(subject => {
            const subjectDocRef = doc(collection(db, "subjects"));
            batch.set(subjectDocRef, { ...subject, id: subjectDocRef.id, schoolId });
        });

        // 3. Add default classes for the new school
        defaultClassesTemplate.forEach(s_class => {
            const classDocRef = doc(collection(db, "schoolClasses"));
            batch.set(classDocRef, { ...s_class, id: classDocRef.id, schoolId, students: [], teacher: '', offeredSubjects: [] });
        });
        
        await batch.commit();
        
        // Also update local state for immediate UI feedback if needed
        setAdmins(prev => [...prev, newAdmin]);

        toast({
            title: "Registration Submitted!",
            description: "Your school account has been created and is pending approval from the platform owner. You will be notified upon activation.",
            duration: 9000,
        });

        router.push("/");

    } catch (err) {
      console.error("Registration Error:", err);
      setError("An unexpected error occurred. Please try again.");
    } finally {
      setIsRegistering(false);
    }
  };
  
  const renderStepOne = () => (
     <div className="space-y-4">
        <div className="space-y-2">
            <Label htmlFor="schoolName">School Name</Label>
            <Input id="schoolName" name="schoolName" value={formData.schoolName} onChange={handleInputChange} placeholder="e.g., Bright Stars Academy" disabled={isRegistering} />
        </div>
        <div className="space-y-2">
            <Label htmlFor="adminName">Your Full Name (Chief Admin)</Label>
            <Input id="adminName" name="adminName" value={formData.adminName} onChange={handleInputChange} placeholder="e.g., Jane Doe" disabled={isRegistering} />
        </div>
        <div className="space-y-2">
            <Label htmlFor="adminEmail">Your Email Address</Label>
            <Input id="adminEmail" name="adminEmail" type="email" value={formData.adminEmail} onChange={handleInputChange} placeholder="e.g., admin@brightstars.com" disabled={isRegistering} />
        </div>
        <div className="space-y-2">
            <Label htmlFor="adminPhone">Your Phone Number</Label>
            <Input id="adminPhone" name="adminPhone" type="tel" value={formData.adminPhone} onChange={handleInputChange} placeholder="e.g., 08012345678" disabled={isRegistering} />
        </div>
        
        {error && <p className="text-sm text-destructive">{error}</p>}
        
        <Button onClick={handleNextStep} className="w-full" disabled={isRegistering}>
            Next: Subscription
        </Button>
    </div>
  );

  const renderStepTwo = () => (
    <div className="space-y-4">
        <div className="text-center">
            <h3 className="font-bold text-lg">Subscription Details</h3>
            <p className="text-sm text-muted-foreground">To activate your school, please complete the subscription payment.</p>
        </div>

        <div className="grid grid-cols-2 gap-4">
            <Card className="p-4 text-center">
                <p className="font-bold text-xl">₦150,000</p>
                <p className="text-sm text-muted-foreground">Per Year</p>
            </Card>
             <Card className="p-4 text-center">
                <p className="font-bold text-xl">₦15,000</p>
                <p className="text-sm text-muted-foreground">Per Month</p>
            </Card>
        </div>
        
         <Card className="bg-blue-500/10 border-blue-500/20">
            <CardHeader className="p-4">
                <CardTitle className="text-base font-headline flex items-center gap-2 text-blue-800 dark:text-blue-300">
                    <Landmark className="h-5 w-5" /> Bank Payment Details
                </CardTitle>
            </CardHeader>
            <CardContent className="p-4 pt-0 text-sm text-blue-700 dark:text-blue-300 space-y-2">
                <div className="flex justify-between"><span>Account Name:</span> <span className="font-semibold">Ekwuribe Lucky chidozie</span></div>
                <div className="flex justify-between"><span>Account Number:</span> <span className="font-semibold">7037742669</span></div>
                <div className="flex justify-between"><span>Bank:</span> <span className="font-semibold">Moniepoint MFB</span></div>
            </CardContent>
        </Card>

        <div className="pt-4 space-y-3">
             <div className="flex items-center space-x-2">
                <Checkbox id="payment-confirmation" checked={paymentConfirmed} onCheckedChange={(checked) => setPaymentConfirmed(checked as boolean)} />
                <label
                    htmlFor="payment-confirmation"
                    className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
                >
                    I have made the payment for the subscription.
                </label>
            </div>
            <p className="text-xs text-muted-foreground">After payment, your account will be created with a 'Blocked' status. The platform owner will verify your payment and activate your school's account within 24 hours.</p>
        </div>

        <Button onClick={handleRegister} className="w-full" disabled={isRegistering || !paymentConfirmed}>
            {isRegistering ? <Loader2 className="animate-spin" /> : <ShieldCheck className="mr-2" />}
            Complete Registration
        </Button>
         <Button variant="outline" onClick={() => setStep(1)} className="w-full">
            Back
        </Button>
    </div>
  );

  return (
    <main className="flex min-h-screen flex-col items-center justify-center bg-background p-4">
       <div className="w-full max-w-md">
            <Button variant="ghost" asChild className="mb-4">
                <Link href="/"><ArrowLeft className="mr-2"/> Back to Login</Link>
            </Button>
            <Card className="w-full shadow-xl">
                <CardHeader className="text-center">
                    <Icons.Logo className="h-12 w-12 mx-auto" />
                    <CardTitle className="text-2xl font-headline mt-2">Register Your School</CardTitle>
                    <CardDescription>Join the encon concept platform today.</CardDescription>
                </CardHeader>
                <CardContent>
                    {step === 1 ? renderStepOne() : renderStepTwo()}
                </CardContent>
            </Card>
        </div>
    </main>
  );
}
`,
    "src/components/dashboard/add-event-form.tsx": `"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { CalendarIcon, Loader2, PlusCircle, Sparkles } from "lucide-react";
import { useState } from "react";
import { refineCalendarData } from "@/ai/flows/calendar-data-refinement";
import type { CalendarEvent } from "./calendar-view";
import { useToast } from "@/hooks/use-toast";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";
import { cn } from "@/lib/utils";
import { format } from "date-fns";
import { Calendar } from "../ui/calendar";

const formSchema = z.object({
  title: z.string().min(2, "Title must be at least 2 characters.").max(100),
  date: z.date({ required_error: "A date is required." }),
  rawContent: z.string().min(10, "Description must be at least 10 characters."),
});

type AddEventFormProps = {
  onAddEvent: (event: CalendarEvent) => void;
};

export default function AddEventForm({ onAddEvent }: AddEventFormProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const { toast } = useToast();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      rawContent: "",
    },
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    setIsProcessing(true);
    try {
      const result = await refineCalendarData({ calendarData: values.rawContent });
      const newEvent: CalendarEvent = {
        date: values.date,
        title: values.title,
        description: result.refinedCalendarData,
      };
      onAddEvent(newEvent);
      form.reset();
      setIsOpen(false);
      toast({
        title: "Event Added",
        description: "The new event has been added to your calendar.",
      });
    } catch (error) {
      console.error("AI refinement failed:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Could not refine or add the event. Please try again.",
      });
    } finally {
      setIsProcessing(false);
    }
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          Add Event
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle className="font-headline flex items-center gap-2">
            <Sparkles className="h-5 w-5 text-accent" />
            Add AI-Powered Event
          </DialogTitle>
          <DialogDescription>
            Describe your event, and our AI will format it for the calendar.
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Event Title</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Final Exam Study Session" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="date"
              render={({ field }) => (
                <FormItem className="flex flex-col">
                  <FormLabel>Date</FormLabel>
                  <Popover>
                    <PopoverTrigger asChild>
                      <FormControl>
                        <Button
                          variant={"outline"}
                          className={cn(
                            "w-full pl-3 text-left font-normal",
                            !field.value && "text-muted-foreground"
                          )}
                        >
                          {field.value ? (
                            format(field.value, "PPP")
                          ) : (
                            <span>Pick a date</span>
                          )}
                          <CalendarIcon className="ml-auto h-4 w-4 opacity-50" />
                        </Button>
                      </FormControl>
                    </PopoverTrigger>
                    <PopoverContent className="w-auto p-0" align="start">
                      <Calendar
                        mode="single"
                        selected={field.value}
                        onSelect={field.onChange}
                        initialFocus
                      />
                    </PopoverContent>
                  </Popover>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="rawContent"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Event Description</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="e.g., meeting tomorrow at 3pm in the library to study for the physics final, bring notes"
                      className="min-h-[120px]"
                      {...field}
                    />
                  </FormControl>
                   <FormDescription>
                    Provide the raw details. The AI will clean it up.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <DialogClose asChild>
                <Button type="button" variant="secondary" disabled={isProcessing}>
                  Cancel
                </Button>
              </DialogClose>
              <Button type="submit" disabled={isProcessing}>
                {isProcessing ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    Refine & Add
                  </>
                )}
              </Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
`,
    "src/components/dashboard/announcement-card.tsx": `// src/components/dashboard/announcement-card.tsx
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import MarkdownRenderer from "@/components/markdown-renderer";
import type { Announcement } from "@/lib/data";
import { Megaphone, AlertTriangle, CalendarCheck, Shield } from "lucide-react";
import { cn } from "@/lib/utils";

interface AnnouncementCardProps {
  announcement: Announcement;
}

const categoryStyles = {
  General: {
    icon: Megaphone,
    bgColor: "bg-blue-500",
    textColor: "text-blue-50",
  },
  Urgent: {
    icon: AlertTriangle,
    bgColor: "bg-red-500",
    textColor: "text-red-50",
  },
  Event: {
    icon: CalendarCheck,
    bgColor: "bg-green-500",
    textColor: "text-green-50",
  },
  'Staff Only': {
    icon: Shield,
    bgColor: "bg-purple-600",
    textColor: "text-purple-50",
  }
};

export default function AnnouncementCard({ announcement }: AnnouncementCardProps) {
  const category = announcement.category || 'General';
  const styles = categoryStyles[category];
  const Icon = styles.icon;

  return (
    <Card className="hover:shadow-lg transition-shadow duration-300 flex flex-col">
      <div className={cn("p-4 rounded-t-lg flex items-center gap-4", styles.bgColor, styles.textColor)}>
          <Icon className="h-8 w-8" />
          <h2 className="text-lg font-bold font-headline">{announcement.title}</h2>
      </div>
      <CardHeader className="pt-4">
        <CardDescription>
          By {announcement.author} on {new Date(announcement.date).toLocaleDateString()}
        </CardDescription>
      </CardHeader>
      <CardContent className="flex-grow">
        <MarkdownRenderer content={announcement.content} />
      </CardContent>
    </Card>
  );
}
`,
    "src/components/dashboard/announcement-form.tsx": `// src/components/dashboard/announcement-form.tsx
"use client";

import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog";
import { PlusCircle } from "lucide-react";
import { useState } from "react";
import { type Announcement } from "@/lib/data";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "../ui/select";
import { useUser } from "@/context/user-context";

const formSchema = z.object({
  title: z.string().min(2, "Title must be at least 2 characters.").max(100),
  category: z.enum(["General", "Urgent", "Event", "Staff Only"]),
  content: z.string().min(10, "Content must be at least 10 characters."),
});

type AnnouncementFormProps = {
  onAddAnnouncement: (values: z.infer<typeof formSchema>) => void;
};

export default function AnnouncementForm({ onAddAnnouncement }: AnnouncementFormProps) {
  const [isOpen, setIsOpen] = useState(false);
  const { user } = useUser();
  
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      title: "",
      category: "General",
      content: "",
    },
  });

  function onSubmit(values: z.infer<typeof formSchema>) {
    onAddAnnouncement(values);
    form.reset();
    setIsOpen(false);
  }

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        <Button>
          <PlusCircle className="mr-2 h-4 w-4" />
          New Announcement
        </Button>
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="font-headline">New Announcement</DialogTitle>
          <DialogDescription>
            Compose a new announcement. Markdown is supported.
          </DialogDescription>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Title</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., Campus Closure Notice" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
             <FormField
              control={form.control}
              name="category"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Category</FormLabel>
                  <Select onValueChange={field.onChange} defaultValue={field.value}>
                    <FormControl>
                        <SelectTrigger>
                            <SelectValue placeholder="Select a category" />
                        </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                        <SelectItem value="General">General (All Users)</SelectItem>
                        <SelectItem value="Urgent">Urgent (All Users)</SelectItem>
                        <SelectItem value="Event">Event (All Users)</SelectItem>
                        {user?.role === 'Admin' && <SelectItem value="Staff Only">Staff Only</SelectItem>}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="content"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Content</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="e.g., The campus will be closed on **Monday** due to..."
                      className="min-h-[150px]"
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <DialogFooter>
              <DialogClose asChild>
                <Button type="button" variant="secondary">
                  Cancel
                </Button>
              </DialogClose>
              <Button type="submit">Publish</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
`,
    "src/components/dashboard/calendar-view.tsx": `"use client";

import { useState } from "react";
import { Calendar } from "@/components/ui/calendar";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "../ui/scroll-area";

export interface CalendarEvent {
  date: Date;
  title: string;
  description: string;
}

interface CalendarViewProps {
  events: CalendarEvent[];
}

export default function CalendarView({ events }: CalendarViewProps) {
  const [date, setDate] = useState<Date | undefined>(new Date());

  const selectedDayEvents = events.filter(
    (event) => date && event.date.toDateString() === date.toDateString()
  );

  const eventDays = events.map(e => e.date);

  return (
    <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
      <Card className="lg:col-span-2">
        <CardContent className="p-2 sm:p-4">
          <Calendar
            mode="single"
            selected={date}
            onSelect={setDate}
            className="rounded-md"
            modifiers={{
                events: eventDays
            }}
            modifiersClassNames={{
                events: "bg-primary/20 text-primary-foreground rounded-md"
            }}
          />
        </CardContent>
      </Card>
      <Card className="lg:col-span-1 h-fit">
        <CardHeader>
          <CardTitle className="font-headline text-lg">
            Events for {date ? date.toLocaleDateString() : "selected day"}
          </CardTitle>
        </CardHeader>
        <CardContent>
            <ScrollArea className="h-[300px]">
                {selectedDayEvents.length > 0 ? (
                    <div className="space-y-4">
                    {selectedDayEvents.map((event, index) => (
                        <div key={index} className="p-3 bg-muted/50 rounded-lg">
                        <h4 className="font-semibold">{event.title}</h4>
                        <p className="text-sm text-muted-foreground">{event.description}</p>
                        </div>
                    ))}
                    </div>
                ) : (
                    <p className="text-sm text-muted-foreground">No events for this day.</p>
                )}
            </ScrollArea>
        </CardContent>
      </Card>
    </div>
  );
}
`,
    "src/components/dashboard/messaging/compose-message.tsx": `// src/components/dashboard/messaging/compose-message.tsx
"use client";

import { useState } from 'react';
import { useUser } from '@/context/user-context';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectGroup, SelectItem, SelectLabel, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import type { Conversation, User, Message } from '@/lib/data';

export function ComposeMessage() {
    const { user, admins, staff, students, setConversations } = useUser();
    const [recipient, setRecipient] = useState('');
    const [topic, setTopic] = useState('');
    const [message, setMessage] = useState('');
    const { toast } = useToast();

    const getRecipientId = (user: User) => user.role === 'Student' ? user.regNo : user.email;

    const allPossibleRecipients = [
        ...admins.filter(a => getRecipientId(a) !== getRecipientId(user!)), 
        ...staff.filter(s => getRecipientId(s) !== getRecipientId(user!)), 
        ...students.filter(s => getRecipientId(s) !== getRecipientId(user!))
    ];
    
    const studentRecipients = students.filter(s => getRecipientId(s) !== getRecipientId(user!));
    const staffRecipients = staff.filter(s => getRecipientId(s) !== getRecipientId(user!));
    const adminRecipients = admins.filter(a => getRecipientId(a) !== getRecipientId(user!));


    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (!recipient || !topic.trim() || !message.trim() || !user) {
            toast({ variant: 'destructive', title: 'Missing fields', description: 'Please fill out all fields to send a message.' });
            return;
        }

        const myId = getRecipientId(user);
        if (!myId) return;

        const newConversation: Conversation = {
            id: \`convo-\${Date.now()}\`,
            participants: [myId, recipient],
            topic: topic,
            unread: false,
            messages: [
                {
                    id: \`msg-\${Date.now()}\`,
                    senderId: myId,
                    text: message,
                    timestamp: new Date().toISOString(),
                }
            ]
        };

        setConversations(prev => [newConversation, ...prev]);
        toast({ title: 'Message Sent', description: 'Your message has been sent successfully.'});
        setRecipient('');
        setTopic('');
        setMessage('');
    };

    return (
        <Card className="h-full flex flex-col">
            <CardHeader>
                <CardTitle>Compose New Message</CardTitle>
                <CardDescription>Send a new message to a member of the school community.</CardDescription>
            </CardHeader>
            <CardContent className="flex-grow">
                <form onSubmit={handleSubmit} className="space-y-4">
                     <div className="space-y-2">
                        <Label htmlFor="recipient">Recipient</Label>
                        <Select onValueChange={setRecipient} value={recipient}>
                            <SelectTrigger id="recipient">
                                <SelectValue placeholder="Select a recipient" />
                            </SelectTrigger>
                            <SelectContent>
                                {adminRecipients.length > 0 && (
                                    <SelectGroup>
                                        <SelectLabel>Administrators</SelectLabel>
                                        {adminRecipients.map(u => <SelectItem key={getRecipientId(u)} value={getRecipientId(u)!}>{u.name}</SelectItem>)}
                                    </SelectGroup>
                                )}
                                {staffRecipients.length > 0 && (
                                     <SelectGroup>
                                        <SelectLabel>Staff</SelectLabel>
                                        {staffRecipients.map(u => <SelectItem key={getRecipientId(u)} value={getRecipientId(u)!}>{u.name}</SelectItem>)}
                                    </SelectGroup>
                                )}
                                {studentRecipients.length > 0 && (
                                    <SelectGroup>
                                        <SelectLabel>Students</SelectLabel>
                                        {studentRecipients.map(u => <SelectItem key={getRecipientId(u)} value={getRecipientId(u)!}>{u.name}</SelectItem>)}
                                    </SelectGroup>
                                )}
                            </SelectContent>
                        </Select>
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="topic">Topic</Label>
                        <Input id="topic" placeholder="e.g., Question about homework" value={topic} onChange={(e) => setTopic(e.target.value)} />
                    </div>
                     <div className="space-y-2">
                        <Label htmlFor="message">Message</Label>
                        <Textarea id="message" placeholder="Type your message here..." className="min-h-[200px]" value={message} onChange={(e) => setMessage(e.target.value)} />
                    </div>
                    <Button type="submit" className="w-full">Send Message</Button>
                </form>
            </CardContent>
        </Card>
    );
}
`,
    "src/components/dashboard/messaging/conversation-list.tsx": `// src/components/dashboard/messaging/conversation-list.tsx
"use client";

import { useUser } from '@/context/user-context';
import type { Conversation, User } from '@/lib/data';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import { PlusCircle, User as UserIcon } from 'lucide-react';
import { useMemo } from 'react';

interface ConversationListProps {
    conversations: Conversation[];
    onSelectConversation: (conversation: Conversation) => void;
    selectedConversationId?: string | null;
    onStartComposing: () => void;
    isComposing: boolean;
}

export function ConversationList({ conversations, onSelectConversation, selectedConversationId, onStartComposing, isComposing }: ConversationListProps) {
    const { user, admins, staff, students } = useUser();
    
    const allUsers = useMemo(() => {
        const userMap = new Map<string, Pick<User, 'name' | 'avatar'>>();
        
        admins.forEach(u => u.email && userMap.set(u.email, { name: u.name, avatar: u.avatar }));
        staff.forEach(u => u.email && userMap.set(u.email, { name: u.name, avatar: u.avatar }));
        students.forEach(u => u.regNo && userMap.set(u.regNo, { name: u.name, avatar: u.avatar }));
        students.forEach(u => u.parentContact && userMap.set(u.parentContact, { name: \`Parent of \${u.name}\`, avatar: u.avatar }));

        return userMap;
    }, [admins, staff, students]);

    const getOtherParticipant = (participants: string[]) => {
        if (!user) return null;
        const myId = user.role === 'Student' ? user.regNo : user.role === 'Parent' ? user.phoneNo : user.email;
        const otherId = participants.find(p => p !== myId);
        return otherId ? allUsers.get(otherId) : null;
    };
    
    return (
        <Card className="h-full flex flex-col">
            <CardHeader className="flex-shrink-0">
                <div className="flex justify-between items-center">
                    <CardTitle>Conversations</CardTitle>
                    <Button variant="ghost" size="icon" onClick={onStartComposing}>
                        <PlusCircle />
                    </Button>
                </div>
            </CardHeader>
            <CardContent className="p-2 flex-grow min-h-0">
                <ScrollArea className="h-full">
                    <div className="space-y-1">
                        {conversations.map(convo => {
                            const otherUser = getOtherParticipant(convo.participants);
                            const lastMessage = convo.messages[convo.messages.length - 1];

                            return (
                                <button 
                                    key={convo.id} 
                                    onClick={() => onSelectConversation(convo)}
                                    className={cn(
                                        "w-full text-left p-3 rounded-lg flex items-center gap-3 transition-colors",
                                        convo.id === selectedConversationId ? "bg-accent" : "hover:bg-muted/50"
                                    )}
                                >
                                    <Avatar>
                                        <AvatarImage src={otherUser?.avatar} alt={otherUser?.name || 'User'} data-ai-hint="person" />
                                        <AvatarFallback>
                                            {otherUser ? otherUser.name.charAt(0) : <UserIcon />}
                                        </AvatarFallback>
                                    </Avatar>
                                    <div className="flex-grow overflow-hidden">
                                        <p className={cn("font-semibold truncate", convo.unread && "font-bold")}>{otherUser?.name || 'Unknown User'}</p>
                                        <p className="text-xs text-muted-foreground truncate">{lastMessage?.text}</p>
                                    </div>
                                    {convo.unread && <div className="w-2 h-2 rounded-full bg-primary flex-shrink-0"></div>}
                                </button>
                            );
                        })}
                    </div>
                </ScrollArea>
            </CardContent>
        </Card>
    );
}
`,
    "src/components/dashboard/messaging/message-view.tsx": `// src/components/dashboard/messaging/message-view.tsx
"use client";

import { useState } from 'react';
import type { Conversation, User, Message } from '@/lib/data';
import { useUser } from '@/context/user-context';
import { Card, CardContent, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Send } from 'lucide-react';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import { cn } from '@/lib/utils';
import { formatDistanceToNow } from 'date-fns';

interface MessageViewProps {
    conversation: Conversation;
    currentUser: User;
}

export function MessageView({ conversation, currentUser }: MessageViewProps) {
    const { setConversations } = useUser();
    const [newMessage, setNewMessage] = useState('');
    
    const myId = currentUser.role === 'Student' ? currentUser.regNo : currentUser.email;

    const handleSendMessage = (e: React.FormEvent) => {
        e.preventDefault();
        if (!newMessage.trim() || !myId) return;

        const messageToSend: Message = {
            id: \`msg-\${Date.now()}\`,
            senderId: myId,
            text: newMessage.trim(),
            timestamp: new Date().toISOString(),
        };
        
        setConversations(prev => 
            prev.map(c => 
                c.id === conversation.id
                ? { ...c, messages: [...c.messages, messageToSend] }
                : c
            )
        );

        setNewMessage('');
    };

    return (
        <Card className="h-full flex flex-col">
            <CardHeader className="flex-shrink-0">
                <CardTitle>{conversation.topic}</CardTitle>
            </CardHeader>
            <CardContent className="flex-grow overflow-hidden p-2">
                <ScrollArea className="h-full pr-4">
                    <div className="space-y-4">
                        {conversation.messages.map(message => {
                             const isMe = message.senderId === myId;
                             return (
                                <div key={message.id} className={cn("flex items-end gap-2", isMe ? "justify-end" : "justify-start")}>
                                    {!isMe && <Avatar className="h-8 w-8"><AvatarFallback>O</AvatarFallback></Avatar>}
                                    <div className={cn(
                                        "max-w-xs md:max-w-md lg:max-w-lg p-3 rounded-2xl",
                                        isMe ? "bg-primary text-primary-foreground rounded-br-none" : "bg-muted rounded-bl-none"
                                    )}>
                                        <p className="text-sm">{message.text}</p>
                                        <p className="text-xs opacity-70 mt-1 text-right">{formatDistanceToNow(new Date(message.timestamp), { addSuffix: true })}</p>
                                    </div>
                                    {isMe && <Avatar className="h-8 w-8"><AvatarImage src={currentUser.avatar} alt={currentUser.name} /></Avatar>}
                                </div>
                             )
                        })}
                    </div>
                </ScrollArea>
            </CardContent>
            <CardFooter className="pt-4 border-t">
                <form onSubmit={handleSendMessage} className="flex w-full items-center space-x-2">
                    <Input 
                        placeholder="Type a message..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        autoComplete="off"
                    />
                    <Button type="submit" size="icon" disabled={!newMessage.trim()}>
                        <Send className="h-4 w-4" />
                        <span className="sr-only">Send</span>
                    </Button>
                </form>
            </CardFooter>
        </Card>
    );
}
`,
    "src/components/dashboard/teacher-card.tsx": `import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Card, CardContent } from "@/components/ui/card";
import { Mail } from "lucide-react";
import type { Staff } from "@/lib/data";


interface StaffCardProps {
  staff: Staff;
}

export default function StaffCard({ staff }: StaffCardProps) {
  const nameInitials = staff.name
    .split(" ")
    .map((n) => n[0])
    .join("");

  return (
    <Card className="hover:shadow-md transition-shadow">
      <CardContent className="p-6 flex flex-col items-center text-center">
        <Avatar className="h-20 w-20 mb-4">
          <AvatarImage src={staff.avatar} alt={staff.name} data-ai-hint="person" />
          <AvatarFallback>{nameInitials}</AvatarFallback>
        </Avatar>
        <h3 className="font-headline font-semibold text-lg">{staff.name}</h3>
        <p className="text-muted-foreground">{staff.position}</p>
        <a
          href={\`mailto:\${staff.email}\`}
          className="mt-2 text-sm text-primary/80 hover:text-primary flex items-center gap-1"
        >
          <Mail className="h-3 w-3" />
          {staff.email}
        </a>
      </CardContent>
    </Card>
  );
}
`,
    "src/components/icons.tsx": `import { type SVGProps } from 'react';

export const Icons = {
  Logo: (props: SVGProps<SVGSVGElement>) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" fill="#003366" stroke="none" />
      <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H17.5A2.5 2.5 0 0 1 20 19.5" fill="#003366" stroke="none" />
      <path d="M4 19.5V19c0-1.1.9-2 2-2h12c1.1 0 2 .9 2 2v.5" fill="#003366" stroke="none" />
      
      {/* Tree/Person */}
      <circle cx="12" cy="10" r="1.5" fill="#3E863E" stroke="none" />
      <path d="M12 11.5v5.5" stroke="#3E863E" strokeWidth="2" />
      <path d="M10 14h4" stroke="#3E863E" strokeWidth="2" />

      {/* Leaves */}
      <path d="M12 10 a2 2 0 0 1-1.73 -1" fill="none" stroke="#3E863E" strokeWidth="1.5" />
      <path d="M12 10 a2 2 0 0 1 1.73 -1" fill="none" stroke="#3E863E" strokeWidth="1.5" />
      
      <circle cx="9.5" cy="8.5" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="14.5" cy="8.5" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="12" cy="7" r="1.2" fill="#3E863E" stroke="none" />

      <circle cx="8" cy="6" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="16" cy="6" r="1.2" fill="#3E863E" stroke="none" />
      
      <circle cx="10" cy="4.5" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="14" cy="4.5" r="1.2" fill="#3E863E" stroke="none" />
    </svg>
  ),
};
`,
    "src/components/layout/command-menu.tsx": `// src/components/layout/command-menu.tsx
"use client";

import * as React from "react";
import { useRouter } from "next/navigation";
import {
  CommandDialog,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from "@/components/ui/command";
import { useUser } from "@/context/user-context";
import { navItems } from "./sidebar-items"; // We'll create this file next

export function CommandMenu() {
  const router = useRouter();
  const [open, setOpen] = React.useState(false);
  const { user } = useUser();

  React.useEffect(() => {
    const down = (e: KeyboardEvent) => {
      if ((e.key === "k" && (e.metaKey || e.ctrlKey)) || e.key === "/") {
        if (
          (e.target instanceof HTMLElement && e.target.isContentEditable) ||
          e.target instanceof HTMLInputElement ||
          e.target instanceof HTMLTextAreaElement ||
          e.target instanceof HTMLSelectElement
        ) {
          return;
        }

        e.preventDefault();
        setOpen((open) => !open);
      }
    };

    document.addEventListener("keydown", down);
    return () => document.removeEventListener("keydown", down);
  }, []);

  const runCommand = React.useCallback((command: () => unknown) => {
    setOpen(false);
    command();
  }, []);
  
  if (!user) return null;

  const filteredNavItems = navItems.filter(item => {
    if (!item.roles.includes(user.role)) return false;
    if (item.chiefAdminOnly && !user.isChiefAdmin) return false;
    if (item.platformOwnerOnly && user.schoolId !== 'encon-initial') return false;
    return true;
  });

  return (
    <CommandDialog open={open} onOpenChange={setOpen}>
      <CommandInput placeholder="Type a command or search..." />
      <CommandList>
        <CommandEmpty>No results found.</CommandEmpty>
        <CommandGroup heading="Navigation">
          {filteredNavItems.map((item) => (
            <CommandItem
              key={item.href}
              value={item.label}
              onSelect={() => runCommand(() => router.push(item.href))}
            >
              <item.icon className="mr-2 h-4 w-4" />
              {item.label}
            </CommandItem>
          ))}
        </CommandGroup>
      </CommandList>
    </CommandDialog>
  );
}
`,
    "src/components/layout/footer.tsx": `import { Mail, Facebook, MessageCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';

export function Footer() {
  return (
    <footer className="mt-auto border-t bg-background px-6 py-4">
      <div className="flex flex-col items-center justify-between gap-4 sm:flex-row">
        <p className="text-sm text-muted-foreground">
          Designed & Developed by encon concept
        </p>
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="icon" asChild>
            <a href="mailto:designer@example.com" aria-label="Email">
              <Mail className="h-4 w-4" />
            </a>
          </Button>
          <Button variant="ghost" size="icon" asChild>
            <a href="https://facebook.com/encon" target="_blank" rel="noopener noreferrer" aria-label="Facebook">
              <Facebook className="h-4 w-4" />
            </a>
          </Button>
          <Button variant="ghost" size="icon" asChild>
            <a href="https://wa.me/2347037742669" target="_blank" rel="noopener noreferrer" aria-label="WhatsApp">
              <MessageCircle className="h-4 w-4" />
            </a>
          </Button>
        </div>
      </div>
    </footer>
  );
}
`,
    "src/components/layout/header.tsx": `"use client";

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { useUser, type User } from "@/context/user-context";
import { SidebarTrigger } from "../ui/sidebar";
import { cn } from "@/lib/utils";
import { GraduationCap, LogOut, Shield, User as UserIcon, Building, ShieldHalf, UserSquare, Library, Search } from "lucide-react";
import { Icons } from "../ui/icons";
import { useRouter } from "next/navigation";


const RoleIcons = {
  Admin: Shield,
  Staff: GraduationCap,
  Student: UserIcon,
  Parent: ShieldHalf,
};

export function Header() {
  const { user, setUser, admins, staff, students: allStudents } = useUser();
  const router = useRouter();
  
  if (!user) return null;

  const Icon = RoleIcons[user.role];

  const handleLogout = () => {
    setUser(null);
    router.push('/');
  }
  
  const allUsersForSwitching = [
      ...admins,
      ...staff.map(t => ({...t, role: 'Staff' as const})),
      ...allStudents.map(s => ({
          ...s,
          name: \`\${s.firstName} \${s.surname}\`,
          role: 'Student' as const
      }))
  ];

  return (
    <header className="sticky top-0 z-40 w-full border-b bg-card">
      <div className="container flex h-16 items-center space-x-4 sm:justify-between sm:space-x-0">
        <div className="flex gap-6 md:gap-10">
            <div className="flex items-center space-x-2 md:hidden">
                <SidebarTrigger />
                <Icons.Logo className="h-6 w-6" />
                <span className="font-bold font-headline">{user.schoolName || "encon concept"}</span>
            </div>
        </div>
        <div className="flex flex-1 items-center justify-end space-x-4">
           <p className="text-sm text-muted-foreground hidden md:block">
              Press{" "}
              <kbd className="pointer-events-none inline-flex h-5 select-none items-center gap-1 rounded border bg-muted px-1.5 font-mono text-[10px] font-medium text-muted-foreground opacity-100">
                <span className="text-xs">⌘</span>K
              </kbd>{" "}
              to search
            </p>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="relative h-8 w-8 rounded-full">
                <Avatar className="h-9 w-9">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback>{user.name.charAt(0)}</AvatarFallback>
                </Avatar>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-56" align="end" forceMount>
              <DropdownMenuLabel className="font-normal">
                <div className="flex flex-col space-y-1">
                  <p className="text-sm font-medium leading-none">{user.name}</p>
                   <div className="flex items-center gap-1">
                    <Icon className="h-3 w-3 text-muted-foreground" />
                    <p className="text-xs leading-none text-muted-foreground">
                      {user.isChiefAdmin ? 'Chief Admin' : user.role}
                    </p>
                  </div>
                  {user.role === 'Admin' && user.schoolName && (
                    <div className="flex items-center gap-1">
                      <Building className="h-3 w-3 text-muted-foreground" />
                      <p className="text-xs leading-none text-muted-foreground">{user.schoolName}</p>
                    </div>
                  )}
                   {(user.role === 'Student' || user.role === 'Staff') && (
                    <div className="flex items-center gap-1">
                      <UserSquare className="h-3 w-3 text-muted-foreground" />
                      <p className="text-xs leading-none text-muted-foreground">
                        {user.role === 'Student' ? user.regNo : user.staffId}
                      </p>
                    </div>
                  )}
                </div>
              </DropdownMenuLabel>
              <DropdownMenuSeparator />
               <DropdownMenuItem onSelect={handleLogout}>
                <LogOut className="mr-2 h-4 w-4" />
                <span>Log out</span>
              </DropdownMenuItem>
              {user.schoolId === 'encon-initial' && (
                <>
                <DropdownMenuSeparator />
                <DropdownMenuLabel>Switch Role (Demo)</DropdownMenuLabel>
                {allUsersForSwitching.map((u: User, index: number) => (
                  <DropdownMenuItem key={\`\${u.email || u.regNo}-\${index}\`} onSelect={() => setUser(u)} disabled={(u.email && u.email === user.email) || (u.regNo && u.regNo === user.regNo)}>
                    <div className="flex items-center gap-2">
                      <Avatar className="h-6 w-6">
                          <AvatarImage src={u.avatar} alt={u.name} />
                          <AvatarFallback>{u.name.charAt(0)}</AvatarFallback>
                      </Avatar>
                      <span>{u.name} ({u.role})</span>
                    </div>
                  </DropdownMenuItem>
                ))}
                </>
              )}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
    </header>
  );
}
`,
    "src/components/layout/sidebar-items.ts": `// src/components/layout/sidebar-items.ts
import {
  LayoutDashboard,
  Megaphone,
  Calendar,
  Users,
  UserPlus,
  BookOpen,
  ClipboardCheck,
  Library,
  CreditCard,
  FileText,
  ShieldCheck,
  UserSquare,
  Building,
  BookMarked,
  Building2,
  MessageSquareWarning,
  Eye,
  BookCheck as AssignmentIcon,
  ClipboardList,
  Mail,
  Settings,
} from "lucide-react";

export const navItems = [
    { href: "/dashboard", icon: LayoutDashboard, label: "Dashboard", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/announcements", icon: Megaphone, label: "Announcements", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/messaging", icon: Mail, label: "Messaging", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/calendar", icon: Calendar, label: "Calendar", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/id-card", icon: UserSquare, label: "ID Card", roles: ["Student"] },
    { href: "/dashboard/academics", icon: BookOpen, label: "Academics", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/assignments", icon: AssignmentIcon, label: "Assignments", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/lesson-plan", icon: ClipboardList, label: "Lesson Plan", roles: ["Admin", "Staff"] },
    { href: "/dashboard/classes", icon: Building2, label: "Classes", roles: ["Admin"] },
    { href: "/dashboard/subjects", icon: BookMarked, label: "Subjects", roles: ["Admin", "Student"] },
    { href: "/dashboard/materials", icon: Library, label: "Learning Materials", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/directory", icon: Users, label: "Directory", roles: ["Admin", "Staff", "Student", "Parent"] },
    { href: "/dashboard/enrollment", icon: UserPlus, label: "Enrollment", roles: ["Admin", "Staff"] },
    { href: "/dashboard/attendance", icon: ClipboardCheck, label: "Attendance", roles: ["Admin", "Staff"] },
    { href: "/dashboard/finance", icon: CreditCard, label: "Finance", roles: ["Admin", "Student", "Parent"],
      subItems: [
        { href: "/dashboard/finance/settings", icon: Settings, label: "Settings", roles: ["Admin"], chiefAdminOnly: true }
      ]
    },
    { href: "/dashboard/cbt", icon: FileText, label: "CBT Platform", roles: ["Admin", "Staff", "Student"] },
    { href: "/dashboard/report-issue", icon: MessageSquareWarning, label: "Report Issue", roles: ["Student"] },
    { href: "/dashboard/reports", icon: Eye, label: "View Reports", roles: ["Admin"] },
    { href: "/dashboard/management", icon: ShieldCheck, label: "User Management", roles: ["Admin"], chiefAdminOnly: true },
    { href: "/dashboard/schools", icon: Building, label: "Schools", roles: ["Admin"], chiefAdminOnly: true, platformOwnerOnly: true },
  ];
`,
    "src/components/layout/sidebar.tsx": `// src/components/layout/sidebar.tsx
"use client";

import Link from "next/link";
import { usePathname } from "next/navigation";
import {
  Sidebar,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuItem,
  SidebarMenuButton,
  SidebarContent,
  SidebarMenuSub,
  SidebarMenuSubButton,
} from "@/components/ui/sidebar";
import { Icons } from "@/components/ui/icons";
import { cn } from "@/lib/utils";
import { useUser } from "@/context/user-context";
import { navItems } from "./sidebar-items";

export function AppSidebar() {
  const pathname = usePathname();
  const { user, schoolClasses } = useUser();

  const hasVisibleSubItems = (item: any) => {
    if (!user) return false;
    return item.subItems?.some((subItem: any) => {
      if (!subItem.roles.includes(user.role)) return false;
      if (subItem.chiefAdminOnly && !user.isChiefAdmin) return false;
      return true;
    });
  }
  
  if (!user) return null;

  const filteredNavItems = navItems.filter(item => {
    if (!user || !user.role) return false;
    if (!item.roles.includes(user.role)) return false;
    
    if (item.chiefAdminOnly && !user.isChiefAdmin) return false;
    if (item.platformOwnerOnly && user.schoolId !== 'encon-initial') return false;

    if (item.href === '/dashboard/subjects' && user.role === 'Student') {
      const studentClass = schoolClasses.find(c => c.id === user.classId);
      if (studentClass?.category !== 'highSchool') {
        return false;
      }
    }
    
    return true;
  });
  

  return (
    <Sidebar variant="sidebar" collapsible="icon" className="border-r">
      <SidebarHeader>
        <Link
          href="/dashboard"
          className="flex items-center gap-2 font-bold font-headline text-lg"
        >
          <Icons.Logo
            className={cn(
              "size-6 transition-transform ease-in-out group-data-[collapsible=icon]:group-data-[state=expanded]:rotate-0"
            )}
          />
          <span className="group-data-[collapsible=icon]:group-data-[state=expanded]:opacity-100 group-data-[collapsible=icon]:opacity-0 transition-opacity duration-200 truncate">
             {user?.schoolName || 'encon concept'}
          </span>
        </Link>
      </SidebarHeader>
      <SidebarContent>
        <SidebarMenu>
          {filteredNavItems.map((item) => (
            <SidebarMenuItem key={item.href}>
                <SidebarMenuButton
                  asChild
                  isActive={pathname.startsWith(item.href) && (item.href !== '/dashboard' || pathname === '/dashboard')}
                  tooltip={item.label}
                >
                  <Link href={item.href}>
                    <item.icon />
                    <span>{item.label}</span>
                  </Link>
                </SidebarMenuButton>
                {hasVisibleSubItems(item) && (
                  <SidebarMenuSub>
                    {item.subItems?.filter((sub: any) => sub.roles.includes(user!.role) && (!sub.chiefAdminOnly || user!.isChiefAdmin)).map((subItem: any) => (
                       <SidebarMenuItem key={subItem.href}>
                        <SidebarMenuSubButton asChild isActive={pathname === subItem.href}>
                           <Link href={subItem.href}>
                             <subItem.icon />
                            <span>{subItem.label}</span>
                          </Link>
                        </SidebarMenuSubButton>
                       </SidebarMenuItem>
                    ))}
                  </SidebarMenuSub>
                )}
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarContent>
    </Sidebar>
  );
}
`,
    "src/components/markdown-renderer.tsx": `import React from 'react';

const MarkdownRenderer = ({ content }: { content: string }) => {
  const lines = content.split('\\n');

  const parseLine = (line: string) => {
    // Regex to split by **bold** and *italic* while keeping them
    const parts = line.split(/(\\*\\*.*?\\*\\*|\\*.*?\\*)/g);

    return parts.map((part, index) => {
      if (part.startsWith('**') && part.endsWith('**')) {
        return <strong key={index}>{part.slice(2, -2)}</strong>;
      }
      if (part.startsWith('*') && part.endsWith('*')) {
        return <em key={index}>{part.slice(1, -1)}</em>;
      }
      // Return text nodes for non-empty parts
      return part ? part : null;
    });
  };

  return (
    <div className="prose prose-sm dark:prose-invert max-w-none text-muted-foreground">
      {lines.map((line, index) => (
        <p key={index} className="[&:empty]:hidden">
          {line ? parseLine(line) : <br />}
        </p>
      ))}
    </div>
  );
};

export default MarkdownRenderer;
`,
    "src/components/ui/accordion.tsx": `"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }
`,
    "src/components/ui/alert-dialog.tsx": `"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}
`,
    "src/components/ui/alert.tsx": `import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }
`,
    "src/components/ui/avatar.tsx": `"use client"

import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }
`,
    "src/components/ui/badge.tsx": `import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
`,
    "src/components/ui/button.tsx": `import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
`,
    "src/components/ui/calendar.tsx": `"use client"

import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }
`,
    "src/components/ui/card.tsx": `import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }
`,
    "src/components/ui/carousel.tsx": `"use client"

import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}
`,
    "src/components/ui/chart.tsx": `"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = \`chart-\${id || uniqueId.replace(/:/g, "")}\`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => \`
\${prefix} [data-chart=\${id}] {
\${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? \`  --color-\${key}: \${color};\` : null
  })
  .join("\\n")}
}
\`
          )
          .join("\\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = \`\${labelKey || item.dataKey || item.name || "value"}\`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = \`\${nameKey || item.name || item.dataKey || "value"}\`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = \`\${nameKey || item.dataKey || "value"}\`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}
`,
    "src/components/ui/checkbox.tsx": `"use client"

import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }
`,
    "src/components/ui/collapsible.tsx": `"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }
`,
    "src/components/ui/command.tsx": `"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}
`,
    "src/components/ui/dialog.tsx": `"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
`,
    "src/components/ui/dropdown-menu.tsx": `"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}
`,
    "src/components/ui/form.tsx": `"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  FormProvider,
  useFormContext,
  type ControllerProps,
  type FieldPath,
  type FieldValues,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: \`\${id}-form-item\`,
    formDescriptionId: \`\${id}-form-item-description\`,
    formMessageId: \`\${id}-form-item-message\`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? \`\${formDescriptionId}\`
          : \`\${formDescriptionId} \${formMessageId}\`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message ?? "") : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}
`,
    "src/components/ui/icons.tsx": `import { type SVGProps } from 'react';

export const Icons = {
  Logo: (props: SVGProps<SVGSVGElement>) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M12 22c5.523 0 10-4.477 10-10S17.523 2 12 2 2 6.477 2 12s4.477 10 10 10z" fill="#003366" stroke="none" />
      <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H17.5A2.5 2.5 0 0 1 20 19.5" fill="#003366" stroke="none" />
      <path d="M4 19.5V19c0-1.1.9-2 2-2h12c1.1 0 2 .9 2 2v.5" fill="#003366" stroke="none" />
      
      {/* Tree/Person */}
      <circle cx="12" cy="10" r="1.5" fill="#3E863E" stroke="none" />
      <path d="M12 11.5v5.5" stroke="#3E863E" strokeWidth="2" />
      <path d="M10 14h4" stroke="#3E863E" strokeWidth="2" />

      {/* Leaves */}
      <path d="M12 10 a2 2 0 0 1-1.73 -1" fill="none" stroke="#3E863E" strokeWidth="1.5" />
      <path d="M12 10 a2 2 0 0 1 1.73 -1" fill="none" stroke="#3E863E" strokeWidth="1.5" />
      
      <circle cx="9.5" cy="8.5" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="14.5" cy="8.5" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="12" cy="7" r="1.2" fill="#3E863E" stroke="none" />

      <circle cx="8" cy="6" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="16" cy="6" r="1.2" fill="#3E863E" stroke="none" />
      
      <circle cx="10" cy="4.5" r="1.2" fill="#3E863E" stroke="none" />
      <circle cx="14" cy="4.5" r="1.2" fill="#3E863E" stroke="none" />
    </svg>
  ),
};
`,
    "src/components/ui/input.tsx": `import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
`,
    "src/components/ui/label.tsx": `"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }
`,
    "src/components/ui/menubar.tsx": `"use client"

import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

function MenubarMenu({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {
  return <MenubarPrimitive.Menu {...props} />
}

function MenubarGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Group>) {
  return <MenubarPrimitive.Group {...props} />
}

function MenubarPortal({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {
  return <MenubarPrimitive.Portal {...props} />
}

function MenubarRadioGroup({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {
  return <MenubarPrimitive.RadioGroup {...props} />
}

function MenubarSub({
  ...props
}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {
  return <MenubarPrimitive.Sub data-slot="menubar-sub" {...props} />
}

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}
`,
    "src/components/ui/popover.tsx": `"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }
`,
    "src/components/ui/progress.tsx": `"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: \`translateX(-\${100 - (value || 0)}%)\` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }
`,
    "src/components/ui/radio-group.tsx": `"use client"

import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }
`,
    "src/components/ui/scroll-area.tsx": `"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }
`,
    "src/components/ui/select.tsx": `"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}
`,
    "src/components/ui/separator.tsx": `"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }
`,
    "src/components/ui/sheet.tsx": `"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}
`,
    "src/components/ui/sidebar.tsx": `"use client"

import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent, SheetHeader, SheetTitle } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar_state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        const openState = typeof value === "function" ? value(open) : value
        if (setOpenProp) {
          setOpenProp(openState)
        } else {
          _setOpen(openState)
        }

        // This sets the cookie to keep the sidebar state.
        document.cookie = \`\${SIDEBAR_COOKIE_NAME}=\${openState}; path=/; max-age=\${SIDEBAR_COOKIE_MAX_AGE}\`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-background",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-card text-card-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-card p-0 text-card-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <SheetHeader className="sr-only">
                <SheetTitle>Navigation Menu</SheetTitle>
            </SheetHeader>
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block text-card-foreground"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-card group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-card/80",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-foreground/70 outline-none ring-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-foreground outline-none ring-ring transition-transform hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-ring transition-[width,height,padding] hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 active:bg-accent active:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-accent data-[active=true]:font-medium data-[active=true]:text-accent-foreground data-[state=open]:hover:bg-accent data-[state=open]:hover:text-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-accent hover:text-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--border))] hover:bg-accent hover:text-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip || state === "expanded" || isMobile) {
      return button
    }
    
    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-foreground outline-none ring-ring transition-transform hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-accent-foreground peer-data-[active=true]/menu-button:text-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return \`\${Math.floor(Math.random() * 40) + 50}%\`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-foreground outline-none ring-ring hover:bg-accent hover:text-accent-foreground focus-visible:ring-2 active:bg-accent active:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-accent-foreground",
        "data-[active=true]:bg-accent data-[active=true]:text-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}
`,
    "src/components/ui/skeleton.tsx": `import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }
`,
    "src/components/ui/slider.tsx": `"use client"

import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }
`,
    "src/components/ui/switch.tsx": `"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }
`,
    "src/components/ui/table.tsx": `import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}
`,
    "src/components/ui/tabs.tsx": `"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }
`,
    "src/components/ui/textarea.tsx": `import * as React from 'react';

import {cn} from '@/lib/utils';

const Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(
  ({className, ...props}, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',
          className
        )}
        ref={ref}
        {...props}
      />
    );
  }
);
Textarea.displayName = 'Textarea';

export {Textarea};
`,
    "src/components/ui/toast.tsx": `"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}
`,
    "src/components/ui/toaster.tsx": `"use client"

import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}
`,
    "src/components/ui/tooltip.tsx": `"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Portal>
    <TooltipPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </TooltipPrimitive.Portal>
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }
`,
    "src/context/user-context.tsx": `// src/context/user-context.tsx
"use client";

import { createContext, useContext, useState, ReactNode, useEffect, useCallback } from 'react';
import { 
    type Student, type SchoolClass, type LearningMaterial, type CbtTest, type StudentTestAttempt, type Subject, 
    type SchoolCategory, type Staff, type IssueReport, type Assignment, type SubmittedLessonPlan, type Conversation,
    type FeeStructure, type BankAccount, type PaymentConfirmation,
    initialFeeStructure, initialBankAccounts, initialAdminsData
} from '@/lib/data';
import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '@/lib/firebase';

export type Role = "Admin" | "Staff" | "Student" | "Parent";

export interface User extends Partial<Student>, Partial<Staff> {
  name: string;
  role: Role;
  avatar: string;
  schoolName?: string;
  schoolId?: string;
  status?: 'Active' | 'Blocked';
  isChiefAdmin?: boolean;
  username?: string; 
  password?: string;
  phoneNo?: string;
  isBlockedFromReporting?: boolean;
}

type AttendanceStatus = 'present' | 'absent';
export type AttendanceRecord = Record<string, { morning: AttendanceStatus; afternoon: AttendanceStatus }>;
export type AttendanceState = Record<string, AttendanceRecord>;

export interface TeacherAttendanceRecord {
  checkIn?: Date;
  checkOut?: Date;
  status: 'On Time' | 'Late' | 'Absent' | 'Early Departure';
  reason?: string;
}
export type TeacherAttendanceLog = Record<string, TeacherAttendanceRecord>;
export type TeacherAttendanceState = Record<string, TeacherAttendanceLog>;

interface AppState {
  admins: User[];
  staff: Staff[];
  students: Student[];
  pendingStudents: Student[];
  schoolClasses: SchoolClass[];
  subjects: Subject[];
  learningMaterials: LearningMaterial[];
  assignments: Assignment[];
  cbtTests: CbtTest[];
  studentTestAttempts: StudentTestAttempt[];
  attendance: AttendanceState;
  teacherAttendance: TeacherAttendanceState;
  holidays: Date[];
  issueReports: IssueReport[];
  submittedLessonPlans: SubmittedLessonPlan[];
  conversations: Conversation[];
  feeStructure: FeeStructure;
  bankAccounts: BankAccount[];
  paymentConfirmations: PaymentConfirmation[];
}

interface UserContextType extends AppState {
  user: User | null;
  setUser: (user: User | null) => void;
  isGlobalLoading: boolean;
  setAdmins: React.Dispatch<React.SetStateAction<User[]>>;
  setSchoolClasses: React.Dispatch<React.SetStateAction<SchoolClass[]>>;
  setStudents: React.Dispatch<React.SetStateAction<Student[]>>;
  setPendingStudents: React.Dispatch<React.SetStateAction<Student[]>>;
  setAttendance: React.Dispatch<React.SetStateAction<AttendanceState>>;
  setTeacherAttendance: React.Dispatch<React.SetStateAction<TeacherAttendanceState>>;
  setHolidays: React.Dispatch<React.SetStateAction<Date[]>>;
  setStaff: React.Dispatch<React.SetStateAction<Staff[]>>;
  setLearningMaterials: React.Dispatch<React.SetStateAction<LearningMaterial[]>>;
  setAssignments: React.Dispatch<React.SetStateAction<Assignment[]>>;
  setCbtTests: React.Dispatch<React.SetStateAction<CbtTest[]>>;
  setStudentTestAttempts: React.Dispatch<React.SetStateAction<StudentTestAttempt[]>>;
  setSubjects: React.Dispatch<React.SetStateAction<Subject[]>>;
  setIssueReports: React.Dispatch<React.SetStateAction<IssueReport[]>>;
  setSubmittedLessonPlans: React.Dispatch<React.SetStateAction<SubmittedLessonPlan[]>>;
  setConversations: React.Dispatch<React.SetStateAction<Conversation[]>>;
  setFeeStructure: React.Dispatch<React.SetStateAction<FeeStructure>>;
  setBankAccounts: React.Dispatch<React.SetStateAction<BankAccount[]>>;
  setPaymentConfirmations: React.Dispatch<React.SetStateAction<PaymentConfirmation[]>>;
  resumptionTime: string;
  closureTime: string;
}

const UserContext = createContext<UserContextType | undefined>(undefined);

const sortClasses = (classes: SchoolClass[]) => {
  const categoryOrder: Record<SchoolCategory, number> = {
    'nursery': 1,
    'primary': 2,
    'upperBasic': 3,
    'highSchool': 4,
  };

  const extractNumeric = (name: string) => {
    const match = name.match(/\\d+/);
    return match ? parseInt(match[0], 10) : Infinity;
  };

  return [...classes].sort((a, b) => {
    const categoryComparison = categoryOrder[a.category] - categoryOrder[b.category];
    if (categoryComparison !== 0) {
      return categoryComparison;
    }
    const numA = extractNumeric(a.name);
    const numB = extractNumeric(b.name);
    if (numA !== Infinity && numB !== Infinity && numA !== numB) {
      return numA - numB;
    }
    return a.name.localeCompare(b.name, undefined, { numeric: true });
  });
};

const CURRENT_USER_KEY = 'encon-concept-user';

const EMPTY_APP_STATE: AppState = {
    admins: [], staff: [], students: [], pendingStudents: [], schoolClasses: [],
    subjects: [], learningMaterials: [], assignments: [], cbtTests: [],
    studentTestAttempts: [], attendance: {}, teacherAttendance: {}, holidays: [],
    issueReports: [], submittedLessonPlans: [], conversations: [],
    feeStructure: initialFeeStructure, bankAccounts: initialBankAccounts, paymentConfirmations: []
};

// Function to get the initial state, now without demo data other than the platform owner.
const getInitialState = (): AppState => {
    return {
        ...EMPTY_APP_STATE,
        admins: initialAdminsData, // Keep platform owner for initial login
    };
};

export const UserProvider = ({ children }: { children: ReactNode }) => {
  const [isGlobalLoading, setIsGlobalLoading] = useState(true);
  const [user, _setUser] = useState<User | null>(null);
  const [appState, setAppState] = useState<AppState>(getInitialState);

  // This effect runs once on mount to set the initial user from localStorage
  useEffect(() => {
    const storedUserJSON = localStorage.getItem(CURRENT_USER_KEY);
    if (storedUserJSON) {
        try {
            const storedUser = JSON.parse(storedUserJSON);
            _setUser(storedUser);
        } catch {
            localStorage.removeItem(CURRENT_USER_KEY);
        }
    } else {
        // If no user is stored, default to the main admin for demo purposes
        _setUser(initialAdminsData[0]);
    }
  }, []);
  
  const fetchDataForSchool = useCallback(async (schoolId: string) => {
      setIsGlobalLoading(true);
      if (schoolId === 'encon-initial') {
           // For platform owner, fetch all schools' chief admins
           const adminsQuery = query(collection(db, "admins"), where("isChiefAdmin", "==", true));
           const adminsSnapshot = await getDocs(adminsQuery);
           const allAdmins = adminsSnapshot.docs.map(doc => doc.data() as User);
           setAppState(prevState => ({
                ...EMPTY_APP_STATE,
                admins: [...initialAdminsData, ...allAdmins], // Keep platform owner + fetched admins
            }));
           setIsGlobalLoading(false);
           return;
      }
      
      try {
        const collections: (keyof AppState)[] = ['admins', 'staff', 'students', 'schoolClasses', 'subjects', 'learningMaterials', 'assignments', 'cbtTests', 'conversations'];
        const queries = collections.map(col => getDocs(query(collection(db, col as string), where("schoolId", "==", schoolId))));
        
        const results = await Promise.all(queries);
        
        const newState: Partial<AppState> = {};
        
        results.forEach((snapshot, index) => {
            const collectionName = collections[index];
            newState[collectionName] = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }) as any);
        });

        // Special handling for students within classes
        if (newState.schoolClasses && newState.students) {
            const studentsByClass = (newState.students as Student[]).reduce((acc, student) => {
                if (student.classId) {
                    if (!acc[student.classId]) {
                        acc[student.classId] = [];
                    }
                    acc[student.classId].push(student);
                }
                return acc;
            }, {} as Record<string, Student[]>);

            newState.schoolClasses = (newState.schoolClasses as SchoolClass[]).map(sc => ({
                ...sc,
                students: studentsByClass[sc.id] || []
            }));
        }
        
        setAppState(prevState => ({ ...prevState, ...EMPTY_APP_STATE, ...newState, admins: [...initialAdminsData, ...(newState.admins || [])] }));

      } catch (error) {
        console.error("Failed to fetch school data:", error);
      } finally {
        setIsGlobalLoading(false);
      }
  }, []);

  useEffect(() => {
      if (user?.schoolId) {
        fetchDataForSchool(user.schoolId);
      } else if (user) {
        // User exists but has no schoolId, probably just logged out or in a weird state
        setIsGlobalLoading(false);
      }
  }, [user?.schoolId]);


  const setUser = (newUser: User | null) => {
    _setUser(newUser);
    if (newUser) {
      localStorage.setItem(CURRENT_USER_KEY, JSON.stringify(newUser));
    } else {
      localStorage.removeItem(CURRENT_USER_KEY);
      setAppState(getInitialState());
      _setUser(null);
    }
  };

  const createSetter = <K extends keyof AppState>(field: K) => {
    return (value: React.SetStateAction<AppState[K]>) => {
      setAppState(prevState => {
        const newValue = typeof value === 'function' 
          ? (value as (prev: AppState[K]) => AppState[K])(prevState[field]) 
          : value;
        return { ...prevState, [field]: newValue };
      });
    };
  };
  
  const sortedClasses = sortClasses(appState.schoolClasses);

  const contextValue: UserContextType = {
    user,
    setUser,
    isGlobalLoading,
    ...appState,
    schoolClasses: sortedClasses,
    setAdmins: createSetter('admins'),
    setStaff: createSetter('staff'),
    setStudents: createSetter('students'),
    setPendingStudents: createSetter('pendingStudents'),
    setSchoolClasses: createSetter('schoolClasses'),
    setSubjects: createSetter('subjects'),
    setLearningMaterials: createSetter('learningMaterials'),
    setAssignments: createSetter('assignments'),
    setCbtTests: createSetter('cbtTests'),
    setStudentTestAttempts: createSetter('studentTestAttempts'),
    setAttendance: createSetter('attendance'),
    setTeacherAttendance: createSetter('teacherAttendance'),
    setHolidays: createSetter('holidays'),
    setIssueReports: createSetter('issueReports'),
    setSubmittedLessonPlans: createSetter('submittedLessonPlans'),
    setConversations: createSetter('conversations'),
    setFeeStructure: createSetter('feeStructure'),
    setBankAccounts: createSetter('bankAccounts'),
    setPaymentConfirmations: createSetter('paymentConfirmations'),
    resumptionTime: '08:00',
    closureTime: '16:00',
  };

  return (
    <UserContext.Provider value={contextValue}>
      {children}
    </UserContext.Provider>
  );
};

export const useUser = () => {
  const context = useContext(UserContext);
  if (context === undefined) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
};
`,
    "src/hooks/use-auth.ts": `// src/hooks/use-auth.ts
"use client";

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import { useUser, type Role, type User } from '@/context/user-context';

export function useAuth() {
    const router = useRouter();
    const { setUser, isGlobalLoading } = useUser();
    
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState('');

    const login = async (selectedRole: Role, loginId: string, password: string) => {
        setError('');
        setIsLoading(true);

        if (!loginId || !password) {
            setError("Please fill in all required fields.");
            setIsLoading(false);
            return;
        }

        try {
            const response = await fetch('/api/auth/login', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ role: selectedRole, loginId, password }),
            });
            
            const data = await response.json();

            if (!response.ok) {
                throw new Error(data.message || 'Authentication failed.');
            }
            
            setUser(data.user);
            router.push("/dashboard");

        } catch (err: any) {
            console.error("Login Error:", err);
            setError(err.message || "An unexpected error occurred. Please try again.");
        } finally {
            setIsLoading(false);
        }
    };

    const logout = () => {
        // In a real backend, this would also call an API endpoint to invalidate the session/token
        setUser(null);
        router.push('/');
    };

    return {
        login,
        logout,
        isLoading: isLoading || isGlobalLoading,
        error,
    };
}
`,
    "src/hooks/use-mobile.tsx": `import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(\`(max-width: \${MOBILE_BREAKPOINT - 1}px)\`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}
`,
    "src/hooks/use-toast.ts": `"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }
`,
    "src/lib/data.ts": `// src/lib/data.ts
import type { User } from "@/context/user-context";

export type AnnouncementCategory = "General" | "Urgent" | "Event" | "Staff Only";

export interface Announcement {
  id: string;
  title: string;
  author: string;
  date: string;
  content: string;
  category: AnnouncementCategory;
}

export interface Assignment {
  id: string;
  title: string;
  description: string;
  subject: string;
  classId: string;
  dueDate: string;
  createdBy: string;
  schoolId: string;
}

export interface Message {
  id: string;
  senderId: string; // email or regNo
  text: string;
  timestamp: string;
}

export interface Conversation {
  id: string;
  participants: string[]; // array of emails/regNos
  messages: Message[];
  unread: boolean;
  topic: string;
}

export const initialAdminsData: User[] = [
    { 
      schoolId: 'encon-initial',
      name: 'encon concept',
      firstName: 'encon',
      surname: 'concept',
      password: '070377', // Platform owner password
      username: 'luckyencon@gmail.com',
      email: 'luckyencon@gmail.com',
      role: 'Admin', 
      avatar: 'https://picsum.photos/seed/encon/150/150',
      isChiefAdmin: true,
      schoolName: 'encon concept Platform',
      status: 'Active',
      phoneNo: '07037742669',
    },
];

export type StaffPosition = 'Principal' | 'Admin' | 'HOD' | 'Classroom Teacher' | 'Form Master' | 'Minder' | 'Non-academic';
export type StaffStatus = 'Full-time' | 'Part-time';

export interface Staff extends User {
  staffId: string;
  phoneNo: string;
  subjectsTaught: string[];
  position: StaffPosition;
  status: StaffStatus;
}

export const announcements: Announcement[] = [
  {
    id: '1',
    title: 'Welcome Back to School!',
    author: 'Principal\\'s Office',
    date: '2024-08-15',
    content: 'Welcome back students and staff! We are excited for a new academic year. Please make sure to check the updated school map and event schedule. *Let\\'s make this year the best one yet!*',
    category: 'General',
  },
  {
    id: '2',
    title: 'Library Renovation Update',
    author: 'School Facilities',
    date: '2024-08-14',
    content: 'The main library will be closed from **1st Sept to 15th Sept** for renovations. The north wing will remain open for book returns and limited study space. We apologise for any inconvenience.',
    category: 'Urgent',
  },
];

export type SchoolCategory = 'nursery' | 'primary' | 'upperBasic' | 'highSchool';

export interface Subject {
  id: string;
  name: string;
  schoolId: string;
  category: SchoolCategory;
}

export interface Grade {
  subject: string;
  firstCA: number | null;
  secondCA: number | null;
  project: number | null;
  exam: number | null;
}

export interface Psychomotor {
  skill: string;
  rating: 1 | 2 | 3 | 4 | 5;
}

export interface FeeItem {
    name: string;
    amount: number;
}

export interface FeeDetails {
  paymentId: string;
  totalFees: number;
  amountPaid: number;
  balance: number;
  status: 'Paid' | 'Owing' | 'Part-payment';
  paidItems?: FeeItem[];
}

export interface Student {
  firstName: string;
  middleName?: string;
  surname: string;
  name: string; // Keep for now for compatibility, will be derived
  regNo: string;
  email: string;
  password?: string;
  parentPassword?: string;
  avatar: string;
  dob: Date;
  parentName: string;
  parentContact: string;
  nationality: string;
  stateOfOrigin: string;
  lga: string;
  hobbies: string;
  bloodGroup: string;
  genotype: string;
  disabilities?: string;
  healthConditions?: string;
  grades?: Grade[];
  psychomotor?: Psychomotor[];
  fees?: FeeDetails;
  classId: string;
  schoolId: string;
  schoolName: string;
  offeredSubjects?: string[]; // Array of subject IDs
  isBlockedFromReporting?: boolean;
}

export interface SchoolClass {
  id: string;
  name: string;
  schoolId: string;
  category: SchoolCategory;
  teacher?: string;
  students: Student[];
  offeredSubjects: string[]; // Array of subject IDs
}

export interface LearningMaterial {
  id: string;
  subject: string;
  title: string;
  type: 'video' | 'image' | 'slide' | 'document';
  url?: string; // Optional for content-based materials
  thumbnail?: string;
  content?: string; // For lesson notes
  classId?: string; // To scope materials to a class
  uploadedBy: string;
  date: string;
  schoolId: string;
}

export interface SubmittedLessonPlan {
  id: string;
  teacherName: string;
  teacherId: string;
  classId: string;
  subject: string;
  week: number;
  topic: string;
  content: any; // The full generated content
  dateSubmitted: string;
}

export interface ObjectiveQuestion {
  id: string;
  question: string;
  options: string[];
  correctAnswer: string;
  marks: number;
}

export interface EssayQuestion {
  id: string;
  question: string;
  markingRubric: string; // Model answer or rubric
  marks: number;
}

export type TestCategory = '1st CA' | '2nd CA' | 'Exam';
export type TestStatus = 'Draft' | 'Open' | 'Closed';

export interface CbtTest {
  id: string;
  title: string;
  subject: string;
  category: TestCategory;
  status: TestStatus;
  dateCreated: string;
  createdBy: string; // Staff member's name
  objectiveQuestions: ObjectiveQuestion[];
  essayQuestions: EssayQuestion[];
  restrictedStudents?: string[];
  classId?: string;
  resultsPublished: boolean;
  duration: number; // Duration in minutes
  schoolId: string;
}

export interface StudentTestAttempt {
  studentRegNo: string;
  testId: string;
  objectiveAnswers: Record<string, string>; // questionId: selectedOption
  essayAnswers: Record<string, string>; // questionId: studentAnswer
  objectiveScore: number;
  essayScores: Record<string, { score: number; feedback: string }>; // questionId: {score, feedback}
  totalScore: number;
  dateTaken: string;
  startTime: string;
  endTime: string;
}

export interface IssueReport {
  id: string;
  studentRegNo: string;
  studentName: string;
  report: string;
  date: string;
  isResolved: boolean;
}

export interface PaymentConfirmation {
  id: string;
  studentRegNo: string;
  studentName: string;
  amount: number;
  paidItems: FeeItem[];
  paymentMethod: string;
  receiptUrl: string; // For this demo, this will just be a placeholder
  date: string;
}

export interface FeeStructure {
    nursery: FeeItem[];
    primary: FeeItem[];
    upperBasic: FeeItem[];
    highSchool: FeeItem[];
}

export interface BankAccount {
    type: 'Tuition' | 'Materials' | 'General';
    accountName: string;
    accountNumber: string;
    bankName: string;
}

export const initialFeeStructure: FeeStructure = {
    nursery: [ { name: 'Tuition', amount: 30000 }, { name: 'Materials', amount: 5000 } ],
    primary: [ { name: 'Tuition', amount: 35000 }, { name: 'Materials', amount: 5000 }, { name: 'PTA Levy', amount: 1000 } ],
    upperBasic: [ { name: 'Tuition', amount: 40000 }, { name: 'Materials', amount: 5000 }, { name: 'PTA Levy', amount: 1000 } ],
    highSchool: [ { name: 'Tuition', amount: 45000 }, { name: 'Materials', amount: 5000 }, { name: 'PTA Levy', amount: 1000 }, { name: 'Lab Fee', amount: 2000 } ],
}

export const initialBankAccounts: BankAccount[] = [
    { type: 'Tuition', accountName: 'Bright Stars Tuition', accountNumber: '1234567890', bankName: 'Zenith Bank' },
    { type: 'Materials', accountName: 'Bright Stars Materials', accountNumber: '0987654321', bankName: 'GTBank' }
]

export const defaultSubjectsTemplate: Omit<Subject, 'id' | 'schoolId'>[] = [
  // Nursery Subjects
  { name: 'Numeracy (Number Work)', category: 'nursery' },
  { name: 'Literacy (Letter Work)', category: 'nursery' },
  { name: 'Phonics', category: 'nursery' },
  { name: 'Creative Arts', category: 'nursery' },
  { name: 'Rhymes', category: 'nursery' },
  { name: 'Social Habits', category: 'nursery' },
  { name: 'Health Habits', category: 'nursery' },
  { name: 'Scientific & Reflective Thinking', category: 'nursery' },

  // Primary Subjects
  { name: 'English Studies', category: 'primary' },
  { name: 'Mathematics', category: 'primary' },
  { name: 'Basic Science', category: 'primary' },
  { name: 'Basic Technology', category: 'primary' },
  { name: 'Social Studies', category: 'primary' },
  { name: 'Civic Education', category: 'primary' },
  { name: 'Christian Religious Knowledge', category: 'primary' },
  { name: 'Islamic Religious Knowledge', category: 'primary' },
  { name: 'Computer Studies / ICT', category: 'primary' },
  { name: 'Agricultural Science', category: 'primary' },
  { name: 'Home Economics', category: 'primary' },
  { name: 'Physical and Health Education', category: 'primary' },
  { name: 'Cultural and Creative Arts', category: 'primary' },
  { name: 'Yoruba Language', category: 'primary' },
  { name: 'Igbo Language', category: 'primary' },
  { name: 'Hausa Language', category: 'primary' },
  { name: 'French Language', category: 'primary' },
  { name: 'Writing', category: 'primary' },

  // Upper Basic (Junior Secondary) Subjects
  { name: 'English Studies', category: 'upperBasic' },
  { name: 'Mathematics', category: 'upperBasic' },
  { name: 'Basic Science', category: 'upperBasic' },
  { name: 'Basic Technology', category: 'upperBasic' },
  { name: 'Social Studies', category: 'upperBasic' },
  { name: 'Civic Education', category: 'upperBasic' },
  { name: 'Christian Religious Knowledge', category: 'upperBasic' },
  { name: 'Islamic Religious Knowledge', category: 'upperBasic' },
  { name: 'Computer Studies / ICT', category: 'upperBasic' },
  { name: 'Agricultural Science', category: 'upperBasic' },
  { name: 'Home Economics', category: 'upperBasic' },
  { name: 'Business Studies', category: 'upperBasic' },
  { name: 'Physical and Health Education', category: 'upperBasic' },
  { name: 'Cultural and Creative Arts', category: 'upperBasic' },
  { name:' Yoruba Language', category: 'upperBasic' },
  { name: 'Igbo Language', category: 'upperBasic' },
  { name: 'Hausa Language', category: 'upperBasic' },
  { name: 'French Language', category: 'upperBasic' },
  { name: 'Arabic Language', category: 'upperBasic' },
  
  // High School (Senior Secondary) Subjects
  { name: 'English Language', category: 'highSchool' },
  { name: 'Mathematics', category: 'highSchool' },
  { name: 'Civic Education', category: 'highSchool' },
  { name: 'Data Processing', category: 'highSchool' },
  { name: 'Biology', category: 'highSchool' },
  { name: 'Chemistry', category: 'highSchool' },
  { name: 'Physics', category: 'highSchool' },
  { name: 'Further Mathematics', category: 'highSchool' },
  { name: 'Agricultural Science', category: 'highSchool' },
  { name: 'Physical and Health Education', category: 'highSchool' },
  { name: 'Literature in English', category: 'highSchool' },
  { name: 'Government', category: 'highSchool' },
  { name: 'Christian Religious Knowledge', category: 'highSchool' },
  { name: 'Islamic Religious Knowledge', category: 'highSchool' },
  { name: 'Economics', category: 'highSchool' },
  { name: 'Geography', category: 'highSchool' },
  { name: 'History', category: 'highSchool' },
  { name: 'Visual Arts', category: 'highSchool' },
  { name: 'Music', category: 'highSchool' },
  { name: 'Financial Accounting', category: 'highSchool' },
  { name: 'Commerce', category: 'highSchool' },
  { name: 'Technical Drawing', category: 'highSchool' },
  { name: 'Home Management', category: 'highSchool' },
  { name: 'Foods and Nutrition', category: 'highSchool' },
  { name: 'Yoruba Language', category: 'highSchool' },
  { name: 'Igbo Language', category: 'highSchool' },
  { name: 'Hausa Language', category: 'highSchool' },
  { name: 'French Language', category: 'highSchool' },
];

export const defaultClassesTemplate: Omit<SchoolClass, 'id' | 'schoolId' | 'students' | 'teacher' | 'offeredSubjects'>[] = [
    // Nursery
    { name: 'PRE-NURSERY', category: 'nursery' },
    { name: 'NURSERY 1', category: 'nursery' },
    { name: 'NURSERY 2', category: 'nursery' },
    { name: 'NURSERY 3', category: 'nursery' },
    // Primary
    { name: 'LOWER BASIC 1', category: 'primary' },
    { name: 'LOWER BASIC 2', category: 'primary' },
    { name: 'LOWER BASIC 3', category: 'primary' },
    { name: 'MIDDLE BASIC 4', category: 'primary' },
    { name: 'MIDDLE BASIC 5', category: 'primary' },
    { name: 'MIDDLE BASIC 6', category: 'primary' },
    // Upper Basic
    { name: 'UPPER BASIC 7', category: 'upperBasic' },
    { name: 'UPPER BASIC 8', category: 'upperBasic' },
    { name: 'UPPER BASIC 9', category: 'upperBasic' },
    // High School
    { name: 'SENIOR SECONDARY 1', category: 'highSchool' },
    { name: 'SENIOR SECONDARY 2', category: 'highSchool' },
    { name: 'SENIOR SECONDARY 3', category: 'highSchool' },
];
`,
    "src/lib/firebase.ts": `// src/lib/firebase.ts
import { initializeApp, getApps, getApp } from 'firebase/app';
import { getFirestore } from 'firebase/firestore';

// This configuration uses environment variables.
// You must create a .env file in the root of your project and
// add your Firebase project's configuration details there.
const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
};

// Initialize Firebase
const app = !getApps().length ? initializeApp(firebaseConfig) : getApp();
const db = getFirestore(app);

export { app, db };
`,
    "src/lib/utils.ts": `import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
`,
    "tailwind.config.ts": `import type {Config} from 'tailwindcss';

export default {
  darkMode: ['class'],
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      fontFamily: {
        body: ['Inter', 'sans-serif'],
        headline: ['"Space Grotesk"', 'sans-serif'],
        code: ['monospace'],
      },
      colors: {
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0',
          },
          to: {
            height: 'var(--radix-accordion-content-height)',
          },
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)',
          },
          to: {
            height: '0',
          },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;
`,
    "tsconfig.json": `{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
`,
}
const outputDir = 'encon-school-app';

// Create the main directory if it doesn't exist
if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
}

// Iterate over the project data and create files
for (const [filePath, content] of Object.entries(projectData)) {
    const fullPath = path.join(outputDir, filePath);
    const dirName = path.dirname(fullPath);

    // Create subdirectory if it doesn't exist
    if (!fs.existsSync(dirName)) {
        fs.mkdirSync(dirName, { recursive: true });
    }

    // Write the file
    fs.writeFileSync(fullPath, content);
    console.log(\`Created file: \${fullPath}\`);
}

console.log(\`\\nProject successfully created in './\${outputDir}' folder.\`);
console.log('Next steps:');
console.log(\`1. cd \${outputDir}\`);
console.log('2. npm install');
console.log('3. Follow the hosting instructions to deploy your app.');
